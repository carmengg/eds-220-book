# Python Intro II

## Objectives

Introduce the following data types: lists, tuples, and dictionaries. 

## Lists
Lists are one of the core Python classes. They are, well..., ordered lists of Python objects. We declare one by listing its elements between square brackets `[]`.

Lists are *mutable*, which means we can modify their contents in place (without creating a new object). We interact with them by using the lists methods. For example:

```{python}
# create a list
my_list = [2,3, 6, "9"]
print(my_list)
print(type(my_list))
print(id(my_list), '\n')

# add a new item to the list
my_list.append(10)
print(my_list)
print(id(my_list), '\n')

# remove the last item in the list
my_list.pop()
print(my_list)
print(id(my_list))
```

### Indexing
We can access items within the list by indexing. **Remember that indexing in Python starts at 0.** 

``` python
# Return first element in the list
print(my_list[0])

# When we try to access the "fifth" element 
# of the list we get an Index error
print(my_list[5])
```
![](/images/lesson-2/index_error.png)

:::{.callout-note}
## R and Python

Indexing in Python can get a bit of getting used to, particularly if you're already familar with R, where we start indexing at 1. In case it is helpful, here's some rationale about the 0-indexing:

*The index in Python tells you the number of steps you've moved from the beginning of the list. So, when you are at the start of a list you have moved 0 places from the beginning.*
:::

### Slicing

We can also **slice** a list, which means selecting a subsection of the list. The notation to do this is `my_list[start:stop]`. The element at the `start` index is included, but the one at *the `stop` index is not included.* 

```{python}
# define a list
seq = [0,1,2,3,4,5,6,7,8]
# select elements with index 3,4, and 5
# NOTICE 6 (the stop index) is not included in the slice
seq[3:6]
```

When slicing, we can also omit the `start` or `stop` index. Omiting `start` will start the slice from the start of the list, while omiting `stop` will end the slice at the end of the list

```{python}
# our original list
print(seq)

# slice from index 0 to index 3 (4 elements)
print(seq[:4])

# slice from index 6 to last index
print(seq[6:])
```

We can check if an element is within a list by using the `in` operator:

```{python}
print(my_list)
print(9 in my_list)
print("9" in my_list)
```

`in` is one of the so-called **reserved words** in Python. These are words that we can never use as names of variables because they are built-in in Python and represent a specific action or object. We can get the full list of reserved words by typing `help(keywords)`.
```{python}
help("keywords")
```


We will use lists often and will discover new methods as we go forward. [This is a good place to read more about lists](https://wesmckinney.com/book/python-builtin#list).

## Tuples

A **tuple** is a fixed-length, immutable sequence of Python objects. Tuples are *immutable*, which means once we create one, we cannot modify their contents like we did for lists.  

We create a tuple by listing its items inside parentehsis `()`.

```{python}
tup = (1,2,4,8)
print(type(tup))
tup
```

Indexing for tuples works the same as it does for lists.

```{python}
print(tup)
print(tup[0])
print(tup[1:3])
print(tup[-1])
```

```{python}
# checking for membership works the same in tuples
8 in tup
```

Since tuples are immutable they don't have a lot of mehtods. Actually, they only have two! Here is one of them:

```{python}
# can you guess what this method is returning?
print(tup)
tup.index(4)   
```

## Dictionaries

A **dictionary** stores a collectio nof *key-value* pairs, where both the *key* and the *value* are Python objects. Each key is associated with a value, so we can access the value by knowing the key. The syntax to create a dictonary is 

    { key_1 : value_1,
      key_2 : value_2, 
      key_3 : value_3
      }

For example, the following is dictionary where the keys are Goleta, Carpinteria, and Ventura, and the values are 91245019, 5623561, and 2551572 (a made-up code associated to each city).

```{python}
D = { 'Goleta': 100,
      'Carpinteria' : 200,
      'Ventura' : 300}
print(type(D))
D
```

We can access the value at a specific key by using the key name as index:

```{python}
# return the value associated to an existing key
D['Goleta']
```

``` python
# we get an error if try to access an unexisting key
D['Santa_Barbara']
```
![](/images/lesson-2/key_error.png)

Fortunately, it is both easy to add a key and to chek if an object is in the dictionary's keys.

```{python}
# Add the key-value pair Santa_Barbara-3254678 to the dictionary
D['Santa_Barbara'] = 400
D
```

Using the `in` operator with a dictionary is equivalent to asking "is this element in the dictionary's keys"? It doesn't check the values.

```{python}
# check if we have some keys in the dictionary
print( 'Santa_Barbara' in D)
print( 'Jalama' in D)

# notice this is false although 100 is in D's values
print(100 in D)
```

## Exercise

::: {.callout-tip}
## Exercise
This exercise is adapted from the Basic Python assignment in the [Earth and Environmental Science e-book](https://earth-env-data-science.github.io/assignments/python_basics_and_functions.html). 

**Lists**

1. Createa list of the names of every planet in the solar system in order from distance to the Sun. Recall [Pluto is not a Planet anymore](https://www.loc.gov/everyday-mysteries/astronomy/item/why-is-pluto-no-longer-a-planet/).

2. Have Python tell you how many planets there are in your list.

3. Use indexing to access Neptune

4. Use slicing to display the first four planets (the rocky ones).

5. Use slicing to display the gas giants Jupiter and Saturn

6. Add Pluto to the list, because we don't want it to feel left out. 

**Tuples**

7. Discuss with your team when it could be useful to use a tuple instead of a list. 

**Dictionaries**

8. Create a dictionary that maps the first four plantes its number of moons. You can use values from the [NASA fact sheet](https://nssdc.gsfc.nasa.gov/planetary/factsheet/). 

9. Use your dictionary to look up how many moons does Earth have. (I know you know the answer. :))

10. Your dictionary has a method that returns its values. Find that method (you can look it up online).

11. Check if there is a planet with 92 moons using your answer to exercise 10. 

12. Add the a new key-value pair to your dictionary with the information for Saturn.

:::