{
  "hash": "4798b26eebd25d3ed8a7e20efd1d05f0",
  "result": {
    "markdown": "# Raster manipulation II\n\nIn this lesson we will learn how to select pixels in a raster by creating a mask from a polygon. \nThe goal will be to calculate total number of meters of vessel tracks within the fishing districts of the Kodiak fishing registration area in Alaska.\n\n## Data\n\nWe will use three datsets about Alaska in this lesson.\n\n**Dataset 1**\n\nThis is a raster dataset at 1km/pixel resolution showing shipping intensity in the Pacific Arctic region during August 2017. \nThe value at each raster cell represents the total length, in meters, of all vessel tracks within each cell. \nThe dataset is part of time series of shipping intensity monthly and the complete datset can be accessed at: [https://arcticdata.io/catalog/view/doi:10.18739/A2SQ8QJ9S](https://arcticdata.io/catalog/view/doi:10.18739/A2SQ8QJ9S).\n\n\n**Dataset 2**\n\nVector data showing statistical areas dividing waters of the State of Alaska and the adjacent Exclusive Economic Zone (EEZ) into small units for the purpose of reporting and analyzing fishery harvest. The dataset is archived at KNB and can be accessed at the following link:\n[https://knb.ecoinformatics.org/view/doi:10.5063/F1QR4VJK](https://knb.ecoinformatics.org/view/doi:10.5063/F1QR4VJK).\n\n**Dataset 3**\n\nA polygon showing Alaska's boundary extracted from the 2022 US Census TIGER shapefiles and with updated CRS. \n\n## Import data\nLet's start by importing the necessary libraries and functions:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches # for creating legends\n\nimport xarray as xr\nimport rioxarray as rioxr\nimport geopandas as gpd\n\nfrom rasterio.features import rasterize # for rasterizing polygons\n\n# -----------\n# update pandas column display\npd.set_option('display.max_columns', None)\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# open raster\nraw_dist = rioxr.open_rasterio('https://arcticdata.io/metacat/d1/mn/v2/object/urn%3Auuid%3A0d223f34-77fc-4ebe-8a58-459b7e575668')\nraw_dist\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n<defs>\n<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n</symbol>\n<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n</symbol>\n</defs>\n</svg>\n<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\nhtml[theme=dark],\nbody[data-theme=dark],\nbody.vscode-dark {\n  --xr-font-color0: rgba(255, 255, 255, 1);\n  --xr-font-color2: rgba(255, 255, 255, 0.54);\n  --xr-font-color3: rgba(255, 255, 255, 0.38);\n  --xr-border-color: #1F1F1F;\n  --xr-disabled-color: #515151;\n  --xr-background-color: #111111;\n  --xr-background-color-row-even: #111111;\n  --xr-background-color-row-odd: #313131;\n}\n\n.xr-wrap {\n  display: block !important;\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-text-repr-fallback {\n  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n  display: none;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '►';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '▼';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-index-preview {\n  grid-column: 2 / 5;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data,\n.xr-index-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data,\n.xr-index-data-in:checked ~ .xr-index-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-index-name div,\n.xr-index-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data,\n.xr-index-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt,\n.xr-attrs dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2,\n.xr-no-icon {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\n</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray (band: 1, y: 2308, x: 3087)&gt;\n[7124796 values with dtype=float32]\nCoordinates:\n  * band         (band) int64 1\n  * x            (x) float64 -2.55e+06 -2.549e+06 ... 5.347e+05 5.357e+05\n  * y            (y) float64 2.711e+06 2.71e+06 ... 4.053e+05 4.043e+05\n    spatial_ref  int64 0\nAttributes:\n    AREA_OR_POINT:       Area\n    STATISTICS_MAXIMUM:  2564975.75\n    STATISTICS_MEAN:     nan\n    STATISTICS_MINIMUM:  0\n    STATISTICS_STDDEV:   nan\n    _FillValue:          -3.4e+38\n    scale_factor:        1.0\n    add_offset:          0.0</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>band</span>: 1</li><li><span class='xr-has-index'>y</span>: 2308</li><li><span class='xr-has-index'>x</span>: 3087</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-a42f6312-acfd-4037-8889-13fc153136dd' class='xr-array-in' type='checkbox' checked><label for='section-a42f6312-acfd-4037-8889-13fc153136dd' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>...</span></div><div class='xr-array-data'><pre>[7124796 values with dtype=float32]</pre></div></div></li><li class='xr-section-item'><input id='section-2751fbcc-5759-4fbd-8635-a473479c71c8' class='xr-section-summary-in' type='checkbox'  checked><label for='section-2751fbcc-5759-4fbd-8635-a473479c71c8' class='xr-section-summary' >Coordinates: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>band</span></div><div class='xr-var-dims'>(band)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>1</div><input id='attrs-4ed8cf3a-28bd-408c-a2d6-6ff005d0567e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-4ed8cf3a-28bd-408c-a2d6-6ff005d0567e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-41ea6d96-f1ee-4743-9c46-748bc744586e' class='xr-var-data-in' type='checkbox'><label for='data-41ea6d96-f1ee-4743-9c46-748bc744586e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([1])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>x</span></div><div class='xr-var-dims'>(x)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-2.55e+06 -2.549e+06 ... 5.357e+05</div><input id='attrs-bfa64e5c-46a7-41d7-ad07-88c73ff70111' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-bfa64e5c-46a7-41d7-ad07-88c73ff70111' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-914cde88-87f2-4211-b58f-bed9b18daa9f' class='xr-var-data-in' type='checkbox'><label for='data-914cde88-87f2-4211-b58f-bed9b18daa9f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([-2549653.392631, -2548653.593215, -2547653.7938  , ...,   533728.004297,\n         534727.803712,   535727.603128])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>y</span></div><div class='xr-var-dims'>(y)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>2.711e+06 2.71e+06 ... 4.043e+05</div><input id='attrs-69ae1373-2cc8-4f0b-ace6-fc66908b673d' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-69ae1373-2cc8-4f0b-ace6-fc66908b673d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7754e086-c6d4-48ce-ba49-c9a43d33a487' class='xr-var-data-in' type='checkbox'><label for='data-7754e086-c6d4-48ce-ba49-c9a43d33a487' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([2711203.120224, 2710203.151455, 2709203.182686, ...,  406275.10722 ,\n        405275.138451,  404275.169682])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>spatial_ref</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0</div><input id='attrs-2805c162-fd3a-4e3e-a22f-9fd205e5808c' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-2805c162-fd3a-4e3e-a22f-9fd205e5808c' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d6159604-ab9d-42b9-b9e8-8dded0a91cb0' class='xr-var-data-in' type='checkbox'><label for='data-d6159604-ab9d-42b9-b9e8-8dded0a91cb0' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>crs_wkt :</span></dt><dd>PROJCS[&quot;unnamed&quot;,GEOGCS[&quot;NAD83&quot;,DATUM[&quot;North_American_Datum_1983&quot;,SPHEROID[&quot;GRS 1980&quot;,6378137,298.257222101004,AUTHORITY[&quot;EPSG&quot;,&quot;7019&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;6269&quot;]],PRIMEM[&quot;Greenwich&quot;,0],UNIT[&quot;degree&quot;,0.0174532925199433,AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;4269&quot;]],PROJECTION[&quot;Albers_Conic_Equal_Area&quot;],PARAMETER[&quot;latitude_of_center&quot;,50],PARAMETER[&quot;longitude_of_center&quot;,-154],PARAMETER[&quot;standard_parallel_1&quot;,55],PARAMETER[&quot;standard_parallel_2&quot;,65],PARAMETER[&quot;false_easting&quot;,0],PARAMETER[&quot;false_northing&quot;,0],UNIT[&quot;metre&quot;,1,AUTHORITY[&quot;EPSG&quot;,&quot;9001&quot;]],AXIS[&quot;Easting&quot;,EAST],AXIS[&quot;Northing&quot;,NORTH]]</dd><dt><span>semi_major_axis :</span></dt><dd>6378137.0</dd><dt><span>semi_minor_axis :</span></dt><dd>6356752.314140356</dd><dt><span>inverse_flattening :</span></dt><dd>298.257222101004</dd><dt><span>reference_ellipsoid_name :</span></dt><dd>GRS 1980</dd><dt><span>longitude_of_prime_meridian :</span></dt><dd>0.0</dd><dt><span>prime_meridian_name :</span></dt><dd>Greenwich</dd><dt><span>geographic_crs_name :</span></dt><dd>NAD83</dd><dt><span>horizontal_datum_name :</span></dt><dd>North American Datum 1983</dd><dt><span>projected_crs_name :</span></dt><dd>unnamed</dd><dt><span>grid_mapping_name :</span></dt><dd>albers_conical_equal_area</dd><dt><span>standard_parallel :</span></dt><dd>(55.0, 65.0)</dd><dt><span>latitude_of_projection_origin :</span></dt><dd>50.0</dd><dt><span>longitude_of_central_meridian :</span></dt><dd>-154.0</dd><dt><span>false_easting :</span></dt><dd>0.0</dd><dt><span>false_northing :</span></dt><dd>0.0</dd><dt><span>spatial_ref :</span></dt><dd>PROJCS[&quot;unnamed&quot;,GEOGCS[&quot;NAD83&quot;,DATUM[&quot;North_American_Datum_1983&quot;,SPHEROID[&quot;GRS 1980&quot;,6378137,298.257222101004,AUTHORITY[&quot;EPSG&quot;,&quot;7019&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;6269&quot;]],PRIMEM[&quot;Greenwich&quot;,0],UNIT[&quot;degree&quot;,0.0174532925199433,AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;4269&quot;]],PROJECTION[&quot;Albers_Conic_Equal_Area&quot;],PARAMETER[&quot;latitude_of_center&quot;,50],PARAMETER[&quot;longitude_of_center&quot;,-154],PARAMETER[&quot;standard_parallel_1&quot;,55],PARAMETER[&quot;standard_parallel_2&quot;,65],PARAMETER[&quot;false_easting&quot;,0],PARAMETER[&quot;false_northing&quot;,0],UNIT[&quot;metre&quot;,1,AUTHORITY[&quot;EPSG&quot;,&quot;9001&quot;]],AXIS[&quot;Easting&quot;,EAST],AXIS[&quot;Northing&quot;,NORTH]]</dd><dt><span>GeoTransform :</span></dt><dd>-2550153.29233849 999.7994153462766 0.0 2711703.104608573 0.0 -999.9687691991521</dd></dl></div><div class='xr-var-data'><pre>array(0)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-0e1e125d-d9e5-4ec1-a023-fde82ca33254' class='xr-section-summary-in' type='checkbox'  ><label for='section-0e1e125d-d9e5-4ec1-a023-fde82ca33254' class='xr-section-summary' >Indexes: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>band</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-d6d79b1d-c8d6-41d0-b166-b8a65711d94c' class='xr-index-data-in' type='checkbox'/><label for='index-d6d79b1d-c8d6-41d0-b166-b8a65711d94c' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([1], dtype=&#x27;int64&#x27;, name=&#x27;band&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>x</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-9cc8655b-d733-4f88-8baa-eed5da276e38' class='xr-index-data-in' type='checkbox'/><label for='index-9cc8655b-d733-4f88-8baa-eed5da276e38' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([ -2549653.392630817, -2548653.5932154707, -2547653.7938001244,\n        -2546653.994384778,  -2545654.194969432, -2544654.3955540857,\n        -2543654.596138739,  -2542654.796723393, -2541654.9973080466,\n       -2540655.1978927003,\n       ...\n         526729.4083896764,   527729.2078050226,   528729.0072203688,\n         529728.8066357151,   530728.6060510613,   531728.4054664075,\n         532728.2048817538,   533728.0042971005,   534727.8037124467,\n          535727.603127793],\n      dtype=&#x27;float64&#x27;, name=&#x27;x&#x27;, length=3087))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>y</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-80025a71-0d44-4736-9043-5a0c1ed6eb86' class='xr-index-data-in' type='checkbox'/><label for='index-80025a71-0d44-4736-9043-5a0c1ed6eb86' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([2711203.1202239734,  2710203.151454774,  2709203.182685575,\n        2708203.213916376,  2707203.245147177,  2706203.276377978,\n       2705203.3076087786, 2704203.3388395794,   2703203.37007038,\n        2702203.401301181,\n       ...\n         413274.888604322, 412274.91983512277, 411274.95106592355,\n       410274.98229672434,  409275.0135275251,  408275.0447583259,\n        407275.0759891267, 406275.10721992794, 405275.13845072873,\n        404275.1696815295],\n      dtype=&#x27;float64&#x27;, name=&#x27;y&#x27;, length=2308))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-2769f0c2-790f-4217-8a5d-89b29b626392' class='xr-section-summary-in' type='checkbox'  checked><label for='section-2769f0c2-790f-4217-8a5d-89b29b626392' class='xr-section-summary' >Attributes: <span>(8)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>AREA_OR_POINT :</span></dt><dd>Area</dd><dt><span>STATISTICS_MAXIMUM :</span></dt><dd>2564975.75</dd><dt><span>STATISTICS_MEAN :</span></dt><dd>nan</dd><dt><span>STATISTICS_MINIMUM :</span></dt><dd>0</dd><dt><span>STATISTICS_STDDEV :</span></dt><dd>nan</dd><dt><span>_FillValue :</span></dt><dd>-3.4e+38</dd><dt><span>scale_factor :</span></dt><dd>1.0</dd><dt><span>add_offset :</span></dt><dd>0.0</dd></dl></div></li></ul></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# open fishing areas polygons\nfishing_areas = gpd.read_file(os.path.join(os.getcwd(), 'data', 'Alaska_Commercial_Salmon_Boundaries.gpkg'))\nfishing_areas.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OBJECTID</th>\n      <th>GEOMETRY_START_DATE</th>\n      <th>GEOMETRY_END_DATE</th>\n      <th>STAT_AREA</th>\n      <th>STAT_AREA_NAME</th>\n      <th>FISHERY_GROUP_CODE</th>\n      <th>GIS_SERIES_NAME</th>\n      <th>GIS_SERIES_CODE</th>\n      <th>REGION_CODE</th>\n      <th>REGISTRATION_AREA_NAME</th>\n      <th>REGISTRATION_AREA_CODE</th>\n      <th>REGISTRATION_AREA_ID</th>\n      <th>REGISTRATION_LOCATION_ABBR</th>\n      <th>MANAGEMENT_AREA_NAME</th>\n      <th>MANAGEMENT_AREA_CODE</th>\n      <th>DISTRICT_NAME</th>\n      <th>DISTRICT_CODE</th>\n      <th>DISTRICT_ID</th>\n      <th>SUBDISTRICT_NAME</th>\n      <th>SUBDISTRICT_CODE</th>\n      <th>SUBDISTRICT_ID</th>\n      <th>SECTION_NAME</th>\n      <th>SECTION_CODE</th>\n      <th>SECTION_ID</th>\n      <th>SUBSECTION_NAME</th>\n      <th>SUBSECTION_CODE</th>\n      <th>SUBSECTION_ID</th>\n      <th>COAR_AREA_CODE</th>\n      <th>CREATOR</th>\n      <th>CREATE_DATE</th>\n      <th>EDITOR</th>\n      <th>EDIT_DATE</th>\n      <th>COMMENTS</th>\n      <th>STAT_AREA_VERSION_ID</th>\n      <th>Shape_Length</th>\n      <th>Shape_Area</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12</td>\n      <td>1975-01-01 00:00:00+00:00</td>\n      <td>NaT</td>\n      <td>33461</td>\n      <td>Tanana River mouth to Kantishna River</td>\n      <td>B</td>\n      <td>Salmon</td>\n      <td>B</td>\n      <td>3</td>\n      <td>Yukon Area</td>\n      <td>Y</td>\n      <td>None</td>\n      <td>None</td>\n      <td>Upper Yukon</td>\n      <td>YU</td>\n      <td>6 District</td>\n      <td>Y-6</td>\n      <td>None</td>\n      <td>6-A Subdistrict</td>\n      <td>6-A</td>\n      <td>None</td>\n      <td></td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>YU</td>\n      <td>Evelyn Russel</td>\n      <td>2006-03-26 00:00:00+00:00</td>\n      <td>Sabrina Larsen</td>\n      <td>2017-02-02 00:00:00+00:00</td>\n      <td>Yukon District, 6 Subdistrict and 6-A Section ...</td>\n      <td>None</td>\n      <td>4.610183</td>\n      <td>0.381977</td>\n      <td>MULTIPOLYGON (((-151.32805 64.96913, -151.3150...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13</td>\n      <td>1975-01-01 00:00:00+00:00</td>\n      <td>NaT</td>\n      <td>33462</td>\n      <td>Kantishna River to Wood River</td>\n      <td>B</td>\n      <td>Salmon</td>\n      <td>B</td>\n      <td>3</td>\n      <td>Yukon Area</td>\n      <td>Y</td>\n      <td>None</td>\n      <td>None</td>\n      <td>Upper Yukon</td>\n      <td>YU</td>\n      <td>6 District</td>\n      <td>Y-6</td>\n      <td>None</td>\n      <td>6-B Subdistrict</td>\n      <td>6-B</td>\n      <td>None</td>\n      <td></td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>YU</td>\n      <td>Evelyn Russel</td>\n      <td>2006-03-26 00:00:00+00:00</td>\n      <td>Sabrina Larsen</td>\n      <td>2017-02-02 00:00:00+00:00</td>\n      <td>Yukon District, 6 Subdistrict and 6-B Section ...</td>\n      <td>None</td>\n      <td>3.682421</td>\n      <td>0.321943</td>\n      <td>MULTIPOLYGON (((-149.96255 64.70518, -149.9666...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18</td>\n      <td>1978-01-01 00:00:00+00:00</td>\n      <td>NaT</td>\n      <td>33431</td>\n      <td>Toklik to Cottonwood Point</td>\n      <td>B</td>\n      <td>Salmon</td>\n      <td>B</td>\n      <td>3</td>\n      <td>Yukon Area</td>\n      <td>Y</td>\n      <td>None</td>\n      <td>None</td>\n      <td>Lower Yukon</td>\n      <td>YL</td>\n      <td>3 District</td>\n      <td>Y-3</td>\n      <td>None</td>\n      <td></td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>YL</td>\n      <td>Evelyn Russel</td>\n      <td>2006-03-26 00:00:00+00:00</td>\n      <td>Sabrina Larsen</td>\n      <td>2017-02-02 00:00:00+00:00</td>\n      <td>Yukon District and 3 Subdistrict until 1/1/1980</td>\n      <td>None</td>\n      <td>2.215641</td>\n      <td>0.198740</td>\n      <td>MULTIPOLYGON (((-161.39853 61.55463, -161.4171...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>19</td>\n      <td>1980-01-01 00:00:00+00:00</td>\n      <td>NaT</td>\n      <td>33442</td>\n      <td>Right Bank, Bishop Rock to Illinois Creek</td>\n      <td>B</td>\n      <td>Salmon</td>\n      <td>B</td>\n      <td>3</td>\n      <td>Yukon Area</td>\n      <td>Y</td>\n      <td>None</td>\n      <td>None</td>\n      <td>Upper Yukon</td>\n      <td>YU</td>\n      <td>4 District</td>\n      <td>Y-4</td>\n      <td>None</td>\n      <td>4-B Subdistrict</td>\n      <td>4-B</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>YU</td>\n      <td>Evelyn Russel</td>\n      <td>2006-03-26 00:00:00+00:00</td>\n      <td>Sabrina Larsen</td>\n      <td>2017-02-02 00:00:00+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>9.179852</td>\n      <td>0.382788</td>\n      <td>MULTIPOLYGON (((-153.15234 65.24944, -153.0761...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>20</td>\n      <td>1980-01-01 00:00:00+00:00</td>\n      <td>NaT</td>\n      <td>33443</td>\n      <td>Left Bank, Cone Point to Illinois Creek</td>\n      <td>B</td>\n      <td>Salmon</td>\n      <td>B</td>\n      <td>3</td>\n      <td>Yukon Area</td>\n      <td>Y</td>\n      <td>None</td>\n      <td>None</td>\n      <td>Upper Yukon</td>\n      <td>YU</td>\n      <td>4 District</td>\n      <td>Y-4</td>\n      <td>None</td>\n      <td>4-B Subdistrict</td>\n      <td>4-B</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>YU</td>\n      <td>Evelyn Russel</td>\n      <td>2006-03-26 00:00:00+00:00</td>\n      <td>Sabrina Larsen</td>\n      <td>2017-02-02 00:00:00+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>9.500826</td>\n      <td>0.378262</td>\n      <td>MULTIPOLYGON (((-152.99905 65.17027, -152.9897...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# open Alaska boundary\nak = gpd.read_file(os.path.join(os.getcwd(), 'data', 'alaska_perimeter','alaska_perimeter.shp'))\nak\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>REGION</th>\n      <th>DIVISION</th>\n      <th>STATEFP</th>\n      <th>STATENS</th>\n      <th>GEOID</th>\n      <th>STUSPS</th>\n      <th>NAME</th>\n      <th>LSAD</th>\n      <th>MTFCC</th>\n      <th>FUNCSTAT</th>\n      <th>ALAND</th>\n      <th>AWATER</th>\n      <th>INTPTLAT</th>\n      <th>INTPTLON</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4</td>\n      <td>9</td>\n      <td>02</td>\n      <td>01785533</td>\n      <td>02</td>\n      <td>AK</td>\n      <td>Alaska</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>1478943541175</td>\n      <td>245377731557</td>\n      <td>+63.3473560</td>\n      <td>-152.8397334</td>\n      <td>MULTIPOLYGON (((-1728945.561 474182.534, -1728...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Fishing areas preparation \nWe need to do some processing of each dataset before combining them for analysis. \nLet's start with the fishing areas.\n\n### Update column names and CRS\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# make column names small caps\nfishing_areas.columns = fishing_areas.columns.str.lower()\nprint(fishing_areas.columns, \"\\n\")\n\n# -----------------------\n# check CRS\nprint(f\"raw_dist: {raw_dist.rio.crs} \\nak: {ak.crs} \\nfishing_areas: {fishing_areas.crs}\\n\")\n#print(raw_dist.rio.crs == ak.crs)\n\n# transform fishing_areas CRS to epsg:3338 (AK CRS)\nfishing_areas = fishing_areas.to_crs(ak.crs)\nprint('CRS match:', raw_dist.rio.crs == fishing_areas.crs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['objectid', 'geometry_start_date', 'geometry_end_date', 'stat_area',\n       'stat_area_name', 'fishery_group_code', 'gis_series_name',\n       'gis_series_code', 'region_code', 'registration_area_name',\n       'registration_area_code', 'registration_area_id',\n       'registration_location_abbr', 'management_area_name',\n       'management_area_code', 'district_name', 'district_code', 'district_id',\n       'subdistrict_name', 'subdistrict_code', 'subdistrict_id',\n       'section_name', 'section_code', 'section_id', 'subsection_name',\n       'subsection_code', 'subsection_id', 'coar_area_code', 'creator',\n       'create_date', 'editor', 'edit_date', 'comments',\n       'stat_area_version_id', 'shape_length', 'shape_area', 'geometry'],\n      dtype='object') \n\nraw_dist: EPSG:3338 \nak: EPSG:3338 \nfishing_areas: EPSG:4326\n\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nCRS match: True\n```\n:::\n:::\n\n\n### Data selection\n\nThis data includes fine scale subdivisions of the fishing areas. \nWe'll be working with data from the Kodiak registration area only, so let's select that.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Registration areas:\nprint(fishing_areas.registration_area_name.unique())\n\n# select Kodiak area\nkodiak = fishing_areas[fishing_areas.registration_area_name == 'Kodiak Area' ]\nprint('# geometries in Kodiak area:', len(kodiak) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Yukon Area' 'Kuskokwim Area' 'Prince William Sound Area'\n 'Bristol Bay Area' 'Chignik Area' 'Kodiak Area' 'Alaska Peninsula Area'\n 'Cook Inlet Area' 'Norton Sound-Port Clarence Area'\n 'Arctic-Kotzebue Area' 'Aleutian Islands Area' 'Atka-Amlia Islands Area'\n 'Southeastern Alaska Area']\n# geometries in Kodiak area: 118\n```\n:::\n:::\n\n\n### Plot of Kodiak fisihing area\n\nOne way to add a custom legend is to create an `Patch` object for each geometry in our plot. \n\nWe can create a `Patch` with a custom color and legend via the `mpatches.Patch()` function:\n```python\ngreat_patch =  mpatches.Patch( color = 'great_color',\n                               label = 'great_label')\n```\n\nTo add this patch to the legend we should first create an axis, for example by calling `fig, ax = plt.subplots()` at the beginning of our plot. \nThen we add `great_patch` to the legend:\n\n```python\nax.legend(handles = [great_patch])\n```\n\n**Example:**\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# create AK plot with color patches in legend\n\nfig, ax = plt.subplots()\n# --------------------------------------------\nak.plot(ax=ax, color = 'pink')\nak_patch = mpatches.Patch(color='pink',\n                          label='Alaska, US')\n\n# --------------------------------------------\n#kodiak.dissolve().plot(ax=ax, color = 'blue')\nkodiak.plot(ax=ax, color = 'blue')\nkodiak_patch = mpatches.Patch(color='blue',\n                              label='Kodiak fishing area')\n\n# ------------------------------------------\n# create elegend\nax.legend(handles = [ak_patch, kodiak_patch], frameon=False, loc='upper right')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-20-zonal-stats_files/figure-html/cell-8-output-1.png){width=579 height=353}\n:::\n:::\n\n\n### Dissolve & explode polygons\n\nThe Kodiak data is too granular for our purposes: we want to get statistics on distance travelled on each fishing district.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# check number of districts and rows\nprint(f\"number of geometries: {len(kodiak)}\")\nprint(f\"number of districts: {len(kodiak.district_name.unique())}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnumber of geometries: 118\nnumber of districts: 7\n```\n:::\n:::\n\n\nWe can aggregate the geometries based on the values of a column using the `dissolve()` method. \nIn our case we will dissolve by district name:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# dissolve by district\n# as_index=False indicates we want to keep the \"groupby\" column as a column (not index)\ndistricts = kodiak[['geometry','district_name']].dissolve(by='district_name', as_index=False)\ndistricts \n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>district_name</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Afognak District</td>\n      <td>POLYGON ((83189.145 888000.815, 75313.997 8878...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Alitak Bay District</td>\n      <td>POLYGON ((-20595.210 769560.395, -20547.170 76...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Eastside Kodiak District</td>\n      <td>MULTIPOLYGON (((-100710.109 633391.483, -10080...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Mainland District</td>\n      <td>MULTIPOLYGON (((-139689.424 797362.176, -14034...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Northeast Kodiak District</td>\n      <td>POLYGON ((100175.379 849237.562, 100103.728 84...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Northwest Kodiak District</td>\n      <td>POLYGON ((9534.303 838682.678, 9542.565 838668...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Southwest Kodiak District</td>\n      <td>POLYGON ((-31133.469 786483.521, -31127.360 78...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's take a look at the districts:\n\n:::{.callout-note}\n# Legend location\n\nWe can control the legend location adding `loc` and `bbox_to_anchor` to the `legend_kwds`. \n\nIt can be useful to combine both of these to place the legend outside the graph:\n\n- `loc` indicates the corner of the legend box we want to locate, and\n- `bbox_to_anchor` is a tuple with coordinates indicating where to place the corner specified in `loc`. Values between 0 and 1 are within the axes (the plot). \n:::\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndistricts.plot(column='district_name', \n               legend=True, \n               legend_kwds={'loc': \"upper left\", 'bbox_to_anchor': (1, 1)})\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/galaz-garcia/anaconda3/envs/mpc-env/lib/python3.11/site-packages/geopandas/plotting.py:732: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n  if pd.api.types.is_categorical_dtype(values.dtype):\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-20-zonal-stats_files/figure-html/cell-11-output-3.png){width=588 height=425}\n:::\n:::\n\n\nNotice the geometries of some our districts are multipolygons. \nTo simplify our analysis for the purpose of this lesson we will separate each multipolygon into individual polygons. \nWe can do this using the `explode()` method for `gpd.GeoDataFrames`:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# explode polygons\n# ignore_index=True resests the index so we don't get a multi-index\ndistricts = districts.explode(ignore_index=True)\ndistricts\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>district_name</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Afognak District</td>\n      <td>POLYGON ((83189.145 888000.815, 75313.997 8878...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Alitak Bay District</td>\n      <td>POLYGON ((-20595.210 769560.395, -20547.170 76...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Eastside Kodiak District</td>\n      <td>POLYGON ((-100710.109 633391.483, -100806.993 ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Eastside Kodiak District</td>\n      <td>POLYGON ((-14519.794 714624.553, -14616.441 71...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Mainland District</td>\n      <td>POLYGON ((-139689.424 797362.176, -140346.100 ...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Mainland District</td>\n      <td>POLYGON ((-13390.443 922237.350, -13416.238 92...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Northeast Kodiak District</td>\n      <td>POLYGON ((100175.379 849237.562, 100103.728 84...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Northwest Kodiak District</td>\n      <td>POLYGON ((9534.303 838682.678, 9542.565 838668...</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Southwest Kodiak District</td>\n      <td>POLYGON ((-31133.469 786483.521, -31127.360 78...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Distance raster preparation\n\nNow let's move on to our raster. \n\n### Squeeze\nFirst, we have an extra unnecessary dimension. Let's get rid of it:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# get rid of band dimension\nprint(f\"Before squeeze:\\ndimensions {raw_dist.dims} \\ncoords: {raw_dist.coords} \\n\")\n\nraw_dist = raw_dist.squeeze().drop('band')\nprint(f\"After squeeze:\\ndimensions {raw_dist.dims}\\ncoords: {raw_dist.coords}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBefore squeeze:\ndimensions ('band', 'y', 'x') \ncoords: Coordinates:\n  * band         (band) int64 1\n  * x            (x) float64 -2.55e+06 -2.549e+06 ... 5.347e+05 5.357e+05\n  * y            (y) float64 2.711e+06 2.71e+06 ... 4.053e+05 4.043e+05\n    spatial_ref  int64 0 \n\nAfter squeeze:\ndimensions ('y', 'x')\ncoords: Coordinates:\n  * x            (x) float64 -2.55e+06 -2.549e+06 ... 5.347e+05 5.357e+05\n  * y            (y) float64 2.711e+06 2.71e+06 ... 4.053e+05 4.043e+05\n    spatial_ref  int64 0\n```\n:::\n:::\n\n\n### Updating no-data value\nTake a look at the data:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nraw_dist.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n<matplotlib.collections.QuadMesh at 0x148d15350>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-20-zonal-stats_files/figure-html/cell-14-output-2.png){width=558 height=449}\n:::\n:::\n\n\nThe previous plot should make us think there are outliers or no-data values affecting the plot range. \nLet's investigate this:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# check min and max\nprint(f\"min: {raw_dist.min().item():,}, max: {raw_dist.max().item():,}\")\n\n# get no-data value\nnodata = raw_dist.rio.nodata\nprint('no-data value', nodata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmin: -3.3999999521443642e+38, max: 2,564,975.75\nno-data value -3.4e+38\n```\n:::\n:::\n\n\nWe can select all pixels where there is raster data using the [`where()` method](https://docs.xarray.dev/en/stable/generated/xarray.DataArray.where.html).\nBy default, `where()` will place `np.nan` (NAs) at every cell that does not satisty the condition. \n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# select pixels with data using where()\nraw_dist.where(raw_dist != nodata)\n\n# transform no data values into nan (float)\ndist = raw_dist.where(raw_dist != nodata)\n\n# check updates\nprint(f\" min: {dist.min().item()}, max: {dist.max().item():,}\")\ndist.plot()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n min: 0.0, max: 2,564,975.75\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n<matplotlib.collections.QuadMesh at 0x148ee3050>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-20-zonal-stats_files/figure-html/cell-16-output-3.png){width=560 height=449}\n:::\n:::\n\n\n### Clipping\n\nSince we are only focusing on the Kodiak district, let's clip the raster to this region:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# clip raster to Kodiak bounding box\nkodiak_dist = dist.rio.clip_box(*districts.total_bounds)\n\n# robust = True plots data within the 2th and 98th percentiles.\nkodiak_dist.plot(robust=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n<matplotlib.collections.QuadMesh at 0x14935b610>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-20-zonal-stats_files/figure-html/cell-17-output-2.png){width=626 height=464}\n:::\n:::\n\n\nRemember our goal is to calculate the total distance travelled in each district. \nWe can take a look at the districts over the distance raster:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# raster + districts plot\nfig, ax = plt.subplots()\nkodiak_dist.plot(ax=ax, robust=True)\ndistricts.plot(ax=ax, edgecolor='red', color='none')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-20-zonal-stats_files/figure-html/cell-18-output-1.png){width=513 height=464}\n:::\n:::\n\n\n## Distance in a single district\n\nA mask is a dataset that indicates which locations in the raster we will keep and which will be converted to NAs or, in our case, zeros. \nIt is common to transform a polygon into a raster mask that selects all pixels that touch the polygon.\n\n![](/images/mask/mask.png)\n\nTo transform a geometry into a mask we can use the \n`rasterize()` function from [`rasterio.features`](https://rasterio.readthedocs.io/en/stable/api/rasterio.features.html):\n\n`rasterio` is another popular Python library to work with rasters. \nAlthough many of its functions have been streamlined in `rioxarray`, there are still some that have not been replaced.\n\nIn the next cell we use the polygon for the Alitak district `districts.loc[1,'geometry']` to create a mask for the raster. \n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# create raster mask based on Alitak polygon\nalitak_mask = rasterize(shapes = [districts.loc[1,'geometry']],  # a list of geometries\n                        out_shape = kodiak_dist.shape,           # shape of outout np array (shape of raster)\n                        transform = kodiak_dist.rio.transform(), # transformation of raster\n                        all_touched = True)  # all pixels touched by geometries will be burned in \nprint(type(alitak_mask))\n\n# print some info about mask\nprint('mask shape: ', alitak_mask.shape)\nprint('same shape as raster? ', alitak_mask.shape == kodiak_dist.shape)\nprint('unique values in mask', np.unique(alitak_mask))\nplt.imshow(alitak_mask)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'numpy.ndarray'>\nmask shape:  (352, 289)\nsame shape as raster?  True\nunique values in mask [0 1]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n<matplotlib.image.AxesImage at 0x148f7aed0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-20-zonal-stats_files/figure-html/cell-19-output-3.png){width=357 height=416}\n:::\n:::\n\n\nTo select pixels from the raster using the mask we can simply multiply both rasters together. \n\n![](/images/mask/mask_raster.png)\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# apply mask to kodiak distances raster\ndist_alitak = kodiak_dist * alitak_mask\ndist_alitak.plot(robust=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n<matplotlib.collections.QuadMesh at 0x149244690>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-20-zonal-stats_files/figure-html/cell-20-output-2.png){width=617 height=464}\n:::\n:::\n\n\nFinally, we can add up all the pixel values to obtain the total distance travelled by shipping vessels in Alitak:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nprint(f\"total distance in Alitak: {dist_alitak.sum().item():,}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal distance in Alitak: 5,606,546.5\n```\n:::\n:::\n\n\nDoing the previous process in a single cell:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# mask raster and calculate sum of pixels\nalitak_mask = rasterize([districts.loc[1,'geometry']],\n                                    out_shape = kodiak_dist.shape,\n                                    transform = kodiak_dist.rio.transform(),\n                                    all_touched = True)\ndist_in_alitak = (kodiak_dist * alitak_mask).sum().item()\ndist_in_alitak\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n5606546.5\n```\n:::\n:::\n\n\n## Distance in all districts\n\nOnce we have achieved a good workflow for a single district, it is easy to repeat it using a `for` loop:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# calculate distance per district polygon\ndistances = []\nfor i in districts.index:\n    mask = rasterize([districts.loc[i,'geometry']],\n                              out_shape=kodiak_dist.shape,\n                              transform=kodiak_dist.rio.transform(),\n                              all_touched=True)\n    dist_in_district = (kodiak_dist * mask).sum().item()\n    distances.append(dist_in_district)\ndistances\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n[9804045.0,\n 5606546.5,\n 102465.03125,\n 22725528.0,\n 4788347.0,\n 673996.375,\n 20008534.0,\n 86952560.0,\n 6666639.0]\n```\n:::\n:::\n\n\nThen we can add the distances as a column in our `GeoDataFrame`:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# add column with distance per district polygon\ndistricts['total_distance'] = distances\ndistricts\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>district_name</th>\n      <th>geometry</th>\n      <th>total_distance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Afognak District</td>\n      <td>POLYGON ((83189.145 888000.815, 75313.997 8878...</td>\n      <td>9.804045e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Alitak Bay District</td>\n      <td>POLYGON ((-20595.210 769560.395, -20547.170 76...</td>\n      <td>5.606546e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Eastside Kodiak District</td>\n      <td>POLYGON ((-100710.109 633391.483, -100806.993 ...</td>\n      <td>1.024650e+05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Eastside Kodiak District</td>\n      <td>POLYGON ((-14519.794 714624.553, -14616.441 71...</td>\n      <td>2.272553e+07</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Mainland District</td>\n      <td>POLYGON ((-139689.424 797362.176, -140346.100 ...</td>\n      <td>4.788347e+06</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Mainland District</td>\n      <td>POLYGON ((-13390.443 922237.350, -13416.238 92...</td>\n      <td>6.739964e+05</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Northeast Kodiak District</td>\n      <td>POLYGON ((100175.379 849237.562, 100103.728 84...</td>\n      <td>2.000853e+07</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Northwest Kodiak District</td>\n      <td>POLYGON ((9534.303 838682.678, 9542.565 838668...</td>\n      <td>8.695256e+07</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Southwest Kodiak District</td>\n      <td>POLYGON ((-31133.469 786483.521, -31127.360 78...</td>\n      <td>6.666639e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Acknowledgments\nThis lesson was adapted from the [Spatial and Image Data Using GeoPandas](https://learning.nceas.ucsb.edu/2022-09-arctic/sections/10-geopandas.html) lesson from the NCEAS Scalable and Computationally Reproducible Approaches to Arctic Research workshop.\n\n",
    "supporting": [
      "lesson-20-zonal-stats_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}