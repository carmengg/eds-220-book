{
  "hash": "773c70aa8c937ea4f39af838ff18c06d",
  "result": {
    "markdown": "<!-- \nFixing the preview working directory\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#import os\n#home = os.path.expanduser(\"~\")\n#os.chdir(os.path.join(home,'Documents','EDS_220','eds-220-book'))\n```\n:::\n\n\nIgnore ShapelyDeprecationWarning warning in render\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport shapely\nimport warnings\nfrom shapely.errors import ShapelyDeprecationWarning\n\nwarnings.filterwarnings(\"ignore\", category=ShapelyDeprecationWarning) \n```\n:::\n\n\n-->\n\n# Reprojecting & Clipping\n\nIn this lesson we will learn how to change the CRS of a `geopandas.GeoDataFrame` and how to clip different geometries using a polygon in a `geopandas.GeoDataFrame`. \nThrough doing these operations we will create the following map of roads and populated places in Alaska:\n\n![](/images/alaska_roads_and_places.png)\n\n## Data\nWe will use three datasets in this lesson. \n\n**First dataset**\nThe first dataset is a [TIGER shapefile from the United States Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341). \n\nWe will use the shapefiles for the US states. \nFollow these steps to download shapefile with the United States' states:\n\n1. At the bottom of the [2022 page](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341), under Download, click on \"Web Interface\"\n2. For year, select 2022, and for layer type select \"States (and equivalent)\". Click submit. \n3. Click on \"Download national file\".\n\nYou can check the [metadata for all the TIGER shapefiles here](https://www.census.gov/programs-surveys/geography/technical-documentation/complete-technical-documentation/tiger-geo-line.html). \nThe columns for this shapefile are:\n\n![Source: TIGER/Line Shapefiles Technical Documentation](/images/tiger_shp_columns.png)\n\n**Second dataset**\nThe second dataset we'll use is [Natural Earth's simple medium scale populated places dataset](https://www.naturalearthdata.com/downloads/50m-cultural-vectors/). We can obtain this dataset by downloading the shapefile (choose the one that says \"simple (less columns)\").\n\n**Third dataset**\nThe third dataset we'll use is [Natural Earth's road dataset](https://www.naturalearthdata.com/downloads/10m-cultural-vectors/roads/). \nWe can obtain this dataset by downloading the shapefile \n\n**Move all datasets to a directory named \"data\" inside your working directory.**\n\n## Import data\n\nLet's start by loading our libraries and then importing the datasets we'll use.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport os\nimport geopandas as gpd\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# this is our first time using this function\nfrom shapely.geometry import box\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# display all columns when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n\n# ----- IMPORT DATA -----\n# states from US Census TIGER files\nstates = gpd.read_file(os.path.join('data','tl_2022_us_state','tl_2022_us_state.shp'))\n# make column names small caps\nstates.columns = states.columns.str.lower()\n\n# populated places from Natural Earth\nplaces = gpd.read_file(os.path.join('data','ne_50m_populated_places_simple','ne_50m_populated_places_simple.shp'))\n\n# roads from Natural Earth\nroads = gpd.read_file(os.path.join('data','ne_10m_roads','ne_10m_roads.shp'))\n```\n:::\n\n\n## Prepare Alaska polygon\n\n### Exploration\n\nLet's start by taking taking a look at our stats geo-dataframe. \nSince this is a geospatial dataset, exploration should include *at least* checking the head of the dataset, plotting the data, and looking at its CRS.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# print the CRS\nprint(states.crs)\n\n# look at first five columns\nstates.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEPSG:4269\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>region</th>\n      <th>division</th>\n      <th>statefp</th>\n      <th>statens</th>\n      <th>geoid</th>\n      <th>stusps</th>\n      <th>name</th>\n      <th>lsad</th>\n      <th>mtfcc</th>\n      <th>funcstat</th>\n      <th>aland</th>\n      <th>awater</th>\n      <th>intptlat</th>\n      <th>intptlon</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>5</td>\n      <td>54</td>\n      <td>01779805</td>\n      <td>54</td>\n      <td>WV</td>\n      <td>West Virginia</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>62266456923</td>\n      <td>489045863</td>\n      <td>+38.6472854</td>\n      <td>-080.6183274</td>\n      <td>POLYGON ((-77.75438 39.33346, -77.75422 39.333...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>5</td>\n      <td>12</td>\n      <td>00294478</td>\n      <td>12</td>\n      <td>FL</td>\n      <td>Florida</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>138962819934</td>\n      <td>45971472526</td>\n      <td>+28.3989775</td>\n      <td>-082.5143005</td>\n      <td>MULTIPOLYGON (((-83.10874 24.62949, -83.10711 ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>3</td>\n      <td>17</td>\n      <td>01779784</td>\n      <td>17</td>\n      <td>IL</td>\n      <td>Illinois</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>143778515726</td>\n      <td>6216539665</td>\n      <td>+40.1028754</td>\n      <td>-089.1526108</td>\n      <td>POLYGON ((-87.89243 38.28285, -87.89334 38.282...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nstates.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-7-output-2.png){width=566 height=183}\n:::\n:::\n\n\n### Selection\n\nFor this lesson, we are intersted in plotting data in Alaska. \nLet's start by selecting this data:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# select Alaska from states\nalaska = states[states.name =='Alaska']\nalaska.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-8-output-2.png){width=566 height=103}\n:::\n:::\n\n\n### Reprojecting\n\nAs in our previous lesson, we bump into the issue of Alaska's islands elongating the map. \nTo fix this, we will reproject the Alaska geo-dataframe. \n**Reprojecting** means precisely this, changing the coordinate reference system of your geospatial data. \nIn our case we will reproject the Alaska geo-dataframe to the CRS EPSG:3338. \nThis CRS is a *projected* CRS, better suited for working with data from Alaska:\n\n![Source: [spatialreference.org](https://spatialreference.org/ref/epsg/nad83-alaska-albers/) ](/images/epsg_3338.png)\n\nChanging CRSs in GeoPandas is very simple using the `to_crs()` method for `gpd.GeoDataFrame`s. \nThe general syntax is:\n```python\nupdated_geodf = geodf.to_crs(new_crs)\n```\nwhere:\n\n- `updated_geodf` is the output of the method, a new geodataframe (`to_crs()` does not work in place), \n- `geodf` is the `gpd.GeoDataFrame` we want to transform, \n- `new_crs` an object of type CRS or string representing the CRS (ex: `'epsg:3338'`), the CRS we want to convert to. \n\nIn our case:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# change to projected CRS optimized for Alaska\nalaska = alaska.to_crs('epsg:3338')\nalaska.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-9-output-2.png){width=579 height=353}\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# check new CRS\nprint('is this CRS projected? ', alaska.crs.is_projected)\nalaska.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nis this CRS projected?  True\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n<Projected CRS: EPSG:3338>\nName: NAD83 / Alaska Albers\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: United States (USA) - Alaska.\n- bounds: (172.42, 51.3, -129.99, 71.4)\nCoordinate Operation:\n- name: Alaska Albers (meters)\n- method: Albers Equal Area\nDatum: North American Datum 1983\n- Ellipsoid: GRS 1980\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n\n## Prepare populated places\n\n### Exploration \n\nLet's now explore the populated places data. \n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# print the CRS\nprint(places.crs)\n\n# look at first five columns\nplaces.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEPSG:4326\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>scalerank</th>\n      <th>natscale</th>\n      <th>labelrank</th>\n      <th>featurecla</th>\n      <th>name</th>\n      <th>namepar</th>\n      <th>namealt</th>\n      <th>nameascii</th>\n      <th>adm0cap</th>\n      <th>capalt</th>\n      <th>capin</th>\n      <th>worldcity</th>\n      <th>megacity</th>\n      <th>sov0name</th>\n      <th>sov_a3</th>\n      <th>adm0name</th>\n      <th>adm0_a3</th>\n      <th>adm1name</th>\n      <th>iso_a2</th>\n      <th>note</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>pop_max</th>\n      <th>pop_min</th>\n      <th>pop_other</th>\n      <th>rank_max</th>\n      <th>rank_min</th>\n      <th>meganame</th>\n      <th>ls_name</th>\n      <th>min_zoom</th>\n      <th>ne_id</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10</td>\n      <td>1</td>\n      <td>5</td>\n      <td>Admin-1 region capital</td>\n      <td>Bombo</td>\n      <td>None</td>\n      <td>None</td>\n      <td>Bombo</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Uganda</td>\n      <td>UGA</td>\n      <td>Uganda</td>\n      <td>UGA</td>\n      <td>Bamunanika</td>\n      <td>UG</td>\n      <td>None</td>\n      <td>0.583299</td>\n      <td>32.533300</td>\n      <td>75000</td>\n      <td>21000</td>\n      <td>0.0</td>\n      <td>8</td>\n      <td>7</td>\n      <td>None</td>\n      <td>None</td>\n      <td>7.0</td>\n      <td>1159113923</td>\n      <td>POINT (32.53330 0.58330)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10</td>\n      <td>1</td>\n      <td>5</td>\n      <td>Admin-1 region capital</td>\n      <td>Fort Portal</td>\n      <td>None</td>\n      <td>None</td>\n      <td>Fort Portal</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Uganda</td>\n      <td>UGA</td>\n      <td>Uganda</td>\n      <td>UGA</td>\n      <td>Kabarole</td>\n      <td>UG</td>\n      <td>None</td>\n      <td>0.671004</td>\n      <td>30.275002</td>\n      <td>42670</td>\n      <td>42670</td>\n      <td>0.0</td>\n      <td>7</td>\n      <td>7</td>\n      <td>None</td>\n      <td>None</td>\n      <td>7.0</td>\n      <td>1159113959</td>\n      <td>POINT (30.27500 0.67100)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Admin-1 region capital</td>\n      <td>Potenza</td>\n      <td>None</td>\n      <td>None</td>\n      <td>Potenza</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Italy</td>\n      <td>ITA</td>\n      <td>Italy</td>\n      <td>ITA</td>\n      <td>Basilicata</td>\n      <td>IT</td>\n      <td>None</td>\n      <td>40.642002</td>\n      <td>15.798997</td>\n      <td>69060</td>\n      <td>69060</td>\n      <td>0.0</td>\n      <td>8</td>\n      <td>8</td>\n      <td>None</td>\n      <td>None</td>\n      <td>7.0</td>\n      <td>1159117259</td>\n      <td>POINT (15.79900 40.64200)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nplaces.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-12-output-2.png){width=578 height=290}\n:::\n:::\n\n\nThis dataset has CRS EPSG:4326, this is the EPSG code for the WGS84 CRS. \nThis is not surprise since this is a global dataset, and EPSG:4326/WGS84 is the most used CRS for such data.\n\nLet's see what happens when we try to plot this data on top of Alaska:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Trouble\nfig, ax = plt.subplots()\n\nalaska.plot(ax=ax)\nplaces.plot(ax=ax, color='red')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-13-output-1.png){width=571 height=413}\n:::\n:::\n\n\n::: {.callout-important}\n## Data in weird places? Check your CRSs\nThis is a classic mistake in  analysis. \nTo plot, analyze, or integrate different geospatial datasets they must **have the same CRS**. \n\nHere, `alaska` and `places` have different CRSs, leading to unexpected results when plotting them together:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprint(alaska.crs)\nprint(places.crs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nepsg:3338\nEPSG:4326\n```\n:::\n:::\n\n\n:::\n\n### Reprojecting\n\nReprojecting the `places` geo-datafarme into `alaska`'s CRS is simple using `to_crs()`:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# update crs\nplaces = places.to_crs(alaska.crs)\nprint(alaska.crs == places.crs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\nLet's check that map again:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\n\nalaska.plot(ax=ax)\nplaces.plot(ax=ax, color='red', markersize=2 )\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-16-output-1.png){width=490 height=442}\n:::\n:::\n\n\nThis is better: we can see there is the Alaska poygons and some points on top of it. \nOur next step is to select these points. \n\n### Clipping\n\n**Clipping** means using a polygon (or polygons) to only select geospatial data within them. \nClipping a `gpd.GeoDataFrame` is easy using the geopandas [`clip()` function](https://geopandas.org/en/stable/docs/reference/api/geopandas.clip.html). \nThe general syntax is:\n```python\nupdated_geodf = gpd.clip(geodf, mask)\n```\nwhere:\n\n- `updated_geodf` is the output of the method: the intersection of the geometries in `geodf` with `mask`,\n- `geodf` is the `gpd.GeoDataFrame` we want to clip, \n- `mask` is a `gpd.GeoDataFrame` with the polygon(s) we want to use for clipping. This `mask` must be in the same CRS as `geodf`!\n\nIn our case:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# clip places to Alaska\nak_places = gpd.clip(places, alaska)\nprint('Number of places in AK:', len(ak_places))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of places in AK: 12\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# plot populated places in Alaska\nfig, ax = plt.subplots()\n\nalaska.plot(ax=ax)\nak_places.plot(ax=ax, color='red')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-18-output-1.png){width=579 height=353}\n:::\n:::\n\n\n## Prepare roads \n\n### Exploration\nNow we move on to our roads dataset. \n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# print the CRS\nprint(roads.crs)\n\n# look at first five columns\nroads.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEPSG:4326\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>scalerank</th>\n      <th>featurecla</th>\n      <th>type</th>\n      <th>sov_a3</th>\n      <th>note</th>\n      <th>edited</th>\n      <th>name</th>\n      <th>namealt</th>\n      <th>namealtt</th>\n      <th>routeraw</th>\n      <th>question</th>\n      <th>length_km</th>\n      <th>toll</th>\n      <th>ne_part</th>\n      <th>label</th>\n      <th>label2</th>\n      <th>local</th>\n      <th>localtype</th>\n      <th>localalt</th>\n      <th>labelrank</th>\n      <th>ignore</th>\n      <th>add</th>\n      <th>rwdb_rd_id</th>\n      <th>orig_fid</th>\n      <th>prefix</th>\n      <th>uident</th>\n      <th>continent</th>\n      <th>expressway</th>\n      <th>level</th>\n      <th>min_zoom</th>\n      <th>min_label</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8</td>\n      <td>Road</td>\n      <td>Secondary Highway</td>\n      <td>CAN</td>\n      <td>None</td>\n      <td>Version 1.5: Changed alignment, a few adds in ...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>ne_1d4_original</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>314705</td>\n      <td>North America</td>\n      <td>0</td>\n      <td>None</td>\n      <td>7.1</td>\n      <td>9.6</td>\n      <td>LINESTRING (-133.32533 62.21571, -133.31664 62...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7</td>\n      <td>Road</td>\n      <td>Secondary Highway</td>\n      <td>USA</td>\n      <td>None</td>\n      <td>Version 1.5: Changed alignment, a few adds in ...</td>\n      <td>83</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>164</td>\n      <td>0</td>\n      <td>ne_1d4_original</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>108105</td>\n      <td>North America</td>\n      <td>0</td>\n      <td>Federal</td>\n      <td>7.0</td>\n      <td>8.6</td>\n      <td>LINESTRING (-100.50543 42.80753, -100.53495 42...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7</td>\n      <td>Road</td>\n      <td>Secondary Highway</td>\n      <td>USA</td>\n      <td>None</td>\n      <td>Version 1.5: Changed alignment, a few adds in ...</td>\n      <td>840</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>98</td>\n      <td>0</td>\n      <td>ne_1d4_original</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>0</td>\n      <td>North America</td>\n      <td>0</td>\n      <td>U/C</td>\n      <td>7.0</td>\n      <td>9.5</td>\n      <td>LINESTRING (-87.27432 36.02439, -87.22916 35.9...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nroads.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-20-output-2.png){width=578 height=234}\n:::\n:::\n\n\n### One-liner clipping\n\nYou may have already noticed that `roads` is not in the same CRS as `alaska`, so these geo-datasets shound't interact until they're in the same CRS. \nBefore jumping right into reprojecting and clipping, we will subset the data to select only US roads:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# select US roads only\nusa_roads = roads[roads.sov_a3 == 'USA']\nusa_roads.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-21-output-2.png){width=557 height=411}\n:::\n:::\n\n\n::: {.callout-caution}\n## Reduce your tabular data before reducing via geometries\nGeospatial operations are usually costly. \nThe more detailed our geometries the longer in takes to do geospatial computations. \nIt's a good practice to try to reduce your data as much as possible before applying any geospatial transformation. \n:::\n\n<!--\nYOU CAN JUMP FROM HERE TO CLIPPING WITH BOUNDING BOX\n-->\n\nWe will now do a \"one-liner\" to clip `usa_roads` using the `alaska` polygon. Notice we are using the ouput of `usa_roads.to_crs(alaska.crs)` and thus not changing the `usa_roads` geo-dataframe or creating new variables:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# clip usa_roads to alaska geometry\nak_roads = gpd.clip(usa_roads.to_crs(alaska.crs),alaska)\n\nak_roads.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-22-output-2.png){width=538 height=442}\n:::\n:::\n\n\nNotice how the lines break on the small islands? \nHowever in the `usa_roads` there are no broken lines. \nThis should make us suspect we are leaving data out and clipping *exactly* to the polygons in `alaska` is not quite what we want. \n\n### Clipping with bounding box\nWe will clip the `usa_roads` geo-dataframe with the bounding box of `alaska` instead of its polygons. \nTo create a bounding box, we first use the [`box()` function we imported from `shapely.geometry`](https://shapely.readthedocs.io/en/stable/manual.html#shapely.geometry.box). \nThe syntax for `box()` is:\n```python\nbox(minx, miny, maxx, maxy)\n```\nthe output is a X representing a box constructed like this:\n\n<!-- INSERT BOX DIAGRAM -->\n\nIf we want to create a shapely polygon from the bounds of a geo-dataframe `gdf`, a more straightforward syntax is:\n```python \nbox(*gdf.total_bounds)\n```\n\n<!-- ADD MORE DETAILS ABOUT THIS -->\nIn our case:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nbbox = box(*alaska.total_bounds)\nprint(type(bbox))\nbbox\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'shapely.geometry.polygon.Polygon'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=22}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-23-output-2.svg){}\n:::\n:::\n\n\n::: {.callout-tip}\n## `*` as unpacking operator\nIn the last syntax we are using the asterisk `*` as an unpacking operator on the array `gdf.total_bounds`. \nThink about it as unpacking the elements of `gdf.total_bounds` and assigning them one-by-one to the paremeters `minx, miny, maxx, maxy` of `box()`.\n\nThis is a good article explaining more about unpacking with `*` in Python:\nhttps://geekflare.com/python-unpacking-operators/\n:::\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# create geo-dataframe from bounding box\nak_bbox = gpd.GeoDataFrame(geometry = [bbox], # assign geometry column\n                           crs = alaska.crs) # assign CRS\nprint(type(ak_bbox))\nak_bbox\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'geopandas.geodataframe.GeoDataFrame'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>POLYGON ((1493082.309 404545.108, 1493082.309 ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can now clip the roads using Alaska's bounding box:\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nak_complete_roads = gpd.clip(usa_roads.to_crs(ak_bbox.crs), ak_bbox)\nak_complete_roads.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-25-output-2.png){width=538 height=442}\n:::\n:::\n\n\nNotice the difference between the two clipping methods:\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# two rows, one column\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10,10))\n\nak_roads.plot(ax=ax1)\nax1.set_title('Roads clipped with AK multipolygon')\n\nak_complete_roads.plot(ax=ax2)\nax2.set_title('Roads clipped with AK bounding box')\n\n#plt.axis('equal')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-26-output-1.png){width=495 height=818}\n:::\n:::\n\n\n<!-- \nVariable: Symbolic name that stores an object and has a reserved memory location.\n-->\n\n## Plot\n\nFinally, we can put all our data together in the same map:\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# https://matplotlib.org/stable/api/markers_api.html\n# Trouble: not in the same CRS\n# this is cool! but now we are seeing all Arctic comms\nfig, ax = plt.subplots(figsize=(12,8))\n# --------------------------\nax.axis('off')\n\nalaska.plot(ax=ax, color='none', edgecolor='0.7')\nak_complete_roads.plot(ax=ax, column='type', legend=True)\n#ak_comms.plot(ax=ax, color='red')\nak_places.plot(ax=ax, color='red', marker='s')\n\n# --------------------------\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-reproject-and-clip_files/figure-html/cell-27-output-1.png){width=912 height=501}\n:::\n:::\n\n\n",
    "supporting": [
      "lesson-13-reproject-and-clip_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}