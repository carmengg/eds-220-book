{
  "hash": "a93eee09415ee9ff69d4f9d1adab4844",
  "result": {
    "markdown": "<!-- \nFixing the preview working directory\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\nhome = os.path.expanduser(\"~\")\nos.chdir(os.path.join(home,'eds-220-book'))\n```\n:::\n\n\n-->\n\n# `geopandas`\n\nGeoPandas is a Python library that extends the `pandas` library by adding support for geospatial data. In this lesson we will introduce the `geopandas` library to work with vector data. We will also make our first map. \n\nTo begin with, let's import `geopandas` with its standard abbreviation `gpd`:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# this is the library we will explore\nimport geopandas as gpd\n\n# we will start using matplotlib for making maps\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n## Data\n\nIn this lesson we will use simplified point data about wild pigs (*Sus scrofa*) sightings in California, USA from the [Global Biodiversity Information Facility](https://www.gbif.org). \n\nWe can read in a shapefile with `geopandas` by using the `gpd.read_file()` function. \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npigs = gpd.read_file('data/gbif_sus_scroga_california/gbif_sus_scroga_california.shp')\npigs.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=767}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gbifID</th>\n      <th>species</th>\n      <th>state</th>\n      <th>individual</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>inst</th>\n      <th>collection</th>\n      <th>catalogNum</th>\n      <th>identified</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>899953814</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>22.0</td>\n      <td>3.0</td>\n      <td>2014.0</td>\n      <td>iNaturalist</td>\n      <td>Observations</td>\n      <td>581956</td>\n      <td>edwardrooks</td>\n      <td>POINT (-121.53812 37.08846)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>899951348</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>9.0</td>\n      <td>6.0</td>\n      <td>2007.0</td>\n      <td>iNaturalist</td>\n      <td>Observations</td>\n      <td>576047</td>\n      <td>Bruce Freeman</td>\n      <td>POINT (-120.54942 35.47354)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>896560733</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>20.0</td>\n      <td>12.0</td>\n      <td>1937.0</td>\n      <td>MVZ</td>\n      <td>Hild</td>\n      <td>MVZ:Hild:195</td>\n      <td>Museum of Vertebrate Zoology, University of Ca...</td>\n      <td>POINT (-122.27063 37.87610)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>896559958</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>1969.0</td>\n      <td>MVZ</td>\n      <td>Hild</td>\n      <td>MVZ:Hild:1213</td>\n      <td>Museum of Vertebrate Zoology, University of Ca...</td>\n      <td>POINT (-121.82297 38.44543)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896559722</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1961.0</td>\n      <td>MVZ</td>\n      <td>Hild</td>\n      <td>MVZ:Hild:1004</td>\n      <td>Museum of Vertebrate Zoology, University of Ca...</td>\n      <td>POINT (-121.74559 38.54882)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-caution}\n## One shapefile = multiple files\nAlthough the parameter for `gpd.read_file()` is only the `.shp` file, remember that we need to have at least the `.shx` and `.dbf` files in the same directory as the `.shp` to read in the data. \n:::\n\n## `GeoSeries` and `GeoDataFrame`\n\nThe core data structure in GeoPandas is the `geopandas.GeoDataFrame`. \nWe can think of it as a `pandas.DataFrame` with a dedicated geometry column that can perform spatial operations. \n\nThe **geometry column** in a `gpd.GeoDataFrame` holds the geometry (point, polygon, etc) of each spatial feature. Columns in the `gpd.GeoDataFrame` with attributes about the features are `pandas.Series` like in a regular `pd.DataFrame`. \n\n![Image source: GeoPandas documentation](/images/lesson-8-geopandas/dataframe.svg)\n\n**Example**\n\nFirst of all, notice that the leftmost column of `pigs` is a column named `geometry` whose values indicate points. \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\npigs.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=768}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gbifID</th>\n      <th>species</th>\n      <th>state</th>\n      <th>individual</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>inst</th>\n      <th>collection</th>\n      <th>catalogNum</th>\n      <th>identified</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>899953814</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>22.0</td>\n      <td>3.0</td>\n      <td>2014.0</td>\n      <td>iNaturalist</td>\n      <td>Observations</td>\n      <td>581956</td>\n      <td>edwardrooks</td>\n      <td>POINT (-121.53812 37.08846)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>899951348</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>9.0</td>\n      <td>6.0</td>\n      <td>2007.0</td>\n      <td>iNaturalist</td>\n      <td>Observations</td>\n      <td>576047</td>\n      <td>Bruce Freeman</td>\n      <td>POINT (-120.54942 35.47354)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>896560733</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>20.0</td>\n      <td>12.0</td>\n      <td>1937.0</td>\n      <td>MVZ</td>\n      <td>Hild</td>\n      <td>MVZ:Hild:195</td>\n      <td>Museum of Vertebrate Zoology, University of Ca...</td>\n      <td>POINT (-122.27063 37.87610)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAs usual, we can check the type of our objects using the `type` Python function:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# type of the pigs dataframe \nprint(type(pigs))\n\n# type of the geometry column\nprint(type(pigs.geometry))\n\n# type of the gbifID column\nprint(type(pigs.gbifID))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'geopandas.geodataframe.GeoDataFrame'>\n<class 'geopandas.geoseries.GeoSeries'>\n<class 'pandas.core.series.Series'>\n```\n:::\n:::\n\n\nThe new data type of the geometry column is also reflected when we look at the data types of the columns in the data frame:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\npigs.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=770}\n```\ngbifID           int64\nspecies         object\nstate           object\nindividual     float64\nday            float64\nmonth          float64\nyear           float64\ninst            object\ncollection      object\ncatalogNum      object\nidentified      object\ngeometry      geometry\ndtype: object\n```\n:::\n:::\n\n\nWe can also check the type of each element in the geometry column using the `geom_type` attribute of a `gpd.GeoDataFrame`:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\npigs.geom_type\n```\n\n::: {.cell-output .cell-output-display execution_count=771}\n```\n0       Point\n1       Point\n2       Point\n3       Point\n4       Point\n        ...  \n1041    Point\n1042    Point\n1043    Point\n1044    Point\n1045    Point\nLength: 1046, dtype: object\n```\n:::\n:::\n\n\n<!--\n\nThis is a `shapely` point. `shapely` is another Python library that to construct and modify points, lines, and polygons. We will talk more about it in the next lessons.\n-->\n\n## Geometric information\n\nTwo other important attributes of a `gpd.GeoDataFrame` are its coordinate reference system (CRS) and its extent. \n\nWe can think of the **coordinate reference system (CRS)** as the instructions to locate each feature in our dataframe on the surface of the Earth. We access the CRS of a `gpd.GeoDataFrame` using the `crs` attribute:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# access the CRS of the GeoDataFrame\npigs.crs\n```\n\n::: {.cell-output .cell-output-display execution_count=772}\n```\n<Geographic 2D CRS: EPSG:4326>\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World.\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n\nThe **extent** of the geo-dataframe is the bounding box covering *all* the features in our geo-dataframe. This is formed by finding the points that are furthest west, east, south and north.\n\n![Spatial extent of different vector data. Image Source: National Ecological Observatory Network (NEON)](/images/lesson-8-geopandas/spatial-extent.png)\n\nWe access the extent of a `gpd.GeoDataFrame` using the `total_bounds` attribute:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\npigs.total_bounds\n```\n\n::: {.cell-output .cell-output-display execution_count=773}\n```\narray([-124.29448 ,   32.593433, -115.4356  ,   40.934296])\n```\n:::\n:::\n\n\n## Data wrangling\n\nGeoPandas is conveniently built on top of `pandas`, so we may use  everything we have learned about data selection, wrangling, and modification for a `pd.DataFrame`.\n\n**Example**\n\nSuppose we only want to use recent data for wild pig observations. A quick check shows that this dataframe has data since 1818:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# use sort_index() method to order the index\npigs.year.value_counts().sort_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=774}\n```\n1818.0     31\n1910.0      1\n1925.0      1\n1927.0      4\n1929.0      3\n         ... \n2019.0    101\n2020.0    159\n2021.0    164\n2022.0    185\n2023.0     98\nName: year, Length: 61, dtype: int64\n```\n:::\n:::\n\n\nWe can use our usual data selection to get data from 2020 onwards:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# selet data from 2020 onwards\npigs_recent = pigs[pigs.year>=2020]\n\n# print length of original dataframe\nprint(len(pigs))\n\n# check length of new dataframe\nlen(pigs_recent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1046\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=775}\n```\n606\n```\n:::\n:::\n\n\n## Plotting\n\n### `plot()`\n\nSimilarly to a `pd.DataFrame`, a `gpd.GeoDataFrame` has a `plot()` method that we can call directly to create a quick view of our data. \nThe geospatial information of the `gpd.GeoDataFrame` will be used to create the axes of the plot.\n\n**Example**\n\nThis is a quick look at our recent pigs data:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\npigs_recent.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=776}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-9-geopandas-intro_files/figure-html/cell-13-output-2.png){width=368 height=411}\n:::\n:::\n\n\n### `matplotlib`'s `fig` and `ax`\n\nGoing forward, we will often want to make more complex visualizations where we add different layers to a graph and customize it. \nTo do this we will use the `matplotlib` Python library for creating visualizations. \nWe can interact with `matplotlib` via its `pyplot` interface, which we imported at the top of the notebook as \n```python\n# import matplotlib with standard abbreviation\nimport matplotlib.pyplot as plt\n```\n\nMatplotlib graphs the data in a **figure** which can have one or more **axes**. \nThe axis is only the area specified by the x-y axis and what is plotted in it. To create a new blank figure:\n\n1. Initialize a new figure and axes by calling `pyplot`'s `subplots()` function, and\n2. show the graph using `plt.show()`:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# create a blank figure (fig) with an empty axis (ax)\nfig, ax = plt.subplots()\n\n# display figure\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-9-geopandas-intro_files/figure-html/cell-14-output-1.png){width=581 height=416}\n:::\n:::\n\n\nNotice we get a figure with a single empty axis. We can think of this step as setting a new blank canvas on which we will paint upon. \n\n::: {.callout-note}\n## Functions with multiple return values\nNotice that `plt.subplots()` is a function that returns two objects (has two outputs). \n:::\n\n### Adding a layer\n\nWhen using `matplotlib`, it can be useful to think of creating a plot as adding layers to an axis.\nThe general syntax to plot a datafram `df` onto an axis is:\n```python\n# create new figure and axis\nfig, ax = plt.subplots()\n\n# plot df on the ax axis\ndf.plot(ax=ax, \n        ...)   # other arguments for plot function\n\n# display figure\nplt.show()\n``` \n\n**Example**\n\nThe first layer we want to add to our axis is the `pigs_recent` point data. \nWe can plot our data using `matplotlib` like this:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# create new figure and axis\nfig, ax = plt.subplots()\n\n# add pigs point plot to our figure's axis\npigs_recent.plot(ax=ax)\n\n# display figure\nplt.show\n```\n\n::: {.cell-output .cell-output-display execution_count=778}\n```\n<function matplotlib.pyplot.show(close=None, block=None)>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-9-geopandas-intro_files/figure-html/cell-15-output-2.png){width=368 height=411}\n:::\n:::\n\n\n### Customization \n\nMatplotlib allows for a lot of customization. \nSome of it can be done directly in the `plot()` method for the dataframe (like we've done when ploting data using `pandas`), while other is done by updating attributes of the axis `ax`. \nThe following image shows some examples of elements in the axis that can be updated.\n\n![Image source: Matplotlib documentation](/images/lesson-8-geopandas/anatomy.png)\n\n**Example**\n\nSome basic customization for our pigs data could looke like this:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# initialize empty figure\nfig, ax = plt.subplots()\n\n# add data to axis\n# notice customization happens as arguments in plot()\npigs_recent.plot(ax=ax,\n                 alpha=0.5,\n                 color='brown'\n                 )\n\n# update axis \n# customization separate from the data plotting\nax.set_title('Reported \"Sus scrofa\" sightings in CA (2020-2023)')\nax.set_xlabel('Longitude')\nax.set_ylabel('Latitude')\n\n# display figure\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-9-geopandas-intro_files/figure-html/cell-16-output-1.png){width=424 height=449}\n:::\n:::\n\n\n<!--\n## Simple map\n\n[California's government Open Data Portal](https://data.ca.gov/dataset/ca-geographic-boundaries)\n\n```python\n# initialize empty figure\nfig, ax = plt.subplots()\n\n# add CA polygon to axis\nca.plot(ax=ax)\n\n# add data to axis\n# notice customization happens as arguments in plot()\npigs_recent.plot(ax=ax,\n                 alpha=0.5,\n                 color='brown')\n\n# update axis \n# customization separate from the data plotting\nax.set_title('Reported \"Sus scrofa\" sightings in CA (2020-2023)')\nax.set_xlabel('Longitude')\nax.set_ylabel('Latitude')\n\n# display figure\nplt.show()\n```\n\n-->\n\n## References\nGBIG data: GBIF.org (23 October 2023) GBIF Occurrence Download https://doi.org/10.15468/dl.qavhwp\n\n[Geopandas Documentation - Introduction to GeoPandas](https://geopandas.org/en/stable/getting_started/introduction.html)\n\n[Matplotlib Documentation - Basic Usage](\nhttps://matplotlib.org/3.5.3/tutorials/introductory/usage.html#sphx-glr-tutorials-introductory-usage-py)\n\n<!--\nhttps://www.neonscience.org/resources/learning-hub/tutorials/intro-vector-data-r\n\n",
    "supporting": [
      "lesson-9-geopandas-intro_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}