{
  "hash": "9fedd196294f6a6da7808246340e8772",
  "result": {
    "markdown": "---\n# do not execute cells\nexecute:\n  eval: false\n---\n\n# STAC specification\n\nSo far in our course we have accessed data in two ways: by downloading it directly from the data provider or by loading a specific dataset via a URL. \nThis can be a convenient way to access targeted datasets, often usign GUIs (graphical user interfaces) for data discovery and filtering.\nHowever, relying on clicking and copy-pasting addresses and file names can make our workflows more error-prone and less reproducible. \nIn particular, satellites around the world produce terabytes of new data daily and manually browsing through data repositories would it make hard to access this data. \nMoreover, we wouldn't want to learn a new way to access data from every single big data provider.\nThis is where STAC comes in.\n\n![](/images/STAC-01.png)\n\nThe **SpatioTemporal Asset Catalog (STAC)** is an emerging open standard for geospatial data that aims to increase the interoperability of geospatial data, particularly satellite imagery. \nMajor satellite imagery datasets like X, Y, and [many others](https://stacspec.org/en/about/datasets/), now follow the STAC specification.\n\nIn the next classes we'll be working with the [Microsoft's Planetary Computer (MPC)](https://planetarycomputer.microsoft.com) STAC API. \nThe MPC is both a geospatial coding environment and a STAC data catalogue. \nIn this lesson we will learn about the main components of a STAC catalog and how to search for data using the MPC's STAC API. \n\n## Item, Collection, and Catalog\nThe **STAC item** (or just item) is the building block of a STAC. \nAn item is a GeoJSON feature with additional fields that make it easier to find the item as we look for data across catalogs. \n\nAn item holds two types of information:\n\n1. **Metadata:** The metadata for a STAC item includes core identifying information (such as id, geometry, bounding box, and date), and additional properties (for example, place of collection). \n\n2. **Assets:** Assets are the links to the actual data of the item (for example, links to the spectral bands of a satellite image.)\n\nSTAC items can be grouped into **STAC collections** (or just collections). \nFor example, while a single satellite scene (at a single time and location) would constitue an item, scenes across time and location from the same satellite can be orgnanized in a collection. \nFinally, multiple collections can be organized into a single **STAC catalog**. \n\n## API\nTo request data from a catalog following the STAC standard we use an **Application Programming Interface (API)**. \nWe can think of an API as an intermediary tasked with sending our request for data to the data catalog and getting the response from the catalog back to us. \nThe following is a nice real-life analogy:\n\n![[Geeks for geeks - What is an API?](https://www.geeksforgeeks.org/what-is-an-api/)](/images/what-is-an-api.png)\n\nThe Python package to access APIs for STAC catalogs is [`pystac_client`](https://pystac-client.readthedocs.io/en/stable/). \nOur goal in this lesson is to retrieve [NAIP data](https://naip-usdaonline.hub.arcgis.com) from the [MPC's data catalog](https://planetarycomputer.microsoft.com/catalog) via its STAC API. \nWe'll be doing this within the MPC's hub. \n\n## Catalog \n<!--https://github.com/NCEAS/msai4earth-esa/blob/main/examples/naip_example/access_naip.ipynb-->\nFirst, load the necessary packages:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport geopandas as gpd\nimport rioxarray as rioxr\nimport matplotlib.pyplot as plt\n\nfrom shapely.geometry import Polygon\n\n# used to access STAC catalogs\nfrom pystac_client import Client\n# used to sign items from the MPC STAC catalog\nimport planetary_computer\n\n# ----- other libraries for nice ouputs\nfrom IPython.display import Image\n```\n:::\n\n\n### Access\nWe use the `Client` function from the `pystac_client` package to access the catalog:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# access catalog\ncatalog = Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n```\n:::\n\n\nThe `modifier` parameter is needed to access the data in the MPC catalog.\n\n### Exploration\nLet's check out some of the catalog's metadata:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# metadata from the catalog\n#print('ID:', catalog.id)\nprint('Title:', catalog.title)\nprint('Description:', catalog.description)\n```\n:::\n\n\nWe can access its collections by using the `get_collections()` method:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ncatalog.get_collections()\n```\n:::\n\n\nNotice the output of `get_collections()` is a **generator**. \nThis is a special kind of *lazy* object in Python over which you can loop over like a list. \nUnlike a list, the items in a generator do not exist in memory until you explicitely iterate over them or convert them to a list. \nLet's try getting the collections from the catalog again:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# get collections and print their names\ncollections = list(catalog.get_collections())\n\nprint('Number of collections:', len(collections))\nprint(\"Collections IDs:\")\nfor collection in collections:\n    print('-', collection.id)\n```\n:::\n\n\n## Collection\n\nWe can select a single collection for exploration using the `get_child()` method for the catalog and the collection id as the parameter:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nnaip_collection = catalog.get_child('naip')\nnaip_collection\n```\n:::\n\n\n<!--\nhttps://pystac.readthedocs.io/en/latest/api/pystac.html#pystac.Collection\n\nhttps://pystac.readthedocs.io/en/stable/api/item_collection.html#pystac-item-collection\n-->\n\n## Catalog search\nWe can narrow the search withing the `catalog` by specifying a time range, an area of interest, and the collection name. \nThe simplest ways to define the area of interest to look for data in the catalog are:\n\n- a GeoJSON-type dictionary with the coordinates of the bounding box,\n- as a list `[xmin, ymin, xmax, ymax]` with the coordinate values defining the four corners of the bounding box.\n\nIn this lesson we will look for the NAIP scenes over Santa Barbara from 2018 to 2023. We'll use the GeoJSON method to define the area of interest:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Temporal range of interest\ntime_range = \"2018-01-01/2023-01-01\"\n\n# NCEAS bounding box (as a GeoJSON)\nbbox = {\n    \"type\": \"Polygon\",\n    \"coordinates\":[\n        [\n            [-119.70608227128903, 34.426300194372274],\n            [-119.70608227128903, 34.42041139020533],\n            [-119.6967885126002, 34.42041139020533],\n            [-119.6967885126002, 34.426300194372274],\n            [-119.70608227128903, 34.426300194372274]\n        ]\n    ],\n}\n\n# catalog search\nsearch = catalog.search(\n    collections=['naip'],\n    intersects=bbox,\n    datetime=time_range)\nsearch\n```\n:::\n\n\nTo get the items found in the search (or check if there were any matches in the search) we use the `item_collection()` method:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nitems = search.item_collection()\nlen(items)\n```\n:::\n\n\nThis output tells us there were two items in the catalog that matched our search!\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nitems\n```\n:::\n\n\n## Item\n<!--https://pystac.readthedocs.io/en/stable/api/pystac.html#pystac.Item-->\nLet's get the first item in the search:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# get first item in the catalog search\nitem = items[0]\ntype(item)\n```\n:::\n\n\nRemember the [STAC item](https://pystac.readthedocs.io/en/stable/api/pystac.html#pystac.Item) is the core object in the catalog and. \nThe item does not contain the data itself, but rather metadata about and links to access the actual data (assets).\nSome of the metadata:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# print item id and properties\nprint('id:' , item.id)\nitem.properties\n```\n:::\n\n\nJust as the item properties, the item assets are given in a dictionary, with each value being an [`pystac.asset`](https://pystac.readthedocs.io/en/stable/api/asset.html)\nLet's check the assets in the `item`:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nitem.assets\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfor key in item.assets.keys():\n    print(key, '--', item.assets[key].title)\n```\n:::\n\n\nNotice each asset has an `href`, which is a link to the asset object (i.e. the data). \nFor example, we can use the URL for the rendered preview asset to plot it:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# plot rendered preview\nImage(url=item.assets['rendered_preview'].href, width=500)\n```\n:::\n\n\n## Load data\nThe raster data in our current `item` is in the `image` asset. \nAgain, we access this data via its URL. \nThis time, we open it using `rioxr.open_rasterio()` directly:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nsb = rioxr.open_rasterio(item.assets['image'].href)\nsb\n```\n:::\n\n\nNotice this raster has four bands. \nSo we cannot use the `.plot.imshow()` method directly (as this function only works when we have three bands). \nThus we need select the bands we want to plot (RGB) before plotting:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# plot raster with correct ratio\nsize = 6 # height in in of plot height\naspect = sb.rio.width / sb.rio.height \n# select R,G,B bands and plot\nsb.sel(band=[1,2,3]).plot.imshow(size=size, aspect=aspect)\n```\n:::\n\n\n## Exercise\n\nThe 'cop-dem-glo-90' collection contains the Copernicus DEM at 90m resolution (the data we previously used for the Grand Canyon). \n\n1) Reuse the `bbox` for Santa Barbara to look for items in this collection. \n2) Get the first item in the search and check its assets.\n3) Check the item's rendered preview asset by clicking on it's URL.\n4) Open the item's data using rioxarray.\n\n<!--\n## Exercise\nRecreate the following image, where the red rectangle shows the bounding box used to do the catalog search. \nHINT: `bbox` as it is now is a dictionary. How can you get the vertices list out of it to first create a `shapely` `Polygon`?\n\n![](/images/sb-and-aoi-mpc.png)\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\naoi = gpd.GeoDataFrame(geometry=[Polygon(bbox['coordinates'][0])],\n                crs='epsg:4326')\naoi.plot()\n```\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# reproject aoi to rgb crs\naoi = aoi.to_crs(sb.rio.crs)\nprint('matched crs?',  aoi.crs == sb.rio.crs)\naoi.crs\n```\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\n\nsize = 6 # height in in of plot height\naspect = sb.rio.width / sb.rio.height # ratio of widht/height\nfig.set_size_inches((size, size*aspect)) # reuse size and aspect\n\nsb.sel(band=[1,2,3]).plot.imshow(ax=ax)\naoi.plot(ax=ax, color='red', alpha=0.6)\n```\n:::\n\n\n-->\n\n\n## References\nSTAC Documentation:\n\n- [The STAC Specification](https://stacspec.org/en/tutorials/intro-to-stac/)\n- [Read a STAC Catalog Using PySTAC](https://stacspec.org/en/tutorials/1-read-stac-python/)\n\n[Microsoft Planetary Computer Documentation - Reading Data from the STAC API](https://planetarycomputer.microsoft.com/docs/quickstarts/reading-stac/)\n\n<!-- https://planetarycomputer.microsoft.com/docs/tutorials/hurricane-florence-animation/\n\nIdea for homework:\n\nhttps://planetarycomputer.microsoft.com/dataset/io-biodiversity#Example-Notebook\n\n-->\n\n",
    "supporting": [
      "lesson-18-STAC_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}