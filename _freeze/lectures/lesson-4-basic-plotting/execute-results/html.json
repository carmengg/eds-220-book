{
  "hash": "3717e2e5e322a5d0761a4ea19d75d4c6",
  "result": {
    "markdown": "## Plotting\nLet's learn the basics of plotting with `pandas` to make things more interesting. \n\n\nTo get us started, we will use again the simplified data (glacial_loss.csv) from the National Snow and Ice Data Center ([Original dataset](​http://dx.doi.org/10.7265/N52N506F)). The column descriptions are:\n\n- **year**: ​calendar year\n- **europe - antarctica**: ​change in glacial volume (km3​ ​) in each region that year\n- **global_glacial_volume_change**: ​cumulative​ global glacial volume change (km3),\nstarting in 1961\n- **annual_sea_level_rise**: ​annual rise in sea level (mm)\n- **cumulative_sea_level_rise**:​ cumulative rise in sea level (mm) since 1961\n\n<!-- \nFixing the preview working directory\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\nhome = os.path.expanduser(\"~\")\nos.chdir(os.path.join(home,'eds-220-book'))\n```\n:::\n\n\n-->\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\n\n# read in file\ndf = pd.read_csv('data/lesson-1/glacial_loss.csv')\n\n# see the first five rows\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>europe</th>\n      <th>arctic</th>\n      <th>alaska</th>\n      <th>asia</th>\n      <th>north_america</th>\n      <th>south_america</th>\n      <th>antarctica</th>\n      <th>global_glacial_volume_change</th>\n      <th>annual_sea_level_rise</th>\n      <th>cumulative_sea_level_rise</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1961</td>\n      <td>-5.128903</td>\n      <td>-108.382987</td>\n      <td>-18.721190</td>\n      <td>-32.350759</td>\n      <td>-14.359007</td>\n      <td>-4.739367</td>\n      <td>-35.116389</td>\n      <td>-220.823515</td>\n      <td>0.610010</td>\n      <td>0.610010</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1962</td>\n      <td>5.576282</td>\n      <td>-173.252450</td>\n      <td>-24.324790</td>\n      <td>-4.675440</td>\n      <td>-2.161842</td>\n      <td>-13.694367</td>\n      <td>-78.222887</td>\n      <td>-514.269862</td>\n      <td>0.810625</td>\n      <td>1.420635</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1963</td>\n      <td>-10.123105</td>\n      <td>-0.423751</td>\n      <td>-2.047567</td>\n      <td>-3.027298</td>\n      <td>-27.535881</td>\n      <td>3.419633</td>\n      <td>3.765109</td>\n      <td>-550.575640</td>\n      <td>0.100292</td>\n      <td>1.520927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1964</td>\n      <td>-4.508358</td>\n      <td>20.070148</td>\n      <td>0.477800</td>\n      <td>-18.675385</td>\n      <td>-2.248286</td>\n      <td>20.732633</td>\n      <td>14.853096</td>\n      <td>-519.589859</td>\n      <td>-0.085596</td>\n      <td>1.435331</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1965</td>\n      <td>10.629385</td>\n      <td>43.695389</td>\n      <td>-0.115332</td>\n      <td>-18.414602</td>\n      <td>-19.398765</td>\n      <td>6.862102</td>\n      <td>22.793484</td>\n      <td>-473.112003</td>\n      <td>-0.128392</td>\n      <td>1.306939</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## `plot()` method\n\nA `pandas.DataFrame` has a [built-in method `plot()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html) for plotting. \nWhen we call it without specifying any other parameters `plot()` creates one line plot for each of the columns with numeric data. \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# one line plot per column with numeric data - a mess\ndf.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-4-output-2.png){width=594 height=411}\n:::\n:::\n\n\nAs we can see, this doesn't make any sense! In particular, look at the x-axis. The default for `plot` is to use the values of the index as the x-axis values. Let's see some examples about how to improve this situation.\n\n## Line plots\n\nWe can make a line plot of one column against another by using the following syntax:\n\n```python\ndf.plot(x='x_values_column', y='y_values_column')\n```\nFor example, \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# change in glacial volume per year in Europe\ndf.plot(x='year', y='europe')\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n<AxesSubplot:xlabel='year'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-5-output-2.png){width=577 height=429}\n:::\n:::\n\n\nWe can do some basic customization specifying other arguments of the `plot` function. Some basic ones are:\n\n- `title`: Title to use for the plot.\n- `xlabel`: Name to use for the xlabel on x-axis\n- `ylabel`: Name to use for the ylabel on y-axis\n- `color`: change the color of our plot\n\nIn action:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf.plot(x='year', \n        y='europe',\n        title='Change in glacial volume per year in Europe',\n        xlabel='Year',\n        ylabel='​Change in glacial volume (km3​)',\n        color='green'\n        )\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n<AxesSubplot:title={'center':'Change in glacial volume per year in Europe'}, xlabel='Year', ylabel='\\u200bChange in glacial volume (km3\\u200b)'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-6-output-2.png){width=596 height=449}\n:::\n:::\n\n\nYou can see all the [optional arguments for the `plot()` function in the documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html).\n\n### Multiple line plots\nLet's say we want to graph the change in glacial volume in the Arctic and Alaska. We can do it by updating these arguments:\n\n- `y` : a list of column names that will be plotted against x\n- `color`: specify the color of each column's line with a dictionary `{'col_1' : 'color_1', 'col_2':'color_2}`\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf.plot(x='year', \n        y=['arctic', 'alaska'],\n        title = 'Change in glacial volume per year in Alaska and the Arctic',\n        xlabel='Year',\n        ylabel='​Change in glacial volume (km3​)',        \n        color = {'arctic':'#F48FB1',\n                 'alaska': '#AB47BC'\n                 }\n        )\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n<AxesSubplot:title={'center':'Change in glacial volume per year in Alaska and the Arctic'}, xlabel='Year', ylabel='\\u200bChange in glacial volume (km3\\u200b)'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-7-output-2.png){width=604 height=449}\n:::\n:::\n\n\nNotice that for specifying the colors we used a **HEX code**, this gives us more control over how our graph looks.\n\n\nWe can also create separate plots for each column by setting the `subset` to `True`.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf.plot(x='year', \n        y=['arctic', 'alaska'],\n        title = 'Change in glacial volume per year in Alaska and the Arctic',\n        xlabel='Year',\n        ylabel='​Change in glacial volume (km3​)',        \n        color = {'arctic':'#F48FB1',\n                 'alaska': '#AB47BC'\n                 },\n        subplots=True\n        )\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\narray([<AxesSubplot:xlabel='Year', ylabel='\\u200bChange in glacial volume (km3\\u200b)'>,\n       <AxesSubplot:xlabel='Year', ylabel='\\u200bChange in glacial volume (km3\\u200b)'>],\n      dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-8-output-2.png){width=604 height=477}\n:::\n:::\n\n\n### Check-in\n\n(1)\nPlot a graph of the annual sea level rise with respect to the years.\n\n(2)\nWhat information is the `columns` variable retrieving from the data frame? Describe in a sentence what is being plotted.\n```python\ncolumns = df.loc[:,'europe':'antarctica'].columns\ndf.plot(x='year', \n        y=columns, \n        subplots=True)\n```\n\nWe will move on to another dataset for the rest of the lecture. The great...\n\n## Palmer penguins dataset\n\nFor the next plots we will use the  Palmer Penguins dataset (Horst et al., 2020). This contains size measurements for three penguin species in the Palmer Archipelago, Antarctica. \n\n![The Palmer Archipelago penguins. Artwork by @allison_horst.](/images/lesson-3-plot/lter_penguins.png)\n\nThe data is usually accessed through the `palmerpenguins` R data package. Today we will access the csv directly into Python using the URL: [https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv](https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv)\n\nThe Palmer penguins dataset has the following columns:\n\n- **species**\n- **island**\n- **bill_length_mm**\n- **bill_depth_mm**\n- **flipper_lenght_mm**\n- **body_mass_g**\n- **sex**\n- **year**\n\nLet's start by reading in the data.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# read in data\npenguins = pd.read_csv('https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv')\n\n# look at dataframe's head\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# check column data types and NA values\npenguins.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 344 entries, 0 to 343\nData columns (total 8 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \n 7   year               344 non-null    int64  \ndtypes: float64(4), int64(1), object(3)\nmemory usage: 21.6+ KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# simple statistics about numeric columns\npenguins.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>342.000000</td>\n      <td>342.000000</td>\n      <td>342.000000</td>\n      <td>342.000000</td>\n      <td>344.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>43.921930</td>\n      <td>17.151170</td>\n      <td>200.915205</td>\n      <td>4201.754386</td>\n      <td>2008.029070</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>5.459584</td>\n      <td>1.974793</td>\n      <td>14.061714</td>\n      <td>801.954536</td>\n      <td>0.818356</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>32.100000</td>\n      <td>13.100000</td>\n      <td>172.000000</td>\n      <td>2700.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>39.225000</td>\n      <td>15.600000</td>\n      <td>190.000000</td>\n      <td>3550.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>44.450000</td>\n      <td>17.300000</td>\n      <td>197.000000</td>\n      <td>4050.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>48.500000</td>\n      <td>18.700000</td>\n      <td>213.000000</td>\n      <td>4750.000000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>59.600000</td>\n      <td>21.500000</td>\n      <td>231.000000</td>\n      <td>6300.000000</td>\n      <td>2009.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can also subset the dataframe to get information about a particular column or groups of columns.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# get count unique values in categorical columns and year\npenguins[['species', 'island', 'sex', 'year']].nunique()\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\nspecies    3\nisland     3\nsex        2\nyear       3\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# get unique values in species column\nprint(penguins.species.unique())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Adelie' 'Gentoo' 'Chinstrap']\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# species unique value counts \nprint(penguins.species.value_counts())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdelie       152\nGentoo       124\nChinstrap     68\nName: species, dtype: int64\n```\n:::\n:::\n\n\n## `kind` argument in `plot()`\n\nWe talked about how the `plot()` function creates by default a line plot. The parameter that controls this behaviour is `plot()`'s `kind` parameter. By changing the value of `kind` we can create different kinds of plots. Let's look at the documentation to see what these values are:\n\n![`pandas.DataFrame.plot` documentation extract - accessed Oct 10,2023](/images/lesson-3-plot/df-plot-doc.png)\n\nNotice the default value of `kind` is `'line'`. \n\nLet's change the `kind` parameter to create some different plots. \n\n## Scatter plots\nSuppose we want to visualy compare the flipper length against the body mass, we can do this with a scatterplot. \n\nExample:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\npenguins.plot(kind='scatter',\n        x='flipper_length_mm', \n        y='body_mass_g')\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n<AxesSubplot:xlabel='flipper_length_mm', ylabel='body_mass_g'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-15-output-2.png){width=602 height=429}\n:::\n:::\n\n\nWe can update some other arguments to customize the graph:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\npenguins.plot(kind='scatter',\n        x='flipper_length_mm', \n        y='body_mass_g',\n        title='Flipper length and body mass for Palmer penguins',\n        xlabel='Flipper length (mm)',\n        ylabel='Body mass (g)',\n        color='#ff3b01',\n        alpha=0.4  # controls transparency\n        )\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n<AxesSubplot:title={'center':'Flipper length and body mass for Palmer penguins'}, xlabel='Flipper length (mm)', ylabel='Body mass (g)'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-16-output-2.png){width=602 height=449}\n:::\n:::\n\n\n## Bar plots\n\nWe can create bar plots of our data setting `kind='bar'` in the `plot()` method.\n\nFor example, let's say we want to get data about the 10 penguins with lowest body mass. We can first select this data using the `nsmallest()` method for series:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nsmallest = penguins.body_mass_g.nsmallest(10).sort_values()\nsmallest\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n314    2700.0\n58     2850.0\n64     2850.0\n54     2900.0\n98     2900.0\n116    2900.0\n298    2900.0\n104    2925.0\n47     2975.0\n44     3000.0\nName: body_mass_g, dtype: float64\n```\n:::\n:::\n\n\nWe can then plot this data as a bar plot\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nsmallest.plot(kind='bar')\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-18-output-2.png){width=583 height=424}\n:::\n:::\n\n\nIf we wanted to look at other data for these smallest penguins we can use the index of the `smallest` `pandas.Series` to select those rows in the original `penguins` data frame using `loc`:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\npenguins.loc[smallest.index]\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>314</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>46.9</td>\n      <td>16.6</td>\n      <td>192.0</td>\n      <td>2700.0</td>\n      <td>female</td>\n      <td>2008</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>36.5</td>\n      <td>16.6</td>\n      <td>181.0</td>\n      <td>2850.0</td>\n      <td>female</td>\n      <td>2008</td>\n    </tr>\n    <tr>\n      <th>64</th>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>36.4</td>\n      <td>17.1</td>\n      <td>184.0</td>\n      <td>2850.0</td>\n      <td>female</td>\n      <td>2008</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>34.5</td>\n      <td>18.1</td>\n      <td>187.0</td>\n      <td>2900.0</td>\n      <td>female</td>\n      <td>2008</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>Adelie</td>\n      <td>Dream</td>\n      <td>33.1</td>\n      <td>16.1</td>\n      <td>178.0</td>\n      <td>2900.0</td>\n      <td>female</td>\n      <td>2008</td>\n    </tr>\n    <tr>\n      <th>116</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>38.6</td>\n      <td>17.0</td>\n      <td>188.0</td>\n      <td>2900.0</td>\n      <td>female</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>298</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>43.2</td>\n      <td>16.6</td>\n      <td>187.0</td>\n      <td>2900.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>104</th>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>37.9</td>\n      <td>18.6</td>\n      <td>193.0</td>\n      <td>2925.0</td>\n      <td>female</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>Adelie</td>\n      <td>Dream</td>\n      <td>37.5</td>\n      <td>18.9</td>\n      <td>179.0</td>\n      <td>2975.0</td>\n      <td>NaN</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>Adelie</td>\n      <td>Dream</td>\n      <td>37.0</td>\n      <td>16.9</td>\n      <td>185.0</td>\n      <td>3000.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Histograms\n\nWe can create a histogram of our data setting `kind='hist'` in `plot()`. \n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# using plot without subsetting data - a mess again\npenguins.plot(kind='hist')\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n<AxesSubplot:ylabel='Frequency'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-20-output-2.png){width=593 height=411}\n:::\n:::\n\n\nTo gain actual information, let's subset the data before plotting it. For example, suppose we want to look at the distribution of flipper length. We could do it in this way:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# distribution of flipper length measurements\n# first select data, then plot\npenguins.flipper_length_mm.plot(kind='hist',\n                                title='Penguin flipper lengths',\n                                xlabel='Flipper length (mm)',\n                                grid=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n<AxesSubplot:title={'center':'Penguin flipper lengths'}, ylabel='Frequency'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-21-output-2.png){width=585 height=431}\n:::\n:::\n\n\n### Check-in\n(1) Select the `bill_length_mm` and `bill_depth_mm` columns in the `penguins` dataframe and then update the kind parameter to `box` to make boxplots of the bill length and bill depth.\n<!--\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\npenguins[['bill_length_mm','bill_depth_mm']].plot(kind='box')\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-22-output-2.png){width=566 height=411}\n:::\n:::\n\n\n-->\n\n(2) Select both rows and columns to create a histogram of the flipper length of gentoo penguins. \n\n<!--\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\npenguins.loc[penguins.species == 'Gentoo', 'flipper_length_mm'].plot(kind='hist')\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n<AxesSubplot:ylabel='Frequency'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-23-output-2.png){width=597 height=411}\n:::\n:::\n\n\n-->\n\n<!--\n(3) Create a histogram of the flipper length of *female* gentoo penguins.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\npenguins.loc[(penguins.species == 'gentoo') & (penguins.sex == 'female'), 'flipper_length_mm'].plot(kind='hist')\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n<AxesSubplot:ylabel='Frequency'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-24-output-2.png){width=608 height=411}\n:::\n:::\n\n\n-->\n\n\n<!--\n## Further plotting\n\nMENTION SEABORN\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# make histograms of flipper length by species =\n#   group penguins by species\n#   then make a histogram of \npenguins.groupby('species').flipper_length_mm.plot(kind='hist')\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\nspecies\nAdelie       AxesSubplot(0.125,0.11;0.775x0.77)\nChinstrap    AxesSubplot(0.125,0.11;0.775x0.77)\nGentoo       AxesSubplot(0.125,0.11;0.775x0.77)\nName: flipper_length_mm, dtype: object\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-basic-plotting_files/figure-html/cell-25-output-2.png){width=585 height=411}\n:::\n:::\n\n\n`groupby()` keeps track of which data values correspond to which values in `columns_to_group_by`.\n\n\n### Check-in\n\nCreate a scatter plot of the flipper length against body mass (x=flipper length, y=body mass) by sex. \n-->\n\n## References\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi:10.5281/zenodo.3960218.\n\n",
    "supporting": [
      "lesson-4-basic-plotting_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}