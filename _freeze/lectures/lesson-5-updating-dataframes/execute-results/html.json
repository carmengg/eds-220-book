{
  "hash": "b88b6898ab2e74b9a9068a7934750cc0",
  "result": {
    "markdown": "# Updating data frames\nIn this lesson we will introduce methods for updating a pandas data frame, these include adding and removing columns and updating specific values. \n\n## Data: Palmer penguins\n\nWe will use the Palmer penguins dataset (Horst et al., 2020). This time we will import it via the `seaborn` package since it is included as one of  `seaborn`'s example datasets.\n\n::: {.callout-note}\n## `seaborn`\n[`seaborn`](https://seaborn.pydata.org) is a library to make nice looking graphs in Python. We've been using `plot()` to make basic exploratory graphs. `seaborn` is the next step if you're interested in making publication-level statistical graphics. \n:::\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# standard libraries\nimport pandas as pd\nimport numpy as np\n\n# importing seaborn with its standard abbreviation\nimport seaborn as sns\n\n# will use the random library to create some random numbers\nimport random\n\npenguins = sns.load_dataset(\"penguins\")\n\n# look at dataframe's head\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>Male</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>Female</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>Female</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>Female</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Adding a single column\n\nThe general syntax to adding a new column to a `pd.DataFrame` is \n\n```python\ndf['new_col_name'] = new_column_values\n```\nwhere new_column values could be: \n\n- a `pd.Series` or `numpy.array` of the same length as the data frame\n- a single scalar\n\n**Example**\n\nSuppose we want to create a new column where the body mass is in kilograms instead of grams, so we need to divide the `body_mass_g` by 1000. \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# add a new column body_mass_kg \n# sane syntax as adding a new key to a dictionary\npenguins['body_mass_kg'] = penguins.body_mass_g/1000\n\n# confirm the new column is in the data frame\nprint('body_mass_kg' in penguins.columns)\n\n# take a look at the new column\npenguins.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>body_mass_kg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>Male</td>\n      <td>3.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>Female</td>\n      <td>3.80</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>Female</td>\n      <td>3.25</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>Female</td>\n      <td>3.45</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::{.callout-note}\n## `pd.DataFrames` and dictionaries\nRemember we talked about how a `pandas.DataFrame` could be seen as a dictionary of its columns. The most basic way of adding a new column to a data frame is the same way of adding a new key-value pair to a dictionary:\n```python\n# adding a new key-value pair to a dictionary\n# same as adding a new column in pandas\ndict[new_key] = new_value\n```\n:::\n\nNotice the new column got added at the end. If we want to create a new column and insert it at a particular position we use the data frame method `insert()`:\n```python\ndf.insert(loc = integer_index,  # location of new column\n          column = 'new_col_name', \n          value = new_col_values)\n```\n\n**Example**\n\nSuppose each penguin observation gets a unique identifier as a three digit number. We want to add this column, at the beginning of the data frame. We can use `insert` to do this:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# create random 3-digit codes\n# random.sample used for random sampling wo replacement\ncodes = random.sample(range(100,1000), len(penguins))\n\n# insert codes at the front of data frame = index 0\npenguins.insert(loc=0, \n                column = 'code',\n                value = codes)\n        \npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>code</th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>body_mass_kg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>832</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>Male</td>\n      <td>3.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>494</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>Female</td>\n      <td>3.80</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>554</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>Female</td>\n      <td>3.25</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>338</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>606</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>Female</td>\n      <td>3.45</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<!--\nMoving columns: pop, then insert\n\ndf.insert(0, 'name', df.pop('name'))\nhttps://stackoverflow.com/questions/35321812/move-column-in-pandas-dataframe\n\nInserting at a particular location.\ndf.columns.get_loc()\n-->\n\n## Adding multiple columns\n\nWe can assign multiple columns in the same call by using the data frame's `assign()` method. The general syntax is:\n```python\ndf.assign( new_col1_name = new_col1_values, \n           new_col2_name = new_col2_values)\n```\nNotice the new column names are not strings, we declare them as if we were creating variables.\n\n**Example**\n\nSuppose we want to add these new columns: \n\n- flipper length converted from mm to cm, and\n- a code representing the observer.\n\nWe can add these columns to `penguins` using `assign()`:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# create new columns in the data frame\n# random.choices used for random sampling with replacement\n# need to reassign output of assign() to update the data frame\npenguins = penguins.assign( flipper_length_cm = penguins.flipper_length_mm /10, \n                            observer =   random.choices(['A','B','C'], k=len(penguins)))\n# look at result\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>code</th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>body_mass_kg</th>\n      <th>flipper_length_cm</th>\n      <th>observer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>832</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>Male</td>\n      <td>3.75</td>\n      <td>18.1</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>494</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>Female</td>\n      <td>3.80</td>\n      <td>18.6</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>554</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>Female</td>\n      <td>3.25</td>\n      <td>19.5</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>338</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>606</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>Female</td>\n      <td>3.45</td>\n      <td>19.3</td>\n      <td>B</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Removing columns\n\nWe can remove columns using the [`drop()` method for data frames](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop.html), the syntax is:\n```python\ndf = df.drop(columns = col_names)\n```\nwhere `col_names` can be a single column name (str) or a list of column names. The `drop()` method does not modify the data frame in place, so you need to reassign the output.\n\n\n**Example**\n\nNow that we updated the units for flipper length and body mass, it makes sense to remove the previous columns to avoid duplicate information. We can do this using `drop()`:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# use a list of column names\n# reassign output of drop() to dataframe to update it\npenguins = penguins.drop(columns=['flipper_length_mm','body_mass_g'])\n\n# check columns\nprint(penguins.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['code', 'species', 'island', 'bill_length_mm', 'bill_depth_mm', 'sex',\n       'body_mass_kg', 'flipper_length_cm', 'observer'],\n      dtype='object')\n```\n:::\n:::\n\n\n<!--\n## Reordering columns and updating names\n-->\n\n## Updating values\n\nSometimes we want to update certain value within our data frame. We'll review some methods and best practices to do that in this section. \n\n### A single value\nWe can access a single value in a `pd.DataFrame` using the locators\n\n- [`at[]`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.at.html) to select by labels, or\n- [`iat[]`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.at.html) to select by position. \n\n\nThe syntax for `at[]` is:\n```python\ndf.at[single_index_value, 'column_name']\n```\nThink of `at[]` as the equivalent to `loc[]` when trying to access a single value.\n\n**Example**\n\nLet's say we want to know what was the bill length of the penguin in the fourth row. We can access that using `at[]`:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# access value at row with index=3 and column='bill_length_mm'\npenguins.at[3,'bill_length_mm']\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nnan\n```\n:::\n:::\n\n\nWe get this is an NA. Maybe we want to update it to 38.3 mm. We can do this with `at[]` too:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# update NA to 38.3\npenguins.at[3,'bill_length_mm'] = 38.3\n\n# check it was updated\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>code</th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>sex</th>\n      <th>body_mass_kg</th>\n      <th>flipper_length_cm</th>\n      <th>observer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>832</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>Male</td>\n      <td>3.75</td>\n      <td>18.1</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>494</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>Female</td>\n      <td>3.80</td>\n      <td>18.6</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>554</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>Female</td>\n      <td>3.25</td>\n      <td>19.5</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>338</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>38.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>606</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>Female</td>\n      <td>3.45</td>\n      <td>19.3</td>\n      <td>B</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIf we want to access or update a single value by position we use the `iat[]` locator.\n\n### Multiple values in a column\n\nWhat if we want to update multiple values in a column? We'll cover two cases: with a condition on the column values and by selecting a few values to update. \n\n\n#### By condition\n\nOften we want to create a new column where the new values depend on conditions on another column's values. \n\n**Example**\n\nSuppose we want to classify all penguins with body mass less than 3kg as small, penguins with body mass greater or equal than 3kg but less than 5kg as medium, and those with body mass greater or equal than 5kg as large. One way to add this information in a new column using `numpy.select()`:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# create a list with the conditions\nconditions = [penguins.body_mass_kg < 3, \n              (3 <= penguins.body_mass_kg) & (penguins.body_mass_kg < 5),\n              5 <= penguins.body_mass_kg]\n\n# create a list with the choices\nchoices = [\"small\",\n           \"medium\",\n           \"large\"]\n\n# add the selections using np.select\n# default = value for anything that falls outside conditions\npenguins['size'] = np.select(conditions, choices, default=np.nan)\n\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>code</th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>sex</th>\n      <th>body_mass_kg</th>\n      <th>flipper_length_cm</th>\n      <th>observer</th>\n      <th>size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>832</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>Male</td>\n      <td>3.75</td>\n      <td>18.1</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>494</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>Female</td>\n      <td>3.80</td>\n      <td>18.6</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>554</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>Female</td>\n      <td>3.25</td>\n      <td>19.5</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>338</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>38.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A</td>\n      <td>nan</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>606</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>Female</td>\n      <td>3.45</td>\n      <td>19.3</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<!-- \nhttps://stackoverflow.com/questions/54653356/case-when-function-from-r-to-python\n\nhttps://numpy.org/doc/stable/reference/generated/numpy.select.html\n-->\n\n#### By selecting values\n\nWhen we only want to update some values in a column we can do this by selecting this data using `loc` (if selecting by labels) or `iloc` (if selecting by position). The general sytanx for updating data with `loc` is:\n```python\n# modifies data in place\ndf.loc[row_selection, col_name] = new_values\n```\nwhere \n\n- `row_selection` is the rows we want to update, \n- `col_name` is a single column name, and \n- `new_values` is the new value or values we want. If using multiple values, then `new_values` must be of the same length as the number of rows selected, \n\n**Example**\n\nSuppose we want to update the \"Male\" value in the sex column to \"M\".\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# select rows with sex=male and update the values in the sex column\npenguins.loc[penguins.sex=='Male', 'sex'] = 'M'\n\n# check changes\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>code</th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>sex</th>\n      <th>body_mass_kg</th>\n      <th>flipper_length_cm</th>\n      <th>observer</th>\n      <th>size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>832</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>M</td>\n      <td>3.75</td>\n      <td>18.1</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>494</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>Female</td>\n      <td>3.80</td>\n      <td>18.6</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>554</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>Female</td>\n      <td>3.25</td>\n      <td>19.5</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>338</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>38.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A</td>\n      <td>nan</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>606</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>Female</td>\n      <td>3.45</td>\n      <td>19.3</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## `SettingWithCopyWarning`\n\nSuppose we want to similarly update the \"Female\" values in the sex column to \"F\". This is an example of another way we might try to do it, but it won't update our data frame:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# select rows and columns with two selection brackets [][] (chained indexing), instead of loc[]\n# then trying to update the values\npenguins[penguins.sex=='Female']['sex'] = 'F'\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/opt/python/3.7.13/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n```\n:::\n:::\n\n\nWhen we select the data we want to update using **chained indexing** (`[][]`) instead of `loc[]` we get a `SettingWithCopyWarning`. Wit this warning, `pandas` is trying to alert us to a potential bug. In this case that we did not update our data frame:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# no values were updated\npenguins.sex.unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\narray(['M', 'Female', nan], dtype=object)\n```\n:::\n:::\n\n\n::: {.callout-warning}\nThe `SettingWithCopyWarning` is letting us know our code is ambiguous and we need to double check the code is doing what we intended. In the words of the [`pandas` documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#why-does-assignment-fail-when-using-chained-indexing):\n\n> assigning to the product of chained indexing has inherently unpredictable results.\n\n:::\n\n<!-- MAKE SOME DIAGRAMS LIKE DATAQUEST https://www.dataquest.io/blog/settingwithcopywarning/ -->\n\nTo see what is going on we need to understand that some `pandas` operations return a view to your data, while others return a copy of your data.\n\n- **Views** are actual subsets of the original data, when we update them, we are modifying the original data frame. \n\n- **Copies** are unique objects, independent of our original data frames. When we update a copy we are not modifying the original data frame. \n\nDepending on what we are trying to do we might want to modify the original data frame or we might want to modify a copy. \n\n**Check-in** \n\nUpdate the \"Female\" values in the `penguins` data frame to \"F\". Don't use chained indexing\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# no chained indexing in assignment = no warning\npenguins.loc[penguins.sex=='Female','sex'] = 'F'\n\n# notice the values were updated now\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>code</th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>sex</th>\n      <th>body_mass_kg</th>\n      <th>flipper_length_cm</th>\n      <th>observer</th>\n      <th>size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>832</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>M</td>\n      <td>3.75</td>\n      <td>18.1</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>494</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>F</td>\n      <td>3.80</td>\n      <td>18.6</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>554</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>F</td>\n      <td>3.25</td>\n      <td>19.5</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>338</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>38.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A</td>\n      <td>nan</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>606</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>F</td>\n      <td>3.45</td>\n      <td>19.3</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Another `SettingWithCopyWarning`\n\nAnother common situation where `SettingWithCopyWarning` comes up is when we try to update a subset of a data frame we have already stored in a new variable. \n\n**Example** \n\nSuppose we only want to use data from Biscoe island and, after doing some analyses, we want to add a new column to it:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# select penguins from Biscoe island\nbiscoe = penguins[penguins.island=='Biscoe']\n\n# 50 lines of code here\n\n# add a column, we get a warning\nbiscoe['sample_col'] = 100\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/opt/python/3.7.13/lib/python3.7/site-packages/ipykernel_launcher.py:7: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n```\n:::\n:::\n\n\nIt might not seem like it, but we have a chained assignment here too. We essentialy wrote:\n\n```python\npenguins[penguins.island=='Biscoe']['sample_col'] = 100\n```\n\nTo fix this we can **take control of the copy-view situation and explicitely ask for a copy of the dataset when subsetting the data**. Use the `copy()` method to do this:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# make sure you get a new data frame with penguins from Biscoe island\nbiscoe = penguins[penguins.island=='Biscoe'].copy()\n\n# add a column, no warning\nbiscoe['sample_col'] = 100\n```\n:::\n\n\nNow we are sure we did not modify our initial data, but rather the `biscoe` data frame:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# new column is there\nbiscoe.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>code</th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>sex</th>\n      <th>body_mass_kg</th>\n      <th>flipper_length_cm</th>\n      <th>observer</th>\n      <th>size</th>\n      <th>sample_col</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>20</th>\n      <td>881</td>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>37.8</td>\n      <td>18.3</td>\n      <td>F</td>\n      <td>3.40</td>\n      <td>17.4</td>\n      <td>B</td>\n      <td>medium</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>754</td>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>37.7</td>\n      <td>18.7</td>\n      <td>M</td>\n      <td>3.60</td>\n      <td>18.0</td>\n      <td>A</td>\n      <td>medium</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>602</td>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>35.9</td>\n      <td>19.2</td>\n      <td>F</td>\n      <td>3.80</td>\n      <td>18.9</td>\n      <td>A</td>\n      <td>medium</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>352</td>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>38.2</td>\n      <td>18.1</td>\n      <td>M</td>\n      <td>3.95</td>\n      <td>18.5</td>\n      <td>B</td>\n      <td>medium</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>673</td>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>38.8</td>\n      <td>17.2</td>\n      <td>M</td>\n      <td>3.80</td>\n      <td>18.0</td>\n      <td>C</td>\n      <td>medium</td>\n      <td>100</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# and we are sure our original df wasn't modified\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>code</th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>sex</th>\n      <th>body_mass_kg</th>\n      <th>flipper_length_cm</th>\n      <th>observer</th>\n      <th>size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>832</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>M</td>\n      <td>3.75</td>\n      <td>18.1</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>494</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>F</td>\n      <td>3.80</td>\n      <td>18.6</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>554</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>F</td>\n      <td>3.25</td>\n      <td>19.5</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>338</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>38.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A</td>\n      <td>nan</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>606</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>F</td>\n      <td>3.45</td>\n      <td>19.3</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe `SettingWithCopyWarning` can often be tricky, there are also false positives and false negatives. Avoiding chained indexing and making a copy of your data frame subset whenever possible will save you from the usual pitfalls. \n\nTo learn more about the `SettingWithCopyWarning`, these are some articles that go into more depth:\n\n📖 [`pandas` Documentation -  Returning a view versus a copy](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy)\n\n📖 [Real Python-  SettingWithCopyWarning in pandas: Views vs Copies](https://realpython.com/pandas-settingwithcopywarning/#reader-comments)\n\n📖 [Dataquest - SettingwithCopyWarning: How to Fix This Warning in Pandas](https://www.dataquest.io/blog/settingwithcopywarning/)\n\n## References\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi:10.5281/zenodo.3960218.\n\n",
    "supporting": [
      "lesson-5-updating-dataframes_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}