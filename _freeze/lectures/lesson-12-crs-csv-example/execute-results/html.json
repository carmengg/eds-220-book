{
  "hash": "4545715e97b0099e77a1c11ed91ef87b",
  "result": {
    "markdown": "<!-- \nFixing the preview working directory\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\nhome = os.path.expanduser(\"~\")\nos.chdir(os.path.join(home,'eds-220-book'))\n```\n:::\n\n\nIgnore ShapelyDeprecationWarning warning in render\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport shapely\nimport warnings\nfrom shapely.errors import ShapelyDeprecationWarning\n\nwarnings.filterwarnings(\"ignore\", category=ShapelyDeprecationWarning) \n```\n:::\n\n\n-->\n\n# Updating CRS\n\nIn this lesson we will learn how to change the CRS of a `geopandas.GeoDataFrame` and how to make a CSV into a `geopandas.GeoDataFrame`, setting its CRS manually. \n\n## Data\nWe will use two datasets in this lesson. \nThe first one is a dataset from the U.S. Energy Information Administration (EIA) with [information about operable electric generating plants in the United States by energy source, as of May 2023](https://atlas.eia.gov/datasets/eia::power-plants/about). \nFollow these steps to download the datset for this lesson:\n\n1. Click on the \"Download\" button.\n2. On the side panel click on \"Download\" for the csv format of the file.\n\nYou can [access the metadata for this dataset here](https://eia.maps.arcgis.com/sharing/rest/content/items/bf5c5110b1b944d299bb683cdbd02d2a/info/metadata/metadata.xml?format=default&output=html). \n\nThe second dataset is a [TIGER shapefile from the United States Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341). \nTIGER stands for [Topologically Integrated Geographic Encoding and Referencing](https://en.wikipedia.org/wiki/Topologically_Integrated_Geographic_Encoding_and_Referencing). This used to be the data format the US Census distributed geospatial data, but since 2008 TIGER files are converted to shapefiles. \nWe will use the shapefiles for the US states. \nFollow these steps to download shapefile with the United States' states:\n\n1. At the bottom of the [2022 page](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341), under Download, click on \"Web Interface\"\n2. For year, select 2022, and for layer type select \"States (and equivalent)\". Click submit. \n3. Click on \"Download national file\".\n\nYou can check the [metadata for all the TIGER shapefiles here](https://www.census.gov/programs-surveys/geography/technical-documentation/complete-technical-documentation/tiger-geo-line.html). \nThe columns for this shapefile are:\n\n![Source: TIGER/Line Shapefiles Technical Documentation](/images/tiger_shp_columns.png)\n\n**Move both datasets to your working directory.**\n\n## `DataFrame` to `GeoDataFrame`\n\nLet's start by importing the necessary libraries:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport geopandas as gpd\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```\n:::\n\n\nAnd update pandas display options:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# display all column when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n```\n:::\n\n\nOur first step is to import the power plants dataset. \nNotice this is a csv, geopandas doesn't have a way to extract a geometry column from a csv, so we will need to create this geometry manually. \nWe start by reading in the data using `pandas`.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# import power plants data\npower_plants = pd.read_csv('data/Power_Plants.csv')\npower_plants.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>X</th>\n      <th>Y</th>\n      <th>OBJECTID</th>\n      <th>Plant_Code</th>\n      <th>Plant_Name</th>\n      <th>Utility_ID</th>\n      <th>Utility_Name</th>\n      <th>sector_name</th>\n      <th>Street_Address</th>\n      <th>City</th>\n      <th>County</th>\n      <th>State</th>\n      <th>Zip</th>\n      <th>PrimSource</th>\n      <th>source_desc</th>\n      <th>tech_desc</th>\n      <th>Install_MW</th>\n      <th>Total_MW</th>\n      <th>Bat_MW</th>\n      <th>Bio_MW</th>\n      <th>Coal_MW</th>\n      <th>Geo_MW</th>\n      <th>Hydro_MW</th>\n      <th>HydroPS_MW</th>\n      <th>NG_MW</th>\n      <th>Nuclear_MW</th>\n      <th>Crude_MW</th>\n      <th>Solar_MW</th>\n      <th>Wind_MW</th>\n      <th>Other_MW</th>\n      <th>Source</th>\n      <th>Period</th>\n      <th>Longitude</th>\n      <th>Latitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-160.497222</td>\n      <td>55.339722</td>\n      <td>11570</td>\n      <td>1</td>\n      <td>Sand Point</td>\n      <td>63560</td>\n      <td>TDX Sand Point Generating, LLC</td>\n      <td>Electric Utility</td>\n      <td>100 Power Plant Way</td>\n      <td>Sand Point</td>\n      <td>Aleutians East</td>\n      <td>Alaska</td>\n      <td>99661.0</td>\n      <td>petroleum</td>\n      <td>Petroleum = 1.3 MW, Wind = 0.4 MW</td>\n      <td>Petroleum Liquids; Onshore Wind Turbine;</td>\n      <td>3.7</td>\n      <td>1.7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.3</td>\n      <td>NaN</td>\n      <td>0.4</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305</td>\n      <td>-160.497222</td>\n      <td>55.339722</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-87.356823</td>\n      <td>33.458665</td>\n      <td>11571</td>\n      <td>2</td>\n      <td>Bankhead Dam</td>\n      <td>195</td>\n      <td>Alabama Power Co</td>\n      <td>Electric Utility</td>\n      <td>19001 Lock 17 Road</td>\n      <td>Northport</td>\n      <td>Tuscaloosa</td>\n      <td>Alabama</td>\n      <td>35476.0</td>\n      <td>hydroelectric</td>\n      <td>Hydroelectric = 53 MW</td>\n      <td>Conventional Hydroelectric</td>\n      <td>53.9</td>\n      <td>53.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>53.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305</td>\n      <td>-87.356823</td>\n      <td>33.458665</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-88.010300</td>\n      <td>31.006900</td>\n      <td>11572</td>\n      <td>3</td>\n      <td>Barry</td>\n      <td>195</td>\n      <td>Alabama Power Co</td>\n      <td>Electric Utility</td>\n      <td>North Highway 43</td>\n      <td>Bucks</td>\n      <td>Mobile</td>\n      <td>Alabama</td>\n      <td>36512.0</td>\n      <td>natural gas</td>\n      <td>Coal = 1118.5 MW, Natural Gas = 1296.2 MW</td>\n      <td>Conventional Steam Coal; Natural Gas Fired Com...</td>\n      <td>2569.5</td>\n      <td>2414.7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1118.5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1296.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305</td>\n      <td>-88.010300</td>\n      <td>31.006900</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# update column names to small caps\npower_plants.columns = power_plants.columns.str.lower()\n```\n:::\n\n\nFrom the csv documentation we know the longitude and latitude columns have the location of the power plants in lon/lat coordinates using the CRS WGS 84 (EPSG:4326). \nWe use this information to create a new `gpd.GeoDataFrame` from the `pd.DataFrame` using the GeoPandas function `points_from_xy()` like this:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\npower_plants = gpd.GeoDataFrame(power_plants, # data\n                                    # specify geometry column\n                                    geometry=gpd.points_from_xy(power_plants.longitude, \n                                             power_plants.latitude),\n                                    # specify CRS\n                                    crs='EPSG:4326'\n                    )\n```\n:::\n\n\nCheck we now have a geometry column:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\npower_plants.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x</th>\n      <th>y</th>\n      <th>objectid</th>\n      <th>plant_code</th>\n      <th>plant_name</th>\n      <th>utility_id</th>\n      <th>utility_name</th>\n      <th>sector_name</th>\n      <th>street_address</th>\n      <th>city</th>\n      <th>county</th>\n      <th>state</th>\n      <th>zip</th>\n      <th>primsource</th>\n      <th>source_desc</th>\n      <th>tech_desc</th>\n      <th>install_mw</th>\n      <th>total_mw</th>\n      <th>bat_mw</th>\n      <th>bio_mw</th>\n      <th>coal_mw</th>\n      <th>geo_mw</th>\n      <th>hydro_mw</th>\n      <th>hydrops_mw</th>\n      <th>ng_mw</th>\n      <th>nuclear_mw</th>\n      <th>crude_mw</th>\n      <th>solar_mw</th>\n      <th>wind_mw</th>\n      <th>other_mw</th>\n      <th>source</th>\n      <th>period</th>\n      <th>longitude</th>\n      <th>latitude</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-160.497222</td>\n      <td>55.339722</td>\n      <td>11570</td>\n      <td>1</td>\n      <td>Sand Point</td>\n      <td>63560</td>\n      <td>TDX Sand Point Generating, LLC</td>\n      <td>Electric Utility</td>\n      <td>100 Power Plant Way</td>\n      <td>Sand Point</td>\n      <td>Aleutians East</td>\n      <td>Alaska</td>\n      <td>99661.0</td>\n      <td>petroleum</td>\n      <td>Petroleum = 1.3 MW, Wind = 0.4 MW</td>\n      <td>Petroleum Liquids; Onshore Wind Turbine;</td>\n      <td>3.7</td>\n      <td>1.7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.3</td>\n      <td>NaN</td>\n      <td>0.4</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305</td>\n      <td>-160.497222</td>\n      <td>55.339722</td>\n      <td>POINT (-160.49722 55.33972)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-87.356823</td>\n      <td>33.458665</td>\n      <td>11571</td>\n      <td>2</td>\n      <td>Bankhead Dam</td>\n      <td>195</td>\n      <td>Alabama Power Co</td>\n      <td>Electric Utility</td>\n      <td>19001 Lock 17 Road</td>\n      <td>Northport</td>\n      <td>Tuscaloosa</td>\n      <td>Alabama</td>\n      <td>35476.0</td>\n      <td>hydroelectric</td>\n      <td>Hydroelectric = 53 MW</td>\n      <td>Conventional Hydroelectric</td>\n      <td>53.9</td>\n      <td>53.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>53.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305</td>\n      <td>-87.356823</td>\n      <td>33.458665</td>\n      <td>POINT (-87.35682 33.45867)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-88.010300</td>\n      <td>31.006900</td>\n      <td>11572</td>\n      <td>3</td>\n      <td>Barry</td>\n      <td>195</td>\n      <td>Alabama Power Co</td>\n      <td>Electric Utility</td>\n      <td>North Highway 43</td>\n      <td>Bucks</td>\n      <td>Mobile</td>\n      <td>Alabama</td>\n      <td>36512.0</td>\n      <td>natural gas</td>\n      <td>Coal = 1118.5 MW, Natural Gas = 1296.2 MW</td>\n      <td>Conventional Steam Coal; Natural Gas Fired Com...</td>\n      <td>2569.5</td>\n      <td>2414.7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1118.5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1296.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305</td>\n      <td>-88.010300</td>\n      <td>31.006900</td>\n      <td>POINT (-88.01030 31.00690)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's see some information about the CRS of our power plants dataset:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# print information about the \nprint('is geographic?: ', power_plants.crs.is_geographic)\nprint('is projected?: ', power_plants.crs.is_projected)\nprint('datum: ', power_plants.crs.datum)\nprint('ellipsoid: ', power_plants.crs.ellipsoid)\n\npower_plants.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nis geographic?:  True\nis projected?:  False\ndatum:  World Geodetic System 1984 ensemble\nellipsoid:  WGS 84\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n<Geographic 2D CRS: EPSG:4326>\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World.\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n\nNow that we have a geometry column and a CRS, we can plot our dataset:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\npower_plants.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-crs-csv-example_files/figure-html/cell-11-output-2.png){width=580 height=408}\n:::\n:::\n\n\n## TIGER shapefile\n\nNext, we import the TIGER shapefile:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# read-in data\nstates = gpd.read_file('data/tl_2022_us_state/tl_2022_us_state.shp')\n# update column names to small caps\nstates.columns = states.columns.str.lower()\n\nstates.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>region</th>\n      <th>division</th>\n      <th>statefp</th>\n      <th>statens</th>\n      <th>geoid</th>\n      <th>stusps</th>\n      <th>name</th>\n      <th>lsad</th>\n      <th>mtfcc</th>\n      <th>funcstat</th>\n      <th>aland</th>\n      <th>awater</th>\n      <th>intptlat</th>\n      <th>intptlon</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>5</td>\n      <td>54</td>\n      <td>01779805</td>\n      <td>54</td>\n      <td>WV</td>\n      <td>West Virginia</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>62266456923</td>\n      <td>489045863</td>\n      <td>+38.6472854</td>\n      <td>-080.6183274</td>\n      <td>POLYGON ((-77.75438 39.33346, -77.75422 39.333...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>5</td>\n      <td>12</td>\n      <td>00294478</td>\n      <td>12</td>\n      <td>FL</td>\n      <td>Florida</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>138962819934</td>\n      <td>45971472526</td>\n      <td>+28.3989775</td>\n      <td>-082.5143005</td>\n      <td>MULTIPOLYGON (((-83.10874 24.62949, -83.10711 ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>3</td>\n      <td>17</td>\n      <td>01779784</td>\n      <td>17</td>\n      <td>IL</td>\n      <td>Illinois</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>143778515726</td>\n      <td>6216539665</td>\n      <td>+40.1028754</td>\n      <td>-089.1526108</td>\n      <td>POLYGON ((-87.89243 38.28285, -87.89334 38.282...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>4</td>\n      <td>27</td>\n      <td>00662849</td>\n      <td>27</td>\n      <td>MN</td>\n      <td>Minnesota</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>206244837557</td>\n      <td>18937184315</td>\n      <td>+46.3159573</td>\n      <td>-094.1996043</td>\n      <td>POLYGON ((-95.31989 48.99892, -95.31747 48.998...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>5</td>\n      <td>24</td>\n      <td>01714934</td>\n      <td>24</td>\n      <td>MD</td>\n      <td>Maryland</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>25151771744</td>\n      <td>6979295311</td>\n      <td>+38.9466584</td>\n      <td>-076.6744939</td>\n      <td>POLYGON ((-75.75600 39.24607, -75.75579 39.243...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's see some information about the CRS of our states geodataframe:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# print information about the CRS\nstates.crs\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n<Geographic 2D CRS: EPSG:4269>\nName: NAD83\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: North America - onshore and offshore: Canada - Alberta; British Columbia; Manitoba; New Brunswick; Newfoundland and Labrador; Northwest Territories; Nova Scotia; Nunavut; Ontario; Prince Edward Island; Quebec; Saskatchewan; Yukon. Puerto Rico. United States (USA) - Alabama; Alaska; Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Hawaii; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming. US Virgin Islands. British Virgin Islands.\n- bounds: (167.65, 14.92, -47.74, 86.46)\nDatum: North American Datum 1983\n- Ellipsoid: GRS 1980\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n\nAnd plot it:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nstates.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-crs-csv-example_files/figure-html/cell-14-output-2.png){width=566 height=183}\n:::\n:::\n\n\n Notice the map covers a big extension, this is because, according to the TIGER shapefiles metadata:\n \n > In addition to the fifty states, the Census Bureau treats the District of Columbia, Puerto Rico, and the Island areas (American Samoa, the Commonwealth of the Northern Mariana Islands, Guam, and the U.S. Virgin Islands) as statistical equivalents of states for the purpose of data presentation. \n\n In [this US Census Bureau file](https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf) we can see the what each code for the region, division, and state corresponds to. \n These should be numeric codes, so we can start by updating these columns:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n # notice region, division, and statefp are strings (object) types\n states.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nregion        object\ndivision      object\nstatefp       object\nstatens       object\ngeoid         object\nstusps        object\nname          object\nlsad          object\nmtfcc         object\nfuncstat      object\naland          int64\nawater         int64\nintptlat      object\nintptlon      object\ngeometry    geometry\ndtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n # update dtypes of code columns\nstates.region = states.region.astype('int')\nstates.division = states.division.astype('int')\nstates.statefp = states.statefp.astype('int')\n```\n:::\n\n\n States corresponds to regions 1 through 4. \n However, there's also a code 9 for the region. \n These rows correspond to non-state regions:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n print(states.region.unique())\n states[states.region==9]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3 2 1 4 9]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>region</th>\n      <th>division</th>\n      <th>statefp</th>\n      <th>statens</th>\n      <th>geoid</th>\n      <th>stusps</th>\n      <th>name</th>\n      <th>lsad</th>\n      <th>mtfcc</th>\n      <th>funcstat</th>\n      <th>aland</th>\n      <th>awater</th>\n      <th>intptlat</th>\n      <th>intptlon</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>34</th>\n      <td>9</td>\n      <td>0</td>\n      <td>78</td>\n      <td>01802710</td>\n      <td>78</td>\n      <td>VI</td>\n      <td>United States Virgin Islands</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>348021909</td>\n      <td>1550236187</td>\n      <td>+18.3392359</td>\n      <td>-064.9500433</td>\n      <td>MULTIPOLYGON (((-64.76834 18.26033, -64.77074 ...</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>9</td>\n      <td>0</td>\n      <td>69</td>\n      <td>01779809</td>\n      <td>69</td>\n      <td>MP</td>\n      <td>Commonwealth of the Northern Mariana Islands</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>472292521</td>\n      <td>4644252458</td>\n      <td>+15.0010865</td>\n      <td>+145.6181702</td>\n      <td>MULTIPOLYGON (((145.05897 14.12500, 145.06302 ...</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>9</td>\n      <td>0</td>\n      <td>66</td>\n      <td>01802705</td>\n      <td>66</td>\n      <td>GU</td>\n      <td>Guam</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>543555849</td>\n      <td>934337453</td>\n      <td>+13.4417451</td>\n      <td>+144.7719021</td>\n      <td>POLYGON ((144.56343 13.44806, 144.56357 13.450...</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>9</td>\n      <td>0</td>\n      <td>60</td>\n      <td>01802701</td>\n      <td>60</td>\n      <td>AS</td>\n      <td>American Samoa</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>197759069</td>\n      <td>1307243751</td>\n      <td>-14.2671590</td>\n      <td>-170.6682674</td>\n      <td>MULTIPOLYGON (((-170.53809 -14.33613, -170.548...</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>9</td>\n      <td>0</td>\n      <td>72</td>\n      <td>01779808</td>\n      <td>72</td>\n      <td>PR</td>\n      <td>Puerto Rico</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>8869029522</td>\n      <td>4922249087</td>\n      <td>+18.2176480</td>\n      <td>-066.4107992</td>\n      <td>MULTIPOLYGON (((-66.32322 17.87767, -66.33170 ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n Also, we can use the Alaska's statfep code 2 to see that this is the state causing the long map:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n states[(states.statefp!=2) & (states.region!=9)].plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-crs-csv-example_files/figure-html/cell-18-output-2.png){width=566 height=214}\n:::\n:::\n\n\n## Data Preparation\n\nFor the pupose of our map (and lesson), we want to keep only the states but remove western islands of Alaska. \nBefore we do that *we need to check* there is no power plant data over these islands. \nWe can do this by plotting the power plants dataset over the states. \n\n### Selection\n\nA simple first step is to rewrite the states geodataframe to only include polygons for the US states:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nstates = states[states.region!=9]\npower_plants = power_plants[power_plants.state != 'Puerto Rico']\n```\n:::\n\n\n### Reproject (change CRS)\nRemember these two datasets have different CRSs:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# check if CRSs match\n# we SHOULD NOT combine data with different CRSs\nstates.crs == power_plants.crs\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nFalse\n```\n:::\n:::\n\n\nChanging CRS in GeoPandas is very simple using the `to_crs()` method for `gpd.GeoDataFrame`s. \nThe general syntax is:\n```python\nupdated_geodf = geodf.to_crs(new_crs)\n```\nwhere:\n\n- `updated_geodf` is the output of the method,\n- `geodf` is the `gpd.GeoDataFrame` we want to transform, \n- `new_crs` an object of type CRS, the CRS we want to convert to. \n\nIn our case, we will convert the states `gpd.GeoDataFrame` to match the CRS of the power_plants `gpd.GeoDataFrame`:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# reproject states to power_plants.crs\nstates = states.to_crs(power_plants.crs)\nprint(states.crs == power_plants.crs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\nNow we can visually confirm there are no power statoins in the western islands of Alaska:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# plot both datasets\nfig, ax = plt.subplots()\nstates.plot(ax=ax)\npower_plants.plot(ax=ax, color='red', alpha=0.2)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-crs-csv-example_files/figure-html/cell-22-output-1.png){width=566 height=150}\n:::\n:::\n\n\n### Clipping\n<!--\nhttps://medium.com/@alex_44314/use-python-geopandas-to-make-a-us-map-with-alaska-and-hawaii-39a9f5c222c6\n-->\n\nTo clip to our interest area we will first create a GeoJSON file with a bounding box by going to [http://geojson.io](http://geojson.io). \nAfter drawing the bounding box, copy paste it into a new file with extension .json. \n\n::: {.callout-note}\n## Creating bounding boxes\nThis is one way to create a bounding box as a separate file. We will learn other ways of creating polygons using `shapely` later on. \n:::\n\nWe can now read in our bounding box. Remember all GeoJSOn files have a CRS WGS84/EPSG:4326:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# import bounding box\nbbox = gpd.read_file('data/bounding_box.json')\n\n# look at CRS\nprint(bbox.crs)\n\n# check bbox CRS matches states\nprint(bbox.crs == states.crs)\n\n# check data frame\nbbox\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nepsg:4326\nTrue\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>POLYGON ((-180.98811 71.35454, -180.98811 15.2...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSince these are in the same CRS, we can go ahead and plot them:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\nstates.plot(ax=ax)\nbbox.plot(ax=ax, color='none', edgecolor='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-crs-csv-example_files/figure-html/cell-24-output-1.png){width=566 height=153}\n:::\n:::\n\n\nClipping a `gpd.GeoDataFrame` using a bounding box is easy using the [`clip()` method](https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.clip.html). \nThe general syntax is:\n```python\nupdated_geodf = geodf.clip(mask)\n```\nwhere:\n\n- `updated_geodf` is the output of the method,\n- `geodf` is the `gpd.GeoDataFrame` we want to clip, \n- `mask` is a `gpd.GeoDataFrame` with the polygon(s) we want to use for clipping. This `mask` must be in the same CRS as `geodf`!\n\nIn our case:\n\n```python\nbb_states = states.clip(bbox)\nbb_states.plot()\n```\n\n## Plotting\n\n\n```python\nfig, ax = plt.subplots(figsize=(14, 10))\n\n# remove the axis box around the map\nax.axis('off')\n# annotate the data source\nax.annotate(\"Data: U.S. Energy Information Administration (EIA), accessed Oct 30, 2023 \\nhttps://atlas.eia.gov/datasets/eia::power-plants/about\", \n            xy=(0.25, .06), \n            xycoords='figure fraction', \n            fontsize=14, \n            color='#555555')\n\n# update title\nax.set_title('Operable electric generating plants in the United States',\nfontsize=22)\n\n# add states \nbb_states.plot(ax=ax,\n               color='none',\n               edgecolor = '#362312')\n\n# add electric power plants colored by energy source\npower_plants.plot(ax=ax, \n                  column='primsource',\n                  legend=True,\n                  markersize = 4,\n                  cmap='tab20',\n                  alpha=0.5,\n                  # adjust legend location\n                  legend_kwds={'loc': \"upper right\", \n                                'title':'Primary energy source',\n                                'title_fontsize':'medium', \n                        'fontsize':'small'})\n\nleg = ax.get_legend()\n```\n<!--\n\nhttps://www.flexprojector.com\n\nhttps://www.earthdatascience.org/courses/scientists-guide-to-plotting-data-in-python/plot-spatial-data/customize-vector-plots/python-customize-map-legends-geopandas/\n\nhttps://stackoverflow.com/questions/74143732/customize-legend-labels-in-geopandas\n-->\n\n",
    "supporting": [
      "lesson-12-crs-csv-example_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}