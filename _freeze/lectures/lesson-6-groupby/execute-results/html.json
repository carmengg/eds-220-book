{
  "hash": "706974e2f64ebfb89a89bb4e735d552e",
  "result": {
    "markdown": "# `groupby()`\n\nIn this section we will go over the `groupby()` function and the split-apply-combine strategy.\n\n<!--\nMake a short intro about summarizing values in a whole column.\n-->\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd \nimport seaborn as sns\n\n# read in data\npenguins = pd.read_csv(\"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv\")\n\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Grouping\n\nOur penguins data is naturally split into different groups: there are three different species, two sexes and three islands. Often, we want to calculate a certain statistic for each group. For example, suppose we want to calculate the average flipper length per species.  How would we do this \"by hand\"?\n\n0. We start with our data and notice there are multiple species in the `species` column.\n\n1. We split our original table to group all observations from the same species together.\n\n2. We calculate the average flipper length for each of the groups we formed.\n\n3. Then we combine the values for average flipper length per species into a single table.\n\nThis is known as the **Split-Apply-Combine strategy**. This strategy follows the three steps we explained above:\n\n1. **Split**: Split the data into logical groups (e.g. species, sex, island, etc.)\n\n2. **Apply**: Calculate some summary statistic on each group (e.g. average flipper length by species, number of individuals per island, body mass by sex, etc.)\n\n3. **Combine**: Combine the statistic calculated on each group back together.\n\n![Split-apply-combine to calculate mean flipper length](/images/lesson-3-plot/split-apply-combine-penguins-diagram.png)\n\nIn Python we can use the `groupby()` method to split (i.e. group) the data into different categories. The general syntax for `groupby()` is\n\n```python\ndf.groupby(columns_to_group_by)\n```\nwhere most often we will have\n`columns_to_group_by` = a single column name (string) or a list of column names, the unique values of the column (or columns) will be used as the groups of the data frame\n\nLet's see an example.\n\nFirst, if we don't use the `groupby()` method, we obtain the average for the whole flipper length column:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npenguins.flipper_length_mm.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n200.91520467836258\n```\n:::\n:::\n\n\nTo get the mean flipper length by species we first group our dataset by the species column's data:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# average flipper length per species\npenguins.groupby(\"species\").flipper_length_mm.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nspecies\nAdelie       189.953642\nChinstrap    195.823529\nGentoo       217.186992\nName: flipper_length_mm, dtype: float64\n```\n:::\n:::\n\n\nThere's a lot going on there, let's break it down (remember the `.` can be read as \"and then...\")\n\n- start with the `penguins` data frame, and then...\n- use `groupby()` to group the data frame by `species` values, and then...\n- select the `'flipper_length_mm'` column, and then...\n- calculate the `mean()`\n\n\nWe can store our new data frame as `avg_flipper` and then graph it as a bar plot:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# average flipper length per species\navg_flipper = penguins.groupby(\"species\").flipper_length_mm.mean()\n\n# sort in descending order\n# remember to reassign to actually update data\navg_flipper = avg_flipper.sort_values(ascending=False)\n\n# plot as a bar plot\navg_flipper.plot(kind='bar',\n                 title='Average flipper length by species',\n                 ylabel='Flipper length (mm)',\n                 rot=360  # rotation for ticks \n                 ) \n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<AxesSubplot:title={'center':'Average flipper length by species'}, xlabel='species', ylabel='Flipper length (mm)'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-6-groupby_files/figure-html/cell-5-output-2.png){width=593 height=449}\n:::\n:::\n\n\nWe can also group by combinations of columns. For example, suppose we want to know what was the number of penguins in every island on different years. We can use the `count()` method to count the number of non-NA values in each column like this:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\npenguins.count()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nspecies              344\nisland               344\nbill_length_mm       342\nbill_depth_mm        342\nflipper_length_mm    342\nbody_mass_g          342\nsex                  333\nyear                 344\ndtype: int64\n```\n:::\n:::\n\n\nWhen we group by island and year we get the count of non-NA values for each column divided for each combination of island and year:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\npenguins.groupby(['island','year']).count()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>species</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n    </tr>\n    <tr>\n      <th>island</th>\n      <th>year</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Biscoe</th>\n      <th>2007</th>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n      <td>43</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>64</td>\n      <td>64</td>\n      <td>64</td>\n      <td>64</td>\n      <td>64</td>\n      <td>63</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>60</td>\n      <td>59</td>\n      <td>59</td>\n      <td>59</td>\n      <td>59</td>\n      <td>57</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Dream</th>\n      <th>2007</th>\n      <td>46</td>\n      <td>46</td>\n      <td>46</td>\n      <td>46</td>\n      <td>46</td>\n      <td>45</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>34</td>\n      <td>34</td>\n      <td>34</td>\n      <td>34</td>\n      <td>34</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Torgersen</th>\n      <th>2007</th>\n      <td>20</td>\n      <td>19</td>\n      <td>19</td>\n      <td>19</td>\n      <td>19</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's say we want to plot the surveyed population per year and island. We could then use a \"one liner\" to do it in this way:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\npenguins.groupby(['island','year']).count().species.sort_values().plot(kind='bar')\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<AxesSubplot:xlabel='island,year'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-6-groupby_files/figure-html/cell-8-output-2.png){width=566 height=534}\n:::\n:::\n\n\n<!--\nTalk about what is `groupby()` : lazy method\n-->\n\n### Check-in\n\n(1) Use `groupby` and the `max()` method for data frames to calculate the maximum value of penguin's body mass by year and species.\n\n<!--\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\npenguins.groupby(['year','species']).body_mass_g.max()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nyear  species  \n2007  Adelie       4675.0\n      Chinstrap    4400.0\n      Gentoo       6300.0\n2008  Adelie       4700.0\n      Chinstrap    4800.0\n      Gentoo       6000.0\n2009  Adelie       4775.0\n      Chinstrap    4450.0\n      Gentoo       6000.0\nName: body_mass_g, dtype: float64\n```\n:::\n:::\n\n\n-->\n\n(2) Use (1) to display the highest body masses per year and species as a bar plot in descending order.\n\n<!--\npenguins.groupby(['year','species']).body_mass_g.max().sort_values(ascending=False).plot(kind='bar')\n-->\n\n\n## Acknowledgmenets\nThis section is based on this [NCEAS Learning Hub R lesson.](https://learning.nceas.ucsb.edu/2023-06-delta/session_11.html#summary-statistics-using-group_by-and-summarize)\n\n Halina Do-Linh, Carmen Galaz García, Matthew B. Jones, Camila Vargas Poulsen. 2023. Open Science Synthesis training Week 1. NCEAS Learning Hub & Delta Stewardship Council.\n\n",
    "supporting": [
      "lesson-6-groupby_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}