{
  "hash": "e1654c32105ad882007fcca91588720e",
  "result": {
    "markdown": "# Subsetting\n\nIn this lesson we will learn different methods to select data from a `pandas.DataFrame`.\n\n## Subsetting a `pandas.DataFrame`\n\nLike it's often the case when working with `pandas`, there are *many* ways in which we can subset a data frame. We will review the core methods to do this. \n<!--\nThere are two ways to subset data in a Data Frame: by position and by label. \n\n* **Subsetting by label** means we want to select data from our data frame using the *names* of the columns or the index.\n\n* **Subsetting by position** means we want to select data from our data frame based on the data's *order* in the data frame.\n-->\n\nFor all examples we will use simplified data (glacial_loss.csv) from the National Snow and Ice Data Center ([Original dataset](​http://dx.doi.org/10.7265/N52N506F)). The column descriptions are:\n\n- **year**: ​calendar year\n- **europe - antarctica**: ​change in glacial volume (km3​ ​) in each region that year\n- **global_glacial_volume_change**: ​cumulative​ global glacial volume change (km3),\nstarting in 1961\n- **annual_sea_level_rise**: ​annual rise in sea level (mm)\n- **cumulative_sea_level_rise**:​ cumulative rise in sea level (mm) since 1961\n\nFirst, we read-in the file and get some baisc information about this data frame:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# import pandas\nimport pandas as pd\n\n# read in file\ndf = pd.read_csv('data/lesson-1/glacial_loss.csv')\n\n# see the first five rows\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>europe</th>\n      <th>arctic</th>\n      <th>alaska</th>\n      <th>asia</th>\n      <th>north_america</th>\n      <th>south_america</th>\n      <th>antarctica</th>\n      <th>global_glacial_volume_change</th>\n      <th>annual_sea_level_rise</th>\n      <th>cumulative_sea_level_rise</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1961</td>\n      <td>-5.128903</td>\n      <td>-108.382987</td>\n      <td>-18.721190</td>\n      <td>-32.350759</td>\n      <td>-14.359007</td>\n      <td>-4.739367</td>\n      <td>-35.116389</td>\n      <td>-220.823515</td>\n      <td>0.610010</td>\n      <td>0.610010</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1962</td>\n      <td>5.576282</td>\n      <td>-173.252450</td>\n      <td>-24.324790</td>\n      <td>-4.675440</td>\n      <td>-2.161842</td>\n      <td>-13.694367</td>\n      <td>-78.222887</td>\n      <td>-514.269862</td>\n      <td>0.810625</td>\n      <td>1.420635</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1963</td>\n      <td>-10.123105</td>\n      <td>-0.423751</td>\n      <td>-2.047567</td>\n      <td>-3.027298</td>\n      <td>-27.535881</td>\n      <td>3.419633</td>\n      <td>3.765109</td>\n      <td>-550.575640</td>\n      <td>0.100292</td>\n      <td>1.520927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1964</td>\n      <td>-4.508358</td>\n      <td>20.070148</td>\n      <td>0.477800</td>\n      <td>-18.675385</td>\n      <td>-2.248286</td>\n      <td>20.732633</td>\n      <td>14.853096</td>\n      <td>-519.589859</td>\n      <td>-0.085596</td>\n      <td>1.435331</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1965</td>\n      <td>10.629385</td>\n      <td>43.695389</td>\n      <td>-0.115332</td>\n      <td>-18.414602</td>\n      <td>-19.398765</td>\n      <td>6.862102</td>\n      <td>22.793484</td>\n      <td>-473.112003</td>\n      <td>-0.128392</td>\n      <td>1.306939</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# get column names\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nIndex(['year', 'europe', 'arctic', 'alaska', 'asia', 'north_america',\n       'south_america', 'antarctica', 'global_glacial_volume_change',\n       'annual_sea_level_rise', 'cumulative_sea_level_rise'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# check the data types of each column\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nyear                              int64\neurope                          float64\narctic                          float64\nalaska                          float64\nasia                            float64\nnorth_america                   float64\nsouth_america                   float64\nantarctica                      float64\nglobal_glacial_volume_change    float64\nannual_sea_level_rise           float64\ncumulative_sea_level_rise       float64\ndtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# data frame's shape: output is a tuple (# rows, # columns)\ndf.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n(43, 11)\n```\n:::\n:::\n\n\n### Selecting a single column...\n\n#### ...by column name\nThis is the simplest case for selecting data. Suppose we are interested in the annual sea level rise. Then we can access that single column in this way:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# seelect a single column by using square brackets []\nannual_rise = df['annual_sea_level_rise']\n\n# check the type of the ouput\nprint(type(annual_rise))\n\nannual_rise.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.series.Series'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n0    0.610010\n1    0.810625\n2    0.100292\n3   -0.085596\n4   -0.128392\nName: annual_sea_level_rise, dtype: float64\n```\n:::\n:::\n\n\nSince we only selected a single column the output is a `pandas.Series`. \n\n:::{.callout-note}\n## `pd.DataFrame` = dictionary of columns\nRemember we can think of a `pandas.DataFrame` as a dictionary of its columns? Then we can access a single column using the column name as the key, just like we would do in a dictionary. That is the  we just used: `df['column_name']`.\n:::\n\nThis is an example of **selecting by label**, which means we want to select data from our data frame using the *names* of the columns, *not their position*.\n\n\n#### ... with attribute syntax\n\nWe can also access a single column by using attribute syntax:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nannual_rise_2 = df.annual_sea_level_rise\nannual_rise_2.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0    0.610010\n1    0.810625\n2    0.100292\n3   -0.085596\n4   -0.128392\nName: annual_sea_level_rise, dtype: float64\n```\n:::\n:::\n\n\n### Selecting multiple columns...\n\n#### ... using a list of column names\nThis is another example of selecting by labels. We just need to pass a list with the column names to the square brackets `[]`. For example, say we want to look at the change in glacial volume in Europe and Asia, then we can select those columns like this:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# select columns with names \"europe\" and \"asia\"\neurope_asia = df[['europe','asia']]\n```\n:::\n\n\nNotice there are double square brackets. This is because we are passing the list of names `['europe','asia']` to the selection brakcets `[]`. \n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# check the type of the resulting selection\nprint(type(europe_asia))\n\n# check the shape of the selection\nprint((europe_asia.shape))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\n(43, 2)\n```\n:::\n:::\n\n\n#### ... using a slice\nYet another example of selecting by label! In this case we will use the `loc` selection. The general syntax is \n\n```python\ndf.loc[ row-selection , column-selection]\n```\nwhere `row-selection` and `column-selection` are the rows and columns we want to subset from the data frame. \n\nLet's start by a simple example, where we want to select a slice of columns, say the change in glacial volume per year in all regions. This corresponds to all columns between `europe` and `antarctica`.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# select all columns between 'arctic' and 'antarctica'\nall_regions = df.loc[:,'europe':'antarctica']\nall_regions.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>europe</th>\n      <th>arctic</th>\n      <th>alaska</th>\n      <th>asia</th>\n      <th>north_america</th>\n      <th>south_america</th>\n      <th>antarctica</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-5.128903</td>\n      <td>-108.382987</td>\n      <td>-18.721190</td>\n      <td>-32.350759</td>\n      <td>-14.359007</td>\n      <td>-4.739367</td>\n      <td>-35.116389</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.576282</td>\n      <td>-173.252450</td>\n      <td>-24.324790</td>\n      <td>-4.675440</td>\n      <td>-2.161842</td>\n      <td>-13.694367</td>\n      <td>-78.222887</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-10.123105</td>\n      <td>-0.423751</td>\n      <td>-2.047567</td>\n      <td>-3.027298</td>\n      <td>-27.535881</td>\n      <td>3.419633</td>\n      <td>3.765109</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-4.508358</td>\n      <td>20.070148</td>\n      <td>0.477800</td>\n      <td>-18.675385</td>\n      <td>-2.248286</td>\n      <td>20.732633</td>\n      <td>14.853096</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>10.629385</td>\n      <td>43.695389</td>\n      <td>-0.115332</td>\n      <td>-18.414602</td>\n      <td>-19.398765</td>\n      <td>6.862102</td>\n      <td>22.793484</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNotice two things:\n\n- we used the colon `:` as the `row-selection` parameter, which means \"select all the rows\"\n- the slice of the data frame we got includes both endpoints of the slice `'arctic':'antarctica'`. In other words we get the `europe` column *and* the `antarctica` column. This is different from how slicing works in base Python and NumPy, where the endpoint is not included.\n\n### Selecting rows...\nNow that we are familiar with some methods for selecting columns, let's move on to selecting rows. \n\n#### ... using a condition\nSelecting which rows satisfy a particular condition is, in my experience, the most usual kind of row subsetting. The general syntax for this type of selection is `df[condition_on_rows]`. For example, suppose we are intersted in all data after 1996. We can select those rows in this way:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# select all rows with year > 1996\nafter_96 = df[df['year']>1996]\nafter_96\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>europe</th>\n      <th>arctic</th>\n      <th>alaska</th>\n      <th>asia</th>\n      <th>north_america</th>\n      <th>south_america</th>\n      <th>antarctica</th>\n      <th>global_glacial_volume_change</th>\n      <th>annual_sea_level_rise</th>\n      <th>cumulative_sea_level_rise</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>36</th>\n      <td>1997</td>\n      <td>-13.724106</td>\n      <td>-24.832246</td>\n      <td>-167.229145</td>\n      <td>-34.406403</td>\n      <td>-27.680661</td>\n      <td>-38.213286</td>\n      <td>-20.179090</td>\n      <td>-4600.686013</td>\n      <td>0.909625</td>\n      <td>12.709077</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>1998</td>\n      <td>-13.083338</td>\n      <td>-110.429302</td>\n      <td>-107.879027</td>\n      <td>-58.115702</td>\n      <td>30.169987</td>\n      <td>-3.797978</td>\n      <td>-48.129928</td>\n      <td>-4914.831966</td>\n      <td>0.867807</td>\n      <td>13.576884</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>1999</td>\n      <td>-8.039555</td>\n      <td>-64.644068</td>\n      <td>-87.714653</td>\n      <td>-26.211723</td>\n      <td>5.888512</td>\n      <td>-8.038630</td>\n      <td>-40.653001</td>\n      <td>-5146.368231</td>\n      <td>0.639603</td>\n      <td>14.216487</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>2000</td>\n      <td>-17.008590</td>\n      <td>-96.494055</td>\n      <td>-44.445000</td>\n      <td>-37.518173</td>\n      <td>-29.191986</td>\n      <td>-2.767698</td>\n      <td>-58.873830</td>\n      <td>-5435.317175</td>\n      <td>0.798202</td>\n      <td>15.014688</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>2001</td>\n      <td>-8.419109</td>\n      <td>-145.415483</td>\n      <td>-55.749505</td>\n      <td>-35.977022</td>\n      <td>-0.926134</td>\n      <td>7.553503</td>\n      <td>-86.774675</td>\n      <td>-5764.039931</td>\n      <td>0.908074</td>\n      <td>15.922762</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>2002</td>\n      <td>-3.392361</td>\n      <td>-48.718943</td>\n      <td>-87.120000</td>\n      <td>-36.127226</td>\n      <td>-27.853498</td>\n      <td>-13.484593</td>\n      <td>-30.203960</td>\n      <td>-6013.225500</td>\n      <td>0.688358</td>\n      <td>16.611120</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>2003</td>\n      <td>-3.392361</td>\n      <td>-48.718943</td>\n      <td>-67.253634</td>\n      <td>-36.021991</td>\n      <td>-75.066475</td>\n      <td>-13.223430</td>\n      <td>-30.203960</td>\n      <td>-6289.640976</td>\n      <td>0.763579</td>\n      <td>17.374699</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's break down what is happening here. In this case the condition for our rows is `df['year']>1996`, this checks which rows have a value greater than 1996 in the year column. Let's see this explicitely:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# check the type of df['year']>1996\nprint(type(df['year']>1996))\n\ndf['year']>1996\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.series.Series'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n0     False\n1     False\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\n12    False\n13    False\n14    False\n15    False\n16    False\n17    False\n18    False\n19    False\n20    False\n21    False\n22    False\n23    False\n24    False\n25    False\n26    False\n27    False\n28    False\n29    False\n30    False\n31    False\n32    False\n33    False\n34    False\n35    False\n36     True\n37     True\n38     True\n39     True\n40     True\n41     True\n42     True\nName: year, dtype: bool\n```\n:::\n:::\n\n\nThe output is a `pandas.Series` with boolean values (`True` or `False`) indicating which rows satisfy the condition year>1996. When we pass such a series of boolean values to the selection brackets `[]` we keep only those rows with a `True` value. \n\nHere's another example of using a condition. Suppose we want to look at data from years 1970 to 1979. One way of doing this is to use the `in` operator in our condition:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nseventies = df[df['year'].isin(range(1970,1980))]\nseventies\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>europe</th>\n      <th>arctic</th>\n      <th>alaska</th>\n      <th>asia</th>\n      <th>north_america</th>\n      <th>south_america</th>\n      <th>antarctica</th>\n      <th>global_glacial_volume_change</th>\n      <th>annual_sea_level_rise</th>\n      <th>cumulative_sea_level_rise</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9</th>\n      <td>1970</td>\n      <td>-6.452316</td>\n      <td>-24.494667</td>\n      <td>-0.125296</td>\n      <td>-36.120199</td>\n      <td>11.619790</td>\n      <td>11.636911</td>\n      <td>4.400377</td>\n      <td>-999.018177</td>\n      <td>0.110225</td>\n      <td>2.759719</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1971</td>\n      <td>0.414711</td>\n      <td>-42.904189</td>\n      <td>28.103328</td>\n      <td>-8.702938</td>\n      <td>-9.964542</td>\n      <td>1.061299</td>\n      <td>-6.735536</td>\n      <td>-1038.104459</td>\n      <td>0.107973</td>\n      <td>2.867692</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>1972</td>\n      <td>-5.144729</td>\n      <td>-27.004031</td>\n      <td>-22.143350</td>\n      <td>-40.883357</td>\n      <td>32.363730</td>\n      <td>-14.968034</td>\n      <td>-6.223849</td>\n      <td>-1122.885506</td>\n      <td>0.234202</td>\n      <td>3.101894</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1973</td>\n      <td>4.081090</td>\n      <td>9.839444</td>\n      <td>22.985188</td>\n      <td>-31.432594</td>\n      <td>-20.883232</td>\n      <td>2.103649</td>\n      <td>10.539823</td>\n      <td>-1125.677743</td>\n      <td>0.007713</td>\n      <td>3.109607</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>1974</td>\n      <td>1.545615</td>\n      <td>-40.126998</td>\n      <td>-29.517874</td>\n      <td>-43.861622</td>\n      <td>-23.991402</td>\n      <td>-21.338825</td>\n      <td>4.419343</td>\n      <td>-1279.964287</td>\n      <td>0.426206</td>\n      <td>3.535813</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>1975</td>\n      <td>7.431192</td>\n      <td>-32.410467</td>\n      <td>-44.094084</td>\n      <td>-43.357442</td>\n      <td>-30.858810</td>\n      <td>-2.368842</td>\n      <td>-7.775315</td>\n      <td>-1434.818037</td>\n      <td>0.427773</td>\n      <td>3.963586</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>1976</td>\n      <td>3.986753</td>\n      <td>21.686639</td>\n      <td>-28.234725</td>\n      <td>-67.292125</td>\n      <td>-12.534421</td>\n      <td>-19.465358</td>\n      <td>19.250607</td>\n      <td>-1518.185129</td>\n      <td>0.230296</td>\n      <td>4.193882</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>1977</td>\n      <td>4.891410</td>\n      <td>-33.123010</td>\n      <td>-5.662139</td>\n      <td>-62.165684</td>\n      <td>-15.905332</td>\n      <td>2.654950</td>\n      <td>-23.727249</td>\n      <td>-1652.453400</td>\n      <td>0.370907</td>\n      <td>4.564788</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>1978</td>\n      <td>8.404591</td>\n      <td>-77.561015</td>\n      <td>-12.503384</td>\n      <td>-22.858040</td>\n      <td>-31.097609</td>\n      <td>7.127708</td>\n      <td>-9.140167</td>\n      <td>-1791.355022</td>\n      <td>0.383706</td>\n      <td>4.948495</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>1979</td>\n      <td>3.916703</td>\n      <td>-88.351684</td>\n      <td>-63.938851</td>\n      <td>-49.242043</td>\n      <td>-12.076624</td>\n      <td>-17.718503</td>\n      <td>-9.578557</td>\n      <td>-2030.537848</td>\n      <td>0.660726</td>\n      <td>5.609221</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's break it down: \n\n- `df['year']` is the column with the year values, a `pandas.Series`,\n\n- in `df['year'].isin()`, we have that [`isin` is a method for the `pandas.Series`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.isin.html) and we are calling it using the dot `.`. \n\n- `range(1970,1980)` constructs consecutive integers from 1970 to 1979 - remember the right endopoint (1980) is not included!\n\n- `df['year'].isin(range(1970,1980))` is then a `pandas.Series` of boolean values indicating which rows have year equal to 1970, ..., 1979. \n\n- when we put `df['year'].isin(range(1970,1980))` inside the selection brackets `[]` we obtain the rows of the data frame with year equal to 1970, ..., 1979.\n\n:::{.callout-note}\n## `loc` for row selection\nIt is equivalent to write\n\n```python\n# select rows with year<1965\ndf[df['year'] < 1965]\n```\nand\n```python\n# select rows with year<1965 using love\ndf.loc[ df['year'] <1965 , :]\n```\nIn the second one:\n\n- we are using the `df.loc[ row-selection , column-selection]` syntax\n\n- the `row-selection` parameter is the condition `df['year']<1965`\n\n- the `column-selection` parameter is a colon `:`, which indicates we want all columns for the rows we are selecting.\n\nWe prefer the first syntax when we are selecting rows and not columns since it is simpler.\n:::\n\n#### ... using multiple conditions\nWe can combine multipe conditions by surrounding each one in parenthesis `()` and using the or operator `|` and the and operator `&`.\n\n***or* example**:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# select rows with \n# annual_sea_level_rise<0.5 mm OR annual_sea_level_rise>0.8 mm\n\ndf[ (df['annual_sea_level_rise']<0.5) | (df['annual_sea_level_rise']>0.8)]\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>europe</th>\n      <th>arctic</th>\n      <th>alaska</th>\n      <th>asia</th>\n      <th>north_america</th>\n      <th>south_america</th>\n      <th>antarctica</th>\n      <th>global_glacial_volume_change</th>\n      <th>annual_sea_level_rise</th>\n      <th>cumulative_sea_level_rise</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1961</td>\n      <td>-5.128903</td>\n      <td>-108.382987</td>\n      <td>-18.721190</td>\n      <td>-32.350759</td>\n      <td>-14.359007</td>\n      <td>-4.739367</td>\n      <td>-35.116389</td>\n      <td>-220.823515</td>\n      <td>0.610010</td>\n      <td>0.610010</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1962</td>\n      <td>5.576282</td>\n      <td>-173.252450</td>\n      <td>-24.324790</td>\n      <td>-4.675440</td>\n      <td>-2.161842</td>\n      <td>-13.694367</td>\n      <td>-78.222887</td>\n      <td>-514.269862</td>\n      <td>0.810625</td>\n      <td>1.420635</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1963</td>\n      <td>-10.123105</td>\n      <td>-0.423751</td>\n      <td>-2.047567</td>\n      <td>-3.027298</td>\n      <td>-27.535881</td>\n      <td>3.419633</td>\n      <td>3.765109</td>\n      <td>-550.575640</td>\n      <td>0.100292</td>\n      <td>1.520927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1964</td>\n      <td>-4.508358</td>\n      <td>20.070148</td>\n      <td>0.477800</td>\n      <td>-18.675385</td>\n      <td>-2.248286</td>\n      <td>20.732633</td>\n      <td>14.853096</td>\n      <td>-519.589859</td>\n      <td>-0.085596</td>\n      <td>1.435331</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1965</td>\n      <td>10.629385</td>\n      <td>43.695389</td>\n      <td>-0.115332</td>\n      <td>-18.414602</td>\n      <td>-19.398765</td>\n      <td>6.862102</td>\n      <td>22.793484</td>\n      <td>-473.112003</td>\n      <td>-0.128392</td>\n      <td>1.306939</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n***and* example**\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# select rows with cumulative_sea_level_rise>10 AND  global_glacial_volume_change<-300\ndf[ (df['cumulative_sea_level_rise']>10) & (df['global_glacial_volume_change']<-300)]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>europe</th>\n      <th>arctic</th>\n      <th>alaska</th>\n      <th>asia</th>\n      <th>north_america</th>\n      <th>south_america</th>\n      <th>antarctica</th>\n      <th>global_glacial_volume_change</th>\n      <th>annual_sea_level_rise</th>\n      <th>cumulative_sea_level_rise</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>32</th>\n      <td>1993</td>\n      <td>16.685013</td>\n      <td>-73.666274</td>\n      <td>-43.702040</td>\n      <td>-65.995130</td>\n      <td>-33.151246</td>\n      <td>-20.578403</td>\n      <td>-20.311577</td>\n      <td>-3672.582082</td>\n      <td>0.671126</td>\n      <td>10.145254</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>1994</td>\n      <td>0.741751</td>\n      <td>-3.069084</td>\n      <td>-59.962273</td>\n      <td>-59.004710</td>\n      <td>-89.506142</td>\n      <td>-15.258449</td>\n      <td>-8.168498</td>\n      <td>-3908.977191</td>\n      <td>0.653025</td>\n      <td>10.798280</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>1995</td>\n      <td>-2.139665</td>\n      <td>-58.167778</td>\n      <td>-74.141762</td>\n      <td>3.500155</td>\n      <td>-0.699374</td>\n      <td>-19.863392</td>\n      <td>-25.951496</td>\n      <td>-4088.082873</td>\n      <td>0.494767</td>\n      <td>11.293047</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>1996</td>\n      <td>-6.809834</td>\n      <td>-4.550205</td>\n      <td>-74.847017</td>\n      <td>-67.436591</td>\n      <td>4.867530</td>\n      <td>-21.080115</td>\n      <td>-11.781489</td>\n      <td>-4271.401594</td>\n      <td>0.506405</td>\n      <td>11.799452</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>1997</td>\n      <td>-13.724106</td>\n      <td>-24.832246</td>\n      <td>-167.229145</td>\n      <td>-34.406403</td>\n      <td>-27.680661</td>\n      <td>-38.213286</td>\n      <td>-20.179090</td>\n      <td>-4600.686013</td>\n      <td>0.909625</td>\n      <td>12.709077</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>1998</td>\n      <td>-13.083338</td>\n      <td>-110.429302</td>\n      <td>-107.879027</td>\n      <td>-58.115702</td>\n      <td>30.169987</td>\n      <td>-3.797978</td>\n      <td>-48.129928</td>\n      <td>-4914.831966</td>\n      <td>0.867807</td>\n      <td>13.576884</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>1999</td>\n      <td>-8.039555</td>\n      <td>-64.644068</td>\n      <td>-87.714653</td>\n      <td>-26.211723</td>\n      <td>5.888512</td>\n      <td>-8.038630</td>\n      <td>-40.653001</td>\n      <td>-5146.368231</td>\n      <td>0.639603</td>\n      <td>14.216487</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>2000</td>\n      <td>-17.008590</td>\n      <td>-96.494055</td>\n      <td>-44.445000</td>\n      <td>-37.518173</td>\n      <td>-29.191986</td>\n      <td>-2.767698</td>\n      <td>-58.873830</td>\n      <td>-5435.317175</td>\n      <td>0.798202</td>\n      <td>15.014688</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>2001</td>\n      <td>-8.419109</td>\n      <td>-145.415483</td>\n      <td>-55.749505</td>\n      <td>-35.977022</td>\n      <td>-0.926134</td>\n      <td>7.553503</td>\n      <td>-86.774675</td>\n      <td>-5764.039931</td>\n      <td>0.908074</td>\n      <td>15.922762</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>2002</td>\n      <td>-3.392361</td>\n      <td>-48.718943</td>\n      <td>-87.120000</td>\n      <td>-36.127226</td>\n      <td>-27.853498</td>\n      <td>-13.484593</td>\n      <td>-30.203960</td>\n      <td>-6013.225500</td>\n      <td>0.688358</td>\n      <td>16.611120</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>2003</td>\n      <td>-3.392361</td>\n      <td>-48.718943</td>\n      <td>-67.253634</td>\n      <td>-36.021991</td>\n      <td>-75.066475</td>\n      <td>-13.223430</td>\n      <td>-30.203960</td>\n      <td>-6289.640976</td>\n      <td>0.763579</td>\n      <td>17.374699</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### ... by position\n\nAll the selections we have done so far have been using labels or using a condition. Sometimes we might want to select certain rows depending on their *actual position* in the data frame. In this case we use `iloc` selection with the syntax `df.iloc[row-indices]`. `iloc` stands for integer-location based indexing. Let's see some examples:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# select the fifht row = index 4\ndf.iloc[4]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nyear                            1965.000000\neurope                            10.629385\narctic                            43.695389\nalaska                            -0.115332\nasia                             -18.414602\nnorth_america                    -19.398765\nsouth_america                      6.862102\nantarctica                        22.793484\nglobal_glacial_volume_change    -473.112003\nannual_sea_level_rise             -0.128392\ncumulative_sea_level_rise          1.306939\nName: 4, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# select rows 23 through 30, inclduing 30\ndf.iloc[23:31]\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>europe</th>\n      <th>arctic</th>\n      <th>alaska</th>\n      <th>asia</th>\n      <th>north_america</th>\n      <th>south_america</th>\n      <th>antarctica</th>\n      <th>global_glacial_volume_change</th>\n      <th>annual_sea_level_rise</th>\n      <th>cumulative_sea_level_rise</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>23</th>\n      <td>1984</td>\n      <td>8.581427</td>\n      <td>-5.755672</td>\n      <td>-33.466092</td>\n      <td>-20.528535</td>\n      <td>-20.734676</td>\n      <td>-8.267686</td>\n      <td>-3.261011</td>\n      <td>-2569.339802</td>\n      <td>0.232609</td>\n      <td>7.097624</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>1985</td>\n      <td>-5.970980</td>\n      <td>-49.651089</td>\n      <td>12.065473</td>\n      <td>-31.571622</td>\n      <td>-33.833985</td>\n      <td>10.072906</td>\n      <td>-13.587886</td>\n      <td>-2682.857926</td>\n      <td>0.313586</td>\n      <td>7.411210</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>1986</td>\n      <td>-5.680642</td>\n      <td>22.900847</td>\n      <td>7.557447</td>\n      <td>-18.920773</td>\n      <td>-33.014743</td>\n      <td>-4.652030</td>\n      <td>30.482473</td>\n      <td>-2684.197632</td>\n      <td>0.003701</td>\n      <td>7.414911</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>1987</td>\n      <td>8.191477</td>\n      <td>12.387780</td>\n      <td>-24.007862</td>\n      <td>-41.121970</td>\n      <td>-48.560996</td>\n      <td>1.670733</td>\n      <td>3.130190</td>\n      <td>-2773.325568</td>\n      <td>0.246210</td>\n      <td>7.661120</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>1988</td>\n      <td>-11.117228</td>\n      <td>-31.066489</td>\n      <td>49.897712</td>\n      <td>-21.300712</td>\n      <td>-46.545435</td>\n      <td>13.460422</td>\n      <td>-37.986834</td>\n      <td>-2858.767621</td>\n      <td>0.236028</td>\n      <td>7.897148</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>1989</td>\n      <td>14.863220</td>\n      <td>-23.462392</td>\n      <td>-36.112726</td>\n      <td>-46.528372</td>\n      <td>-57.756422</td>\n      <td>-21.687470</td>\n      <td>-10.044757</td>\n      <td>-3041.169131</td>\n      <td>0.503872</td>\n      <td>8.401020</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>1990</td>\n      <td>-1.226009</td>\n      <td>-27.484542</td>\n      <td>-92.713339</td>\n      <td>-35.553433</td>\n      <td>-56.563056</td>\n      <td>-31.077022</td>\n      <td>-29.893352</td>\n      <td>-3318.220397</td>\n      <td>0.765335</td>\n      <td>9.166355</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>1991</td>\n      <td>-14.391425</td>\n      <td>-34.898689</td>\n      <td>-8.822063</td>\n      <td>-15.338299</td>\n      <td>-31.458010</td>\n      <td>-7.162909</td>\n      <td>-35.968429</td>\n      <td>-3467.630284</td>\n      <td>0.412734</td>\n      <td>9.579089</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNotice since we are back to indexing by position the right endpoint of the slice (6) is not included in the ouput. \n\n### Selecting rows and columns simultaneously...\n\nSelecting rows and columns simultaneously can be done using `loc` (labels or conditions) or `iloc` (integer position).\n\n#### ...by labels or conditions\nWhen we want to select rows and columns simultaneously by labels or conditions we can use `loc` selection with the syntax \n\n```python\ndf.loc[ row-selection , column-selection]\n```\n\nspecifying both paratmers: `row-selection` and `column-selection`. These parameters can be a condition (which generates a boolean array) or a subset of labels from the index or the column names. Let's see an examples:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# select change in glacial volume in Europe per year after 2000\ndf.loc[df['year']>2000,['year','europe']]\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>europe</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>40</th>\n      <td>2001</td>\n      <td>-8.419109</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>2002</td>\n      <td>-3.392361</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>2003</td>\n      <td>-3.392361</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's break it down:\n\n- we are using the `df.loc[ row-selection , column-selection]` syntax\n\n- the `row-selection` parameter is the condition `df['year']>1990`, which is a boolean array saying which years are greater than 1990\n\n- the `column-selection` parameter is `['year','europe']` which is a list with the names of the two columns we are intersted in. \n\n#### ... by position\n\nWhen we want to select rows and columns simultaneously by position we use `iloc` selection with the syntax:\n```python\ndf.iloc[ row-indices , column-indices]\n```\n\nFor example, \n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# select rows 3-7 (including 7) and columns 3 and 4\ndf.iloc[ 3:8, [3,4] ]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>alaska</th>\n      <th>asia</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>0.477800</td>\n      <td>-18.675385</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-0.115332</td>\n      <td>-18.414602</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.224762</td>\n      <td>-14.630284</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>-7.174030</td>\n      <td>-39.013695</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>-0.660556</td>\n      <td>7.879589</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's break it down:\n\n- we are using the `df.iloc[ row-indices , column-indices]` syntax\n\n- the `row-indices` parameter is the slice *of integer indices* 3:8. Remember the right endpoint (8) won't be included.\n\n- the `column-indices` parameter is the list of integer indices 3 and 4. This means we are selecting the fourth and fifth column.\n\n\n### Notes about `loc` and `iloc`\n\n::: {.callout-caution}\n## `iloc` vs. `loc`\nAt the beginning, the difference between `iloc` and `loc` can be confusing. Remember the `i` in `iloc` stands for *integer-location*, this reminds us `iloc` only uses integer indexing to retrieve information from the data frames in the same way as indexing for Python lists.\n\nIf you want to dive deeper, this is a great discussion about the difference between `iloc` and `loc`: [Stackoverflow - How are iloc and loc different?](https://stackoverflow.com/questions/31593201/how-are-iloc-and-loc-different/31593712#31593712)\n\nAnd, as always, the documentation will provide you with more information:\n[`pandas.DataFrame.loc`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html) and [`pandas.DataFrame.iloc`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iloc.html).\n:::\n\n\n:::{.callout-warning}\n## `iloc` for column selection? Avoid it!\nWe can also access columns by position using `iloc` - but it is best not to if possible.\n\nSuppose we want to access the 10th column in the data frame - then we want to select a column *by position*. In this case the 10th column is the annual sea level rise data and the 10th position corresponds to the index 9. We can select this column by position using the `iloc` selection:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# select column by position using iloc\n# the syntax is iloc[row-indices, column-indices]\n# [:,9] means \"select all rows from the 10th column\"\nannual_rise_3 = df.iloc[:,9]\nannual_rise_3.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n0    0.610010\n1    0.810625\n2    0.100292\n3   -0.085596\n4   -0.128392\nName: annual_sea_level_rise, dtype: float64\n```\n:::\n:::\n\n\nUnless you are *really* looking for information about *the 10th column*, do not access a column by position. This is bound to break in many ways:\n\n- it relies on a person correctly counting the position of a column. Even with a small dataset this can be prone to error.\n\n- it is not explicit: if we want information about sea level rise `df.annual_sea_level_rise` or `df['annual_sea_level_rise']` are explicitely telling us we are accessing that information. `df.iloc[:,9]` is obscure and uninformative.\n\n- datastets can get updated. Maybe a new column was added before `annual_sea_level_rise`, this would change the position of the column, which would make any code depending on `df.iloc[:,9]` invalid. Accessing by label helps reproducibility!\n\n:::\n\n## Summary\n\n![`pandas.DataFrame` selection flow chart](/images/selection-flow-chart.jpg)\n\n## Resources\n\nWhat is presented in this section is a comprehensive, but not an exhaustive list of methods to select data in `pandas.DataFrames`. There are *so many* ways to subset data to get the same result. Some of the content from this lesson is adapted from the following resources and I encourage you to read them to learn more! \n\n📖 [Pandas getting started tutorials - How to I select a subset of a\nDataFrame](https://pandas.pydata.org/docs/getting_started/intro_tutorials/03_subset_data.html) \n\n📖 [Pandas documentation - User Guide - Indexing and Selecting Data](https://pandas.pydata.org/docs/user_guide/indexing.html#indexing-slicing-with-labels)\n\n📖 [Python for Data Analysis, 3E - Getting started with pandas](https://wesmckinney.com/book/pandas-basics)\n\n## Acknowledgements\n\nThe simplified glacial_loss.csv dataset was created by [Dr. Allison Horst](https://allisonhorst.github.io) as part of her course materials on environmental data science. \n\n",
    "supporting": [
      "lesson-3-pandas-subsetting_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}