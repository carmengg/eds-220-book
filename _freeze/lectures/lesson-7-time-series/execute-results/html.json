{
  "hash": "7927adf8111c73b4352d63400aab9f87",
  "result": {
    "markdown": "# Basic time series\n\nIn this section we will learn some basic handling of time series. \n\n<!--\nAdd section about\n## `Timestamp`\n\n- basic pandas data type for dates\n- what it is\n- create one\n\n- NaT = not a time. `pd.NaT` = nd behaves similar as np.nan does for float data.\n-->\n\n## Data: Precipitation in Boulder, CO\n\nTo exemplify some of the basic time series functionalities we'll be using data about hourly precipitation in the county of Boulder, Colorado from 2000 to 2014. In September 2013, an unusual weather pattern led to some of the most intense precipitation ever recorded in this region, causing devastating floods throughout the Colorado Front Range. Our goal is to visualize precipitation data in 2013 and identify this unusual weather event.\n\nThis data was obtained via the [National Oceanic and Atmosperic Administration (NOAA) Climate Data Online service](https://www.ncdc.noaa.gov/cdo-web/). This dataset is a csv and can be acceses at [this link](https://www.ncei.noaa.gov/orders/cdo/3488381.csv). You can [view the full documentation here](https://www.ncei.noaa.gov/pub/data/cdo/documentation/PRECIP_HLY_documentation.pdf). The following is a summary of the column descriptions:\n\n- STATION: identification number indentifying the station. \n- STATION_NAME: optional field, name identifying the station location. \n- DATE: this is the year of the record (4 digits), followed by month (2 digits), followed by day of the month (2 digits), followed by a space and ending with a time of observation that is a two digit indication of the local time hour, followed by a colon (:) followed by a two digit indication of the minute which for this dataset will always be 00. Note: The subsequent data value will be for the hour ending at the time specified here. Hour 00:00 will be listed as the first hour of each date, however since this data is by definition an accumulation of the previous 60 minutes, it actually occurred on the previous day.\n- HPCP: The amount of precipitation recorded at the station for the hour ending at the time specified for DATE above given in hundredths of inches. The values 999.99 means the data value is missing. Hours with no precipitation are not shown.\n\n## Data preparation\n\nLet's start by reading in the data and taking a look at it.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\n# read in data \nurl = 'https://www.ncei.noaa.gov/orders/cdo/3488381.csv'\nprecip = pd.read_csv(url)\n\n# check df's head\nprecip.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>STATION</th>\n      <th>STATION_NAME</th>\n      <th>DATE</th>\n      <th>HPCP</th>\n      <th>Measurement Flag</th>\n      <th>Quality Flag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>20000101 00:00</td>\n      <td>999.99</td>\n      <td>]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>20000101 01:00</td>\n      <td>0.00</td>\n      <td>g</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>20000102 20:00</td>\n      <td>0.00</td>\n      <td></td>\n      <td>q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>20000103 01:00</td>\n      <td>0.00</td>\n      <td></td>\n      <td>q</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>20000103 05:00</td>\n      <td>0.00</td>\n      <td></td>\n      <td>q</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's make a first attempt at plotting the precipitation:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprecip.HPCP.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-7-time-series_files/figure-html/cell-3-output-2.png){width=583 height=411}\n:::\n:::\n\n\nThere's a few things going on with this graph:\n \n1. There are many jumps close to 1000. This is clearly not right and these are outliers. Looking at the column description we can see 999.99 indicates the HPCP data is missing.\n\n2. The x-axis values are given by the index of the dataframe and not relative to time. \n\n3. We are only intersted in the precipitation data from 2013, this graph is trying to plot all our data.\n\nLet's fix each one of these issues separately.\n\n## Outliers\n\nThe metadata states the missing values are indicated by the number 999.99. We can use this information to re-load the dataframe indicating 999.99 is the missing value. To do this, we add the `na_values` parameter to the `pd.read_csv()` function to indicitate additional values that should be recognized as `NA`:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# read in csv indicating NA values\nprecip = pd.read_csv(url, na_values=[999.99])\n\n# check updated df\nprecip.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>STATION</th>\n      <th>STATION_NAME</th>\n      <th>DATE</th>\n      <th>HPCP</th>\n      <th>Measurement Flag</th>\n      <th>Quality Flag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>20000101 00:00</td>\n      <td>NaN</td>\n      <td>]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>20000101 01:00</td>\n      <td>0.0</td>\n      <td>g</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>20000102 20:00</td>\n      <td>0.0</td>\n      <td></td>\n      <td>q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>20000103 01:00</td>\n      <td>0.0</td>\n      <td></td>\n      <td>q</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>20000103 05:00</td>\n      <td>0.0</td>\n      <td></td>\n      <td>q</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-note}\n## Default NA values\n\nCheck the `na_values` parameter in the [`pd.read_csv()` documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html) to learn more about which values are identified as `NA` by default. \n:::\n\nWe can try making our plot again:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprecip.HPCP.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-7-time-series_files/figure-html/cell-5-output-2.png){width=571 height=411}\n:::\n:::\n\n\nThis looks much better and we can already see there is something going on close to the end of the time series. We still need to set the index as the time.\n\n## Strings into dates\nNotice that the DATE column in our dataframe is not of type `datetime`. We can check this using the `dtypes` attribute for dataframes:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# check the dtypes of all columns\nprecip.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nSTATION              object\nSTATION_NAME         object\nDATE                 object\nHPCP                float64\nMeasurement Flag     object\nQuality Flag         object\ndtype: object\n```\n:::\n:::\n\n\n<!--\nprecip.DATE.apply(type).unique()\n-->\nThe `object` dtype means that (most likely) all values in that column are strings. We can convert strings to datetime objects using the `to_datetime()` pandas function:\n\n- `pd.to_datetime()` input: a `pd.Series` with strings that can be converted to dates\n- `pd.to_datetime()` output: a `pd.Series` with the strings converted to `datetime` objects\n \n **Example**\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# covert precip.DATE column to timedate objects\npd.to_datetime(precip.DATE)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0      2000-01-01 00:00:00\n1      2000-01-01 01:00:00\n2      2000-01-02 20:00:00\n3      2000-01-03 01:00:00\n4      2000-01-03 05:00:00\n               ...        \n9001   2013-12-22 01:00:00\n9002   2013-12-23 00:00:00\n9003   2013-12-23 02:00:00\n9004   2013-12-29 01:00:00\n9005   2013-12-31 00:00:00\nName: DATE, Length: 9006, dtype: datetime64[ns]\n```\n:::\n:::\n\n\nWe can overwrite the DATE column with this output:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# convert DATE column from string to timestamps\nprecip.DATE = pd.to_datetime(precip.DATE)\n\n# check column data type is updated\nprint(precip.dtypes)\n\n# check new values\nprecip.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSTATION                     object\nSTATION_NAME                object\nDATE                datetime64[ns]\nHPCP                       float64\nMeasurement Flag            object\nQuality Flag                object\ndtype: object\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>STATION</th>\n      <th>STATION_NAME</th>\n      <th>DATE</th>\n      <th>HPCP</th>\n      <th>Measurement Flag</th>\n      <th>Quality Flag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>2000-01-01 00:00:00</td>\n      <td>NaN</td>\n      <td>]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>2000-01-01 01:00:00</td>\n      <td>0.0</td>\n      <td>g</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>2000-01-02 20:00:00</td>\n      <td>0.0</td>\n      <td></td>\n      <td>q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>2000-01-03 01:00:00</td>\n      <td>0.0</td>\n      <td></td>\n      <td>q</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>2000-01-03 05:00:00</td>\n      <td>0.0</td>\n      <td></td>\n      <td>q</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAnd we can make another try at plotting our precipitation data:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nprecip.plot(x='DATE', y='HPCP')\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n<AxesSubplot:xlabel='DATE'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-7-time-series_files/figure-html/cell-9-output-2.png){width=571 height=401}\n:::\n:::\n\n\nNotice the x-axis is now neatly organized into years.\n\n## Timestamp index\n\nAt its core, we have time series data if our data frame is indexed by moments in time. Using our DATE column as the index will allows us to do many operations with respect to  time, including subsetting and resampling. \n\nUpdating the index of a dataframe is simple, we use the `set_index()` method. It's general syntax is\n```python\ndf = df.set_index(new_index)\n```\nwhere `new_index` is:\n\n- the name of the column (string) we want to set as index, or\n- an array or `pd.Series` of the same length as our data frame (we need one index per row!). \n\nNotice that `set_index` does not modify the data frame in place.\n\n**Example**\n\nIn our precipitation data this is:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# set DATE coumn as index\nprecip = precip.set_index('DATE')\n\n# check new index\nprecip.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>STATION</th>\n      <th>STATION_NAME</th>\n      <th>HPCP</th>\n      <th>Measurement Flag</th>\n      <th>Quality Flag</th>\n    </tr>\n    <tr>\n      <th>DATE</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2000-01-01 00:00:00</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>NaN</td>\n      <td>]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2000-01-01 01:00:00</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>0.0</td>\n      <td>g</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2000-01-02 20:00:00</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>0.0</td>\n      <td></td>\n      <td>q</td>\n    </tr>\n    <tr>\n      <th>2000-01-03 01:00:00</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>0.0</td>\n      <td></td>\n      <td>q</td>\n    </tr>\n    <tr>\n      <th>2000-01-03 05:00:00</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>0.0</td>\n      <td></td>\n      <td>q</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSince we know the default behaviour of `plot()` is to use the index as the x-axis and make a line plot for each numeric column, we can simplify our plot making like this:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nprecip.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n<AxesSubplot:xlabel='DATE'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-7-time-series_files/figure-html/cell-11-output-2.png){width=571 height=401}\n:::\n:::\n\n\n<!--\n:::{.callout-note}\nMore on pd.read_csv(). You can set the index and the date columns\ndf = pd.read_csv(file, index_col=['date'], parse_dates=['date'])\n\n:::\n-->\n\n## Subsetting by date\n`pandas` has great functionality to subset a dataframe when using a time index. These are some examples:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# select data from a given month and year\n# use loc['year-month']\nprecip.loc['2013-09']\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>STATION</th>\n      <th>STATION_NAME</th>\n      <th>HPCP</th>\n      <th>Measurement Flag</th>\n      <th>Quality Flag</th>\n    </tr>\n    <tr>\n      <th>DATE</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-09-01 00:00:00</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>NaN</td>\n      <td>]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-09-01 01:00:00</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>NaN</td>\n      <td>[</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-09-01 00:00:00</th>\n      <td>COOP:050183</td>\n      <td>ALLENSPARK 2 SE CO US</td>\n      <td>NaN</td>\n      <td>]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-09-01 01:00:00</th>\n      <td>COOP:050183</td>\n      <td>ALLENSPARK 2 SE CO US</td>\n      <td>NaN</td>\n      <td>[</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-09-01 00:00:00</th>\n      <td>COOP:055121</td>\n      <td>LONGMONT 6 NW CO US</td>\n      <td>NaN</td>\n      <td>}</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2013-09-23 02:00:00</th>\n      <td>COOP:050843</td>\n      <td>BOULDER 2 CO US</td>\n      <td>0.2</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-09-27 10:00:00</th>\n      <td>COOP:050843</td>\n      <td>BOULDER 2 CO US</td>\n      <td>0.1</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-09-27 15:00:00</th>\n      <td>COOP:050843</td>\n      <td>BOULDER 2 CO US</td>\n      <td>0.1</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-09-27 17:00:00</th>\n      <td>COOP:050843</td>\n      <td>BOULDER 2 CO US</td>\n      <td>0.1</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-09-27 18:00:00</th>\n      <td>COOP:050843</td>\n      <td>BOULDER 2 CO US</td>\n      <td>0.1</td>\n      <td></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n<p>128 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# select data from a given year\n# use loc['year']\nprecip.loc['2013']\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>STATION</th>\n      <th>STATION_NAME</th>\n      <th>HPCP</th>\n      <th>Measurement Flag</th>\n      <th>Quality Flag</th>\n    </tr>\n    <tr>\n      <th>DATE</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01 01:00:00</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>0.0</td>\n      <td>g</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-01-10 02:00:00</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>NaN</td>\n      <td>[</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-01-13 00:00:00</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>NaN</td>\n      <td>]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-01-26 20:00:00</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>0.1</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-01-28 23:00:00</th>\n      <td>COOP:055881</td>\n      <td>NEDERLAND 5 NNW CO US</td>\n      <td>0.1</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2013-12-22 01:00:00</th>\n      <td>COOP:050843</td>\n      <td>BOULDER 2 CO US</td>\n      <td>NaN</td>\n      <td>[</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-12-23 00:00:00</th>\n      <td>COOP:050843</td>\n      <td>BOULDER 2 CO US</td>\n      <td>NaN</td>\n      <td>]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-12-23 02:00:00</th>\n      <td>COOP:050843</td>\n      <td>BOULDER 2 CO US</td>\n      <td>0.1</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-12-29 01:00:00</th>\n      <td>COOP:050843</td>\n      <td>BOULDER 2 CO US</td>\n      <td>NaN</td>\n      <td>[</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2013-12-31 00:00:00</th>\n      <td>COOP:050843</td>\n      <td>BOULDER 2 CO US</td>\n      <td>NaN</td>\n      <td>]</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n<p>662 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe can use this selection to plot data as usual. Notice we have a lot of gaps due to missing data. \n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprecip.loc['2013'].plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n<AxesSubplot:xlabel='DATE'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-7-time-series_files/figure-html/cell-14-output-2.png){width=571 height=412}\n:::\n:::\n\n\n## Resample\nResampling a time series means converting a time series from one frequency to another. For example, monthly to yearly (downsampling) or weekly to daily (upsampling). We can resample with the `resample()` method. The simplest use is to call\n```python\ndf.resample(new_frequency).aggregator_function()\n```\nwhere:\n-  `new_frequency` is a string representing the new frequence to resample the data, for example `'D'` for day, `w` for week, `M` for month, `Y` for year, and\n- `aggregator_function()` is the function we will use to aggregate the data into the new frequence. For example, `max()`, `min()`, `sum()` or `average()`. \n\n`resample()` works similarly to `groupby()` in the sense that you need to specify a way to aggregate the data to get any output. \n\n**Example**\n\nOur 2013 precipitation data has hourly frequency and we want to resample it to daily frequency. \n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# resample 2013 hourly data to daily frequency\n# nothing happens\nprecip.loc['2013'].resample('D')\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n<pandas.core.resample.DatetimeIndexResampler object at 0x7fbc80eade50>\n```\n:::\n:::\n\n\nTo get an output we need to add an aggregator function that indicates how we want to summarize the data that falls on each day. In this case we want the total precipitation on a day, so we will aggreagte using `sum()`:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# total daily precipitation in 2013\ndaily_precip_2013 = precip.loc['2013'].resample('D').sum()\n\ndaily_precip_2013\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HPCP</th>\n    </tr>\n    <tr>\n      <th>DATE</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2013-12-27</th>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2013-12-28</th>\n      <td>0.1</td>\n    </tr>\n    <tr>\n      <th>2013-12-29</th>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2013-12-30</th>\n      <td>0.1</td>\n    </tr>\n    <tr>\n      <th>2013-12-31</th>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>365 rows × 1 columns</p>\n</div>\n```\n:::\n:::\n\n\nNotice the index now is every day in 2013. Finally, we can plot our data:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndaily_precip_2013.plot(ylabel='daily precipitation (1/100 inch)', \n                       xlabel='date',\n                       title='Precipitation in Boulder, CO during 2013')\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n<AxesSubplot:title={'center':'Precipitation in Boulder, CO during 2013'}, xlabel='date', ylabel='daily precipitation (1/100 inch)'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-7-time-series_files/figure-html/cell-17-output-2.png){width=576 height=464}\n:::\n:::\n\n\n## More info\n\nAs usual, there's so much more to learn about time series data. These documents will allow you to dive deeper:\n\n📖 [`pandas` getting started tutorials - How to handle time series data with ease](https://pandas.pydata.org/docs/getting_started/intro_tutorials/09_timeseries.html#min-tut-09-timeseries)\n\n📖 [Time Series Chapter, Python for Data Analysis, Wes McKinney](https://wesmckinney.com/book/time-series)\n\n📖 [`pandas` User Guide - Time series/date functionality](https://pandas.pydata.org/docs/user_guide/timeseries.html)\n\n\n## Acknowledgements\n\nThis lesson was adapted from [Dr. Sam Stevenson's lecture on Data quality control and outliers: 1D time series](https://github.com/samanthastevenson/EDS220_Fall2022/blob/main/Precipitation_QCexample_BoulderCO.ipynb) and [Earth Lab's Lesson 1. Work With Datetime Format in Python - Time Series Data](https://www.earthdatascience.org/courses/use-data-open-source-python/use-time-series-data-in-python/introduction-to-time-series-in-pandas-python/).\n\n",
    "supporting": [
      "lesson-7-time-series_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}