{
  "hash": "577efabba820345440992ef8595baec8",
  "result": {
    "markdown": "<!-- \nFixing the preview working directory\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\nhome = os.path.expanduser(\"~\")\nos.chdir(os.path.join(home,'eds-220-book'))\n```\n:::\n\n\nIgnore ShapelyDeprecationWarning warning in render\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport shapely\nimport warnings\nfrom shapely.errors import ShapelyDeprecationWarning\n\nwarnings.filterwarnings(\"ignore\", category=ShapelyDeprecationWarning) \n```\n:::\n\n\n-->\n\n# csv to `GeoDataFrame`\n\nIn this lesson we will learn how to make a csv into a `geopandas.GeoDataFrame`, setting its CRS manually and learn some more customizations for maps and matplotlib figures.\n\n## Data\nWe will use two datasets in this lesson. \nThe first one is a reprojection of this dataset from the U.S. Energy Information Administration (EIA) with [information about operable electric generating plants in the United States by energy source, as of May 2023](https://atlas.eia.gov/datasets/eia::power-plants/about). \n\nFollow these steps to download the *reprojected* datset for this lesson:\n\n1. Go to https://github.com/carmengg/eds-220-book/blob/main/data/power_plants_epsg4269.csv\n2. Download the raw file and move it into your working directory\n\nYou can [access the metadata for this dataset here](https://eia.maps.arcgis.com/sharing/rest/content/items/bf5c5110b1b944d299bb683cdbd02d2a/info/metadata/metadata.xml?format=default&output=html). \n\nThe second dataset is a [TIGER shapefile from the United States Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341). \nTIGER stands for [Topologically Integrated Geographic Encoding and Referencing](https://en.wikipedia.org/wiki/Topologically_Integrated_Geographic_Encoding_and_Referencing). This used to be the data format the US Census distributed geospatial data, but since 2008 TIGER files are converted to shapefiles. \nWe will use the shapefiles for the US states. \nFollow these steps to download shapefile with the United States' states:\n\n1. At the bottom of the [2022 page](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341), under Download, click on \"Web Interface\"\n2. For year, select 2022, and for layer type select \"States (and equivalent)\". Click submit. \n3. Click on \"Download national file\".\n\nYou can check the [metadata for all the TIGER shapefiles here](https://www.census.gov/programs-surveys/geography/technical-documentation/complete-technical-documentation/tiger-geo-line.html). \nThe columns for this shapefile are:\n\n![Source: TIGER/Line Shapefiles Technical Documentation](/images/tiger_shp_columns.png)\n\n**File management: Both datasets must be in a data directory inside your working directory.**\n\n## `DataFrame` to `GeoDataFrame`\n\nLet's start by importing the necessary libraries:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport geopandas as gpd\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```\n:::\n\n\nAnd update pandas display options:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# display all column when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n```\n:::\n\n\nOur first step is to import the power plants dataset. \nNotice this is a csv, geopandas doesn't have a way to extract a geometry column from a csv, so we will need to create this geometry manually. \nWe start by reading in the data using `pandas`.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# import power plants data\npower_plants = pd.read_csv('data/power_plants_epsg4269.csv')\npower_plants.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>objectid</th>\n      <th>plant_code</th>\n      <th>plant_name</th>\n      <th>utility_id</th>\n      <th>utility_name</th>\n      <th>sector_name</th>\n      <th>street_address</th>\n      <th>city</th>\n      <th>county</th>\n      <th>state</th>\n      <th>zip</th>\n      <th>primsource</th>\n      <th>source_desc</th>\n      <th>tech_desc</th>\n      <th>install_mw</th>\n      <th>total_mw</th>\n      <th>bat_mw</th>\n      <th>bio_mw</th>\n      <th>coal_mw</th>\n      <th>geo_mw</th>\n      <th>hydro_mw</th>\n      <th>hydrops_mw</th>\n      <th>ng_mw</th>\n      <th>nuclear_mw</th>\n      <th>crude_mw</th>\n      <th>solar_mw</th>\n      <th>wind_mw</th>\n      <th>other_mw</th>\n      <th>source</th>\n      <th>period</th>\n      <th>longitude</th>\n      <th>latitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>11570</td>\n      <td>1</td>\n      <td>Sand Point</td>\n      <td>63560</td>\n      <td>TDX Sand Point Generating, LLC</td>\n      <td>Electric Utility</td>\n      <td>100 Power Plant Way</td>\n      <td>Sand Point</td>\n      <td>Aleutians East</td>\n      <td>Alaska</td>\n      <td>99661.0</td>\n      <td>petroleum</td>\n      <td>Petroleum = 1.3 MW, Wind = 0.4 MW</td>\n      <td>Petroleum Liquids; Onshore Wind Turbine;</td>\n      <td>3.7</td>\n      <td>1.7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.3</td>\n      <td>NaN</td>\n      <td>0.4</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305.0</td>\n      <td>-160.497222</td>\n      <td>55.339722</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>11571</td>\n      <td>2</td>\n      <td>Bankhead Dam</td>\n      <td>195</td>\n      <td>Alabama Power Co</td>\n      <td>Electric Utility</td>\n      <td>19001 Lock 17 Road</td>\n      <td>Northport</td>\n      <td>Tuscaloosa</td>\n      <td>Alabama</td>\n      <td>35476.0</td>\n      <td>hydroelectric</td>\n      <td>Hydroelectric = 53 MW</td>\n      <td>Conventional Hydroelectric</td>\n      <td>53.9</td>\n      <td>53.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>53.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305.0</td>\n      <td>-87.356823</td>\n      <td>33.458665</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2.0</td>\n      <td>11572</td>\n      <td>3</td>\n      <td>Barry</td>\n      <td>195</td>\n      <td>Alabama Power Co</td>\n      <td>Electric Utility</td>\n      <td>North Highway 43</td>\n      <td>Bucks</td>\n      <td>Mobile</td>\n      <td>Alabama</td>\n      <td>36512.0</td>\n      <td>natural gas</td>\n      <td>Coal = 1118.5 MW, Natural Gas = 1296.2 MW</td>\n      <td>Conventional Steam Coal; Natural Gas Fired Com...</td>\n      <td>2569.5</td>\n      <td>2414.7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1118.5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1296.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305.0</td>\n      <td>-88.010300</td>\n      <td>31.006900</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# update column names to small caps\npower_plants.columns = power_plants.columns.str.lower()\n```\n:::\n\n\nThis csv has longitude and latitude columns, which indicate the location of the power plants in the NAD83 CRS (EPSG:4269).\nWe use this information to create a new `gpd.GeoDataFrame` from the `pd.DataFrame` using the GeoPandas function `points_from_xy()` like this:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\npower_plants = gpd.GeoDataFrame(power_plants, # data\n                                    # specify geometry column\n                                    geometry=gpd.points_from_xy(power_plants.longitude, \n                                             power_plants.latitude),\n                                    # specify CRS\n                                    crs='EPSG:4269'\n                    )\n```\n:::\n\n\nCheck we now have a geometry column:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\npower_plants.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>unnamed: 0</th>\n      <th>objectid</th>\n      <th>plant_code</th>\n      <th>plant_name</th>\n      <th>utility_id</th>\n      <th>utility_name</th>\n      <th>sector_name</th>\n      <th>street_address</th>\n      <th>city</th>\n      <th>county</th>\n      <th>state</th>\n      <th>zip</th>\n      <th>primsource</th>\n      <th>source_desc</th>\n      <th>tech_desc</th>\n      <th>install_mw</th>\n      <th>total_mw</th>\n      <th>bat_mw</th>\n      <th>bio_mw</th>\n      <th>coal_mw</th>\n      <th>geo_mw</th>\n      <th>hydro_mw</th>\n      <th>hydrops_mw</th>\n      <th>ng_mw</th>\n      <th>nuclear_mw</th>\n      <th>crude_mw</th>\n      <th>solar_mw</th>\n      <th>wind_mw</th>\n      <th>other_mw</th>\n      <th>source</th>\n      <th>period</th>\n      <th>longitude</th>\n      <th>latitude</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>11570</td>\n      <td>1</td>\n      <td>Sand Point</td>\n      <td>63560</td>\n      <td>TDX Sand Point Generating, LLC</td>\n      <td>Electric Utility</td>\n      <td>100 Power Plant Way</td>\n      <td>Sand Point</td>\n      <td>Aleutians East</td>\n      <td>Alaska</td>\n      <td>99661.0</td>\n      <td>petroleum</td>\n      <td>Petroleum = 1.3 MW, Wind = 0.4 MW</td>\n      <td>Petroleum Liquids; Onshore Wind Turbine;</td>\n      <td>3.7</td>\n      <td>1.7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.3</td>\n      <td>NaN</td>\n      <td>0.4</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305.0</td>\n      <td>-160.497222</td>\n      <td>55.339722</td>\n      <td>POINT (-160.49722 55.33972)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>11571</td>\n      <td>2</td>\n      <td>Bankhead Dam</td>\n      <td>195</td>\n      <td>Alabama Power Co</td>\n      <td>Electric Utility</td>\n      <td>19001 Lock 17 Road</td>\n      <td>Northport</td>\n      <td>Tuscaloosa</td>\n      <td>Alabama</td>\n      <td>35476.0</td>\n      <td>hydroelectric</td>\n      <td>Hydroelectric = 53 MW</td>\n      <td>Conventional Hydroelectric</td>\n      <td>53.9</td>\n      <td>53.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>53.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305.0</td>\n      <td>-87.356823</td>\n      <td>33.458665</td>\n      <td>POINT (-87.35682 33.45867)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2.0</td>\n      <td>11572</td>\n      <td>3</td>\n      <td>Barry</td>\n      <td>195</td>\n      <td>Alabama Power Co</td>\n      <td>Electric Utility</td>\n      <td>North Highway 43</td>\n      <td>Bucks</td>\n      <td>Mobile</td>\n      <td>Alabama</td>\n      <td>36512.0</td>\n      <td>natural gas</td>\n      <td>Coal = 1118.5 MW, Natural Gas = 1296.2 MW</td>\n      <td>Conventional Steam Coal; Natural Gas Fired Com...</td>\n      <td>2569.5</td>\n      <td>2414.7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1118.5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1296.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305.0</td>\n      <td>-88.010300</td>\n      <td>31.006900</td>\n      <td>POINT (-88.01030 31.00690)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's see some information about the CRS of our power plants dataset:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# print information about the \nprint('is geographic?: ', power_plants.crs.is_geographic)\nprint('is projected?: ', power_plants.crs.is_projected)\nprint('datum: ', power_plants.crs.datum)\nprint('ellipsoid: ', power_plants.crs.ellipsoid)\n\npower_plants.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nis geographic?:  True\nis projected?:  False\ndatum:  North American Datum 1983\nellipsoid:  GRS 1980\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n<Geographic 2D CRS: EPSG:4269>\nName: NAD83\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: North America - onshore and offshore: Canada - Alberta; British Columbia; Manitoba; New Brunswick; Newfoundland and Labrador; Northwest Territories; Nova Scotia; Nunavut; Ontario; Prince Edward Island; Quebec; Saskatchewan; Yukon. Puerto Rico. United States (USA) - Alabama; Alaska; Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Hawaii; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming. US Virgin Islands. British Virgin Islands.\n- bounds: (167.65, 14.92, -47.74, 86.46)\nDatum: North American Datum 1983\n- Ellipsoid: GRS 1980\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n\nNow that we have a geometry column and a CRS, we can plot our dataset:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\npower_plants.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-csv-to-geo_files/figure-html/cell-11-output-2.png){width=580 height=408}\n:::\n:::\n\n\n## TIGER shapefile\n\nNext, we import the TIGER shapefile:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# read-in data\nstates = gpd.read_file('data/tl_2022_us_state/tl_2022_us_state.shp')\n# update column names to small caps\nstates.columns = states.columns.str.lower()\n\nstates.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>region</th>\n      <th>division</th>\n      <th>statefp</th>\n      <th>statens</th>\n      <th>geoid</th>\n      <th>stusps</th>\n      <th>name</th>\n      <th>lsad</th>\n      <th>mtfcc</th>\n      <th>funcstat</th>\n      <th>aland</th>\n      <th>awater</th>\n      <th>intptlat</th>\n      <th>intptlon</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>5</td>\n      <td>54</td>\n      <td>01779805</td>\n      <td>54</td>\n      <td>WV</td>\n      <td>West Virginia</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>62266456923</td>\n      <td>489045863</td>\n      <td>+38.6472854</td>\n      <td>-080.6183274</td>\n      <td>POLYGON ((-77.75438 39.33346, -77.75422 39.333...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>5</td>\n      <td>12</td>\n      <td>00294478</td>\n      <td>12</td>\n      <td>FL</td>\n      <td>Florida</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>138962819934</td>\n      <td>45971472526</td>\n      <td>+28.3989775</td>\n      <td>-082.5143005</td>\n      <td>MULTIPOLYGON (((-83.10874 24.62949, -83.10711 ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>3</td>\n      <td>17</td>\n      <td>01779784</td>\n      <td>17</td>\n      <td>IL</td>\n      <td>Illinois</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>143778515726</td>\n      <td>6216539665</td>\n      <td>+40.1028754</td>\n      <td>-089.1526108</td>\n      <td>POLYGON ((-87.89243 38.28285, -87.89334 38.282...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>4</td>\n      <td>27</td>\n      <td>00662849</td>\n      <td>27</td>\n      <td>MN</td>\n      <td>Minnesota</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>206244837557</td>\n      <td>18937184315</td>\n      <td>+46.3159573</td>\n      <td>-094.1996043</td>\n      <td>POLYGON ((-95.31989 48.99892, -95.31747 48.998...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>5</td>\n      <td>24</td>\n      <td>01714934</td>\n      <td>24</td>\n      <td>MD</td>\n      <td>Maryland</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>25151771744</td>\n      <td>6979295311</td>\n      <td>+38.9466584</td>\n      <td>-076.6744939</td>\n      <td>POLYGON ((-75.75600 39.24607, -75.75579 39.243...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's see some information about the CRS of our states geodataframe:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# print information about the CRS\nstates.crs\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n<Geographic 2D CRS: EPSG:4269>\nName: NAD83\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: North America - onshore and offshore: Canada - Alberta; British Columbia; Manitoba; New Brunswick; Newfoundland and Labrador; Northwest Territories; Nova Scotia; Nunavut; Ontario; Prince Edward Island; Quebec; Saskatchewan; Yukon. Puerto Rico. United States (USA) - Alabama; Alaska; Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Hawaii; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming. US Virgin Islands. British Virgin Islands.\n- bounds: (167.65, 14.92, -47.74, 86.46)\nDatum: North American Datum 1983\n- Ellipsoid: GRS 1980\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n\nAnd plot it:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nstates.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-csv-to-geo_files/figure-html/cell-14-output-2.png){width=566 height=183}\n:::\n:::\n\n\n Notice the map covers a big extension, this is because, according to the TIGER shapefiles metadata:\n \n > In addition to the fifty states, the Census Bureau treats the District of Columbia, Puerto Rico, and the Island areas (American Samoa, the Commonwealth of the Northern Mariana Islands, Guam, and the U.S. Virgin Islands) as statistical equivalents of states for the purpose of data presentation. \n\n In [this US Census Bureau file](https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf) we can see what each code for the region, division, and state corresponds to. \n These should be numeric codes, so we can start by updating the corresponding columns in the states geo-dataframe:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n # notice region, division, and statefp are strings (object) types\n states.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nregion        object\ndivision      object\nstatefp       object\nstatens       object\ngeoid         object\nstusps        object\nname          object\nlsad          object\nmtfcc         object\nfuncstat      object\naland          int64\nawater         int64\nintptlat      object\nintptlon      object\ngeometry    geometry\ndtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n # update dtypes of code columns\nstates.region = states.region.astype('int')\nstates.division = states.division.astype('int')\nstates.statefp = states.statefp.astype('int')\n```\n:::\n\n\n States corresponds to regions 1 through 4. \n However, there's also a region code 9.\n These rows correspond to non-state regions:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nprint(states.region.unique())\nstates[states.region==9]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3 2 1 4 9]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>region</th>\n      <th>division</th>\n      <th>statefp</th>\n      <th>statens</th>\n      <th>geoid</th>\n      <th>stusps</th>\n      <th>name</th>\n      <th>lsad</th>\n      <th>mtfcc</th>\n      <th>funcstat</th>\n      <th>aland</th>\n      <th>awater</th>\n      <th>intptlat</th>\n      <th>intptlon</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>34</th>\n      <td>9</td>\n      <td>0</td>\n      <td>78</td>\n      <td>01802710</td>\n      <td>78</td>\n      <td>VI</td>\n      <td>United States Virgin Islands</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>348021909</td>\n      <td>1550236187</td>\n      <td>+18.3392359</td>\n      <td>-064.9500433</td>\n      <td>MULTIPOLYGON (((-64.76834 18.26033, -64.77074 ...</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>9</td>\n      <td>0</td>\n      <td>69</td>\n      <td>01779809</td>\n      <td>69</td>\n      <td>MP</td>\n      <td>Commonwealth of the Northern Mariana Islands</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>472292521</td>\n      <td>4644252458</td>\n      <td>+15.0010865</td>\n      <td>+145.6181702</td>\n      <td>MULTIPOLYGON (((145.05897 14.12500, 145.06302 ...</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>9</td>\n      <td>0</td>\n      <td>66</td>\n      <td>01802705</td>\n      <td>66</td>\n      <td>GU</td>\n      <td>Guam</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>543555849</td>\n      <td>934337453</td>\n      <td>+13.4417451</td>\n      <td>+144.7719021</td>\n      <td>POLYGON ((144.56343 13.44806, 144.56357 13.450...</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>9</td>\n      <td>0</td>\n      <td>60</td>\n      <td>01802701</td>\n      <td>60</td>\n      <td>AS</td>\n      <td>American Samoa</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>197759069</td>\n      <td>1307243751</td>\n      <td>-14.2671590</td>\n      <td>-170.6682674</td>\n      <td>MULTIPOLYGON (((-170.53809 -14.33613, -170.548...</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>9</td>\n      <td>0</td>\n      <td>72</td>\n      <td>01779808</td>\n      <td>72</td>\n      <td>PR</td>\n      <td>Puerto Rico</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>8869029522</td>\n      <td>4922249087</td>\n      <td>+18.2176480</td>\n      <td>-066.4107992</td>\n      <td>MULTIPOLYGON (((-66.32322 17.87767, -66.33170 ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n We can check that Alaska and the non-state regions are causing the long map:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# plot data in states that is not Alaska (code 2) and doesn't have region code 9\nstates[(states.statefp!=2) & (states.region!=9)].plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-csv-to-geo_files/figure-html/cell-18-output-2.png){width=566 height=214}\n:::\n:::\n\n\n## Data selection\n\nFor the pupose of this exercise, we want to keep only data for the contiguous states.\nLet's overwrite the geo-dataframes accordingly:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nstates = states[(states.region!=9) & (~states.statefp.isin([2,15]))]\npower_plants = power_plants[~power_plants.state.isin(['Puerto Rico','Hawaii','Alaska'])]\n```\n:::\n\n\n::: {.callout-tip}\n## `~` = not\nIn the previous code we used the syntax \n```python\n~df.column.isin([val1, val2, val3])\n```\nThe `~` tilde symbol is used in Python to negate a statement. \nSo the previous line could be read as \"the values in df's column which are *not* in the list [val1, val2, val3].\"\n:::\n## Plotting\n\nBefore we plot our data, let's make sure they are in the same CRS:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nstates.crs == power_plants.crs\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nTrue\n```\n:::\n:::\n\n\nWe can now try plotting both datasets together. \nTo color the power_plants dots according to color we just need\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\n\n# add states \nstates.plot(ax=ax,\n            color='none',\n            edgecolor = 'slategray')\n\n# add electric power plants colored by energy source\npower_plants.plot(ax=ax, \n                  column='primsource', # color points according to primsource value\n                  legend=True,    # add legend\n                  markersize = 4, # adjust point size\n                  cmap='tab20', # this color map has 20 different colors\n                  alpha=0.5)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-csv-to-geo_files/figure-html/cell-21-output-1.png){width=566 height=322}\n:::\n:::\n\n\nAnd we can finish by adding more information to contextualize our map:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# figsize updates the figure size\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# --------------------------\n# remove the axis box around the map\nax.axis('off')\n\n# update title\nax.set_title('Operable electric generating plants in the contiguous United States',\nfontsize=20)\n\n# annotate the data source\nax.annotate(\"Data: U.S. Energy Information Administration (EIA), accessed Oct 30, 2023 \\nhttps://atlas.eia.gov/datasets/eia::power-plants/about\", \n            xy=(0.25, .06), # position\n            xycoords='figure fraction', \n            fontsize=10, \n            color='#555555')\n\n# --------------------------\n# add states \nstates.plot(ax=ax,\n               color='none',\n               edgecolor = '#362312')\n\n# add electric power plants colored by energy source\npower_plants.plot(ax=ax, \n                  column='primsource',\n                  legend=True,\n                  markersize = 4,\n                  cmap='tab20',\n                  alpha=0.5,\n                  # adjust legend\n                  legend_kwds={'loc': \"lower right\", \n                                'title':'Primary energy source',\n                                'title_fontsize':'small', \n                                'fontsize':'small'})\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n<AxesSubplot:title={'center':'Operable electric generating plants in the contiguous United States'}>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-csv-to-geo_files/figure-html/cell-22-output-2.png){width=923 height=501}\n:::\n:::\n\n\n<!--\n\nhttps://www.flexprojector.com\n\nhttps://www.earthdatascience.org/courses/scientists-guide-to-plotting-data-in-python/plot-spatial-data/customize-vector-plots/python-customize-map-legends-geopandas/\n\nhttps://stackoverflow.com/questions/74143732/customize-legend-labels-in-geopandas\n-->\n\n",
    "supporting": [
      "lesson-12-csv-to-geo_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}