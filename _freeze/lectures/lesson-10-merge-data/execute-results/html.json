{
  "hash": "ad37be72aa5a7375aa02a48848b87715",
  "result": {
    "markdown": "<!-- \nFixing the preview working directory\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\nhome = os.path.expanduser(\"~\")\nos.chdir(os.path.join(home,'eds-220-book'))\n```\n:::\n\n\nIgnore ShapelyDeprecationWarning warning in render\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport shapely\nimport warnings\nfrom shapely.errors import ShapelyDeprecationWarning\n\nwarnings.filterwarnings(\"ignore\", category=ShapelyDeprecationWarning) \n```\n:::\n\n\n-->\n\n# Merging data\n\nIn this section we will learn how to join dataframes and will apply this to creating a choropleth map with `geopandas`.\n\n<!--\n## Types of Joins\n\nFrequently, analysis of data will require merging these separately managed tables back together. There are multiple ways to join the observations in two tables, based on how the rows of one table are merged with the rows of the other. Regardless of the join we will perform, we need to start by identifying the primary key in each table and how these appear as foreign keys in other tables.\n\nWhen conceptualizing merges, one can think of two tables, one on the *left* and one on the *right*.\n\n![](/images/merging_data/join-diagrams-separate.png)\n\n### Inner Join\nAn *INNER JOIN*  is when you merge the subset of rows that have matches in both the left table and the right table.\n\n![](/images/merging_data/join-diagrams-inner.png)\n\n### Left Join\nA *LEFT JOIN* takes all of the rows from the left table, and merges on the data from matching rows in the right table. \nKeys that don't match from the left table are still provided with a missing value (na) from the right table. \n\n![](/images/merging_data/join-diagrams-left.png)\n\n### Right Join\nA *RIGHT JOIN* is the same as a left join, except that all of the rows from the right table are included with matching data from the left, or a missing value. \nNotice that left and right joins can ultimately be the same depending on the positions of the tables\n\n![](/images/merging_data/join-diagrams-right.png)\n\n\n### Full Outer Join\nFinally, a *FULL OUTER JOIN* includes all data from all rows in both tables, and includes missing values wherever necessary.\n\n![](/images/merging_data/join-diagrams-full.png)\n\nSometimes people represent joins as Venn diagrams, showing which parts of the left and right tables are included in the results for each join. This representation is useful, however, they miss part of the story related to where the missing value comes from in each result.\n\n![Image source: R for Data Science, Wickham & Grolemund.](/images/merging_data/join-venn.png)\n\nWe suggest reading<a href=https://r4ds.had.co.nz/relational-data.html#join-problems target=\"_blank\"> the Relational Data chapter in the \"R for Data Science\" book </a> for more examples and best practices about joins.\n\n-->\n\n## Goal\nOur goal in this lesson will be to join two datasets, one with demographic information and another with country outlines, to create the following choropleth map showing the number of Arctic communities by country and their location in [Scandinavia](https://en.wikipedia.org/wiki/Scandinavia):\n\n![](/images/arctic-comms.png)\n\n## Data\n\nWe will use two datasets in this lesson. \n The first dataset is [Natural Earth's medium scale  cultural boundaries data (1:50m)](https://www.naturalearthdata.com/downloads/50m-cultural-vectors/). \nWe can obtain this dataset by downloading the shapefile. \n[Natural Earth](https://www.naturalearthdata.com) is a public domain dataset with ready-to-use data for creating maps. \n\nThe second dataset we will use is a [list of Arctic communities and their location (Brook, 2023)](https://search.dataone.org/view/doi%3A10.18739%2FA28S4JQ80) which can be accessed through the DataONE repository. \nThis is a GeoJSON file with the following attributes:\n\n- **name**: name of Arctic community, \n- **population**: population of Arctic community, as of 2022\n- **country**: country that the Arctic community falls within (see dataset metadata for the codes)\n- **geoname-id**: numeric codes that uniquely identify all administrative/legal and statistical geographic areas for which the Census Bureau tabulates data\n\n\n## Data preparation\n\nWe start our analysis by importing the necessary libraries:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport geopandas as gpd\n```\n:::\n\n\n<!--\n# will use this library to add a background to our map\nimport contextily as ctx\n-->\n\nThe Natural Earth dataset has many columns, so we need to update the `pandas` display settings to show all columns:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# display all column when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n```\n:::\n\n\n### Countries \n\nNow we move on to preparing the polygons for the Scandinavian countries.\nTo import the Natural Earth countries polygons we use the `geopandas.read_file()` function again:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# import countries polygons\ncountries = gpd.read_file('data/ne_50m_admin_0_countries/ne_50m_admin_0_countries.shp')\ncountries.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>featurecla</th>\n      <th>scalerank</th>\n      <th>LABELRANK</th>\n      <th>SOVEREIGNT</th>\n      <th>SOV_A3</th>\n      <th>ADM0_DIF</th>\n      <th>LEVEL</th>\n      <th>TYPE</th>\n      <th>TLC</th>\n      <th>ADMIN</th>\n      <th>ADM0_A3</th>\n      <th>GEOU_DIF</th>\n      <th>GEOUNIT</th>\n      <th>GU_A3</th>\n      <th>SU_DIF</th>\n      <th>SUBUNIT</th>\n      <th>SU_A3</th>\n      <th>BRK_DIFF</th>\n      <th>NAME</th>\n      <th>NAME_LONG</th>\n      <th>BRK_A3</th>\n      <th>BRK_NAME</th>\n      <th>BRK_GROUP</th>\n      <th>ABBREV</th>\n      <th>POSTAL</th>\n      <th>FORMAL_EN</th>\n      <th>FORMAL_FR</th>\n      <th>NAME_CIAWF</th>\n      <th>NOTE_ADM0</th>\n      <th>NOTE_BRK</th>\n      <th>NAME_SORT</th>\n      <th>NAME_ALT</th>\n      <th>MAPCOLOR7</th>\n      <th>MAPCOLOR8</th>\n      <th>MAPCOLOR9</th>\n      <th>MAPCOLOR13</th>\n      <th>POP_EST</th>\n      <th>POP_RANK</th>\n      <th>POP_YEAR</th>\n      <th>GDP_MD</th>\n      <th>GDP_YEAR</th>\n      <th>ECONOMY</th>\n      <th>INCOME_GRP</th>\n      <th>FIPS_10</th>\n      <th>ISO_A2</th>\n      <th>ISO_A2_EH</th>\n      <th>ISO_A3</th>\n      <th>ISO_A3_EH</th>\n      <th>ISO_N3</th>\n      <th>ISO_N3_EH</th>\n      <th>UN_A3</th>\n      <th>WB_A2</th>\n      <th>WB_A3</th>\n      <th>WOE_ID</th>\n      <th>WOE_ID_EH</th>\n      <th>WOE_NOTE</th>\n      <th>ADM0_ISO</th>\n      <th>ADM0_DIFF</th>\n      <th>ADM0_TLC</th>\n      <th>ADM0_A3_US</th>\n      <th>ADM0_A3_FR</th>\n      <th>ADM0_A3_RU</th>\n      <th>ADM0_A3_ES</th>\n      <th>ADM0_A3_CN</th>\n      <th>ADM0_A3_TW</th>\n      <th>ADM0_A3_IN</th>\n      <th>ADM0_A3_NP</th>\n      <th>ADM0_A3_PK</th>\n      <th>ADM0_A3_DE</th>\n      <th>ADM0_A3_GB</th>\n      <th>ADM0_A3_BR</th>\n      <th>ADM0_A3_IL</th>\n      <th>ADM0_A3_PS</th>\n      <th>ADM0_A3_SA</th>\n      <th>ADM0_A3_EG</th>\n      <th>ADM0_A3_MA</th>\n      <th>ADM0_A3_PT</th>\n      <th>ADM0_A3_AR</th>\n      <th>ADM0_A3_JP</th>\n      <th>ADM0_A3_KO</th>\n      <th>ADM0_A3_VN</th>\n      <th>ADM0_A3_TR</th>\n      <th>ADM0_A3_ID</th>\n      <th>ADM0_A3_PL</th>\n      <th>ADM0_A3_GR</th>\n      <th>ADM0_A3_IT</th>\n      <th>ADM0_A3_NL</th>\n      <th>ADM0_A3_SE</th>\n      <th>ADM0_A3_BD</th>\n      <th>ADM0_A3_UA</th>\n      <th>ADM0_A3_UN</th>\n      <th>ADM0_A3_WB</th>\n      <th>CONTINENT</th>\n      <th>REGION_UN</th>\n      <th>SUBREGION</th>\n      <th>REGION_WB</th>\n      <th>NAME_LEN</th>\n      <th>LONG_LEN</th>\n      <th>ABBREV_LEN</th>\n      <th>TINY</th>\n      <th>HOMEPART</th>\n      <th>MIN_ZOOM</th>\n      <th>MIN_LABEL</th>\n      <th>MAX_LABEL</th>\n      <th>LABEL_X</th>\n      <th>LABEL_Y</th>\n      <th>NE_ID</th>\n      <th>WIKIDATAID</th>\n      <th>NAME_AR</th>\n      <th>NAME_BN</th>\n      <th>NAME_DE</th>\n      <th>NAME_EN</th>\n      <th>NAME_ES</th>\n      <th>NAME_FA</th>\n      <th>NAME_FR</th>\n      <th>NAME_EL</th>\n      <th>NAME_HE</th>\n      <th>NAME_HI</th>\n      <th>NAME_HU</th>\n      <th>NAME_ID</th>\n      <th>NAME_IT</th>\n      <th>NAME_JA</th>\n      <th>NAME_KO</th>\n      <th>NAME_NL</th>\n      <th>NAME_PL</th>\n      <th>NAME_PT</th>\n      <th>NAME_RU</th>\n      <th>NAME_SV</th>\n      <th>NAME_TR</th>\n      <th>NAME_UK</th>\n      <th>NAME_UR</th>\n      <th>NAME_VI</th>\n      <th>NAME_ZH</th>\n      <th>NAME_ZHT</th>\n      <th>FCLASS_ISO</th>\n      <th>TLC_DIFF</th>\n      <th>FCLASS_TLC</th>\n      <th>FCLASS_US</th>\n      <th>FCLASS_FR</th>\n      <th>FCLASS_RU</th>\n      <th>FCLASS_ES</th>\n      <th>FCLASS_CN</th>\n      <th>FCLASS_TW</th>\n      <th>FCLASS_IN</th>\n      <th>FCLASS_NP</th>\n      <th>FCLASS_PK</th>\n      <th>FCLASS_DE</th>\n      <th>FCLASS_GB</th>\n      <th>FCLASS_BR</th>\n      <th>FCLASS_IL</th>\n      <th>FCLASS_PS</th>\n      <th>FCLASS_SA</th>\n      <th>FCLASS_EG</th>\n      <th>FCLASS_MA</th>\n      <th>FCLASS_PT</th>\n      <th>FCLASS_AR</th>\n      <th>FCLASS_JP</th>\n      <th>FCLASS_KO</th>\n      <th>FCLASS_VN</th>\n      <th>FCLASS_TR</th>\n      <th>FCLASS_ID</th>\n      <th>FCLASS_PL</th>\n      <th>FCLASS_GR</th>\n      <th>FCLASS_IT</th>\n      <th>FCLASS_NL</th>\n      <th>FCLASS_SE</th>\n      <th>FCLASS_BD</th>\n      <th>FCLASS_UA</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Admin-0 country</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Zimbabwe</td>\n      <td>ZWE</td>\n      <td>0</td>\n      <td>2</td>\n      <td>Sovereign country</td>\n      <td>1</td>\n      <td>Zimbabwe</td>\n      <td>ZWE</td>\n      <td>0</td>\n      <td>Zimbabwe</td>\n      <td>ZWE</td>\n      <td>0</td>\n      <td>Zimbabwe</td>\n      <td>ZWE</td>\n      <td>0</td>\n      <td>Zimbabwe</td>\n      <td>Zimbabwe</td>\n      <td>ZWE</td>\n      <td>Zimbabwe</td>\n      <td>NaN</td>\n      <td>Zimb.</td>\n      <td>ZW</td>\n      <td>Republic of Zimbabwe</td>\n      <td>NaN</td>\n      <td>Zimbabwe</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Zimbabwe</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>5</td>\n      <td>3</td>\n      <td>9</td>\n      <td>14645468.0</td>\n      <td>14</td>\n      <td>2019</td>\n      <td>21440</td>\n      <td>2019</td>\n      <td>5. Emerging region: G20</td>\n      <td>5. Low income</td>\n      <td>ZI</td>\n      <td>ZW</td>\n      <td>ZW</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>ZW</td>\n      <td>ZWE</td>\n      <td>23425004</td>\n      <td>23425004</td>\n      <td>Exact WOE match as country</td>\n      <td>ZWE</td>\n      <td>NaN</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>ZWE</td>\n      <td>-99</td>\n      <td>-99</td>\n      <td>Africa</td>\n      <td>Africa</td>\n      <td>Eastern Africa</td>\n      <td>Sub-Saharan Africa</td>\n      <td>8</td>\n      <td>8</td>\n      <td>5</td>\n      <td>-99</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>2.5</td>\n      <td>8.0</td>\n      <td>29.925444</td>\n      <td>-18.911640</td>\n      <td>1159321441</td>\n      <td>Q954</td>\n      <td>زيمبابوي</td>\n      <td>জিম্বাবুয়ে</td>\n      <td>Simbabwe</td>\n      <td>Zimbabwe</td>\n      <td>Zimbabue</td>\n      <td>زیمبابوه</td>\n      <td>Zimbabwe</td>\n      <td>Ζιμπάμπουε</td>\n      <td>זימבבואה</td>\n      <td>ज़िम्बाब्वे</td>\n      <td>Zimbabwe</td>\n      <td>Zimbabwe</td>\n      <td>Zimbabwe</td>\n      <td>ジンバブエ</td>\n      <td>짐바브웨</td>\n      <td>Zimbabwe</td>\n      <td>Zimbabwe</td>\n      <td>Zimbábue</td>\n      <td>Зимбабве</td>\n      <td>Zimbabwe</td>\n      <td>Zimbabve</td>\n      <td>Зімбабве</td>\n      <td>زمبابوے</td>\n      <td>Zimbabwe</td>\n      <td>津巴布韦</td>\n      <td>辛巴威</td>\n      <td>Admin-0 country</td>\n      <td>NaN</td>\n      <td>Admin-0 country</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>POLYGON ((31.28789 -22.40205, 31.19727 -22.344...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Admin-0 country</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Zambia</td>\n      <td>ZMB</td>\n      <td>0</td>\n      <td>2</td>\n      <td>Sovereign country</td>\n      <td>1</td>\n      <td>Zambia</td>\n      <td>ZMB</td>\n      <td>0</td>\n      <td>Zambia</td>\n      <td>ZMB</td>\n      <td>0</td>\n      <td>Zambia</td>\n      <td>ZMB</td>\n      <td>0</td>\n      <td>Zambia</td>\n      <td>Zambia</td>\n      <td>ZMB</td>\n      <td>Zambia</td>\n      <td>NaN</td>\n      <td>Zambia</td>\n      <td>ZM</td>\n      <td>Republic of Zambia</td>\n      <td>NaN</td>\n      <td>Zambia</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Zambia</td>\n      <td>NaN</td>\n      <td>5</td>\n      <td>8</td>\n      <td>5</td>\n      <td>13</td>\n      <td>17861030.0</td>\n      <td>14</td>\n      <td>2019</td>\n      <td>23309</td>\n      <td>2019</td>\n      <td>7. Least developed region</td>\n      <td>4. Lower middle income</td>\n      <td>ZA</td>\n      <td>ZM</td>\n      <td>ZM</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>894</td>\n      <td>894</td>\n      <td>894</td>\n      <td>ZM</td>\n      <td>ZMB</td>\n      <td>23425003</td>\n      <td>23425003</td>\n      <td>Exact WOE match as country</td>\n      <td>ZMB</td>\n      <td>NaN</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>ZMB</td>\n      <td>-99</td>\n      <td>-99</td>\n      <td>Africa</td>\n      <td>Africa</td>\n      <td>Eastern Africa</td>\n      <td>Sub-Saharan Africa</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>-99</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>8.0</td>\n      <td>26.395298</td>\n      <td>-14.660804</td>\n      <td>1159321439</td>\n      <td>Q953</td>\n      <td>زامبيا</td>\n      <td>জাম্বিয়া</td>\n      <td>Sambia</td>\n      <td>Zambia</td>\n      <td>Zambia</td>\n      <td>زامبیا</td>\n      <td>Zambie</td>\n      <td>Ζάμπια</td>\n      <td>זמביה</td>\n      <td>ज़ाम्बिया</td>\n      <td>Zambia</td>\n      <td>Zambia</td>\n      <td>Zambia</td>\n      <td>ザンビア</td>\n      <td>잠비아</td>\n      <td>Zambia</td>\n      <td>Zambia</td>\n      <td>Zâmbia</td>\n      <td>Замбия</td>\n      <td>Zambia</td>\n      <td>Zambiya</td>\n      <td>Замбія</td>\n      <td>زیمبیا</td>\n      <td>Zambia</td>\n      <td>赞比亚</td>\n      <td>尚比亞</td>\n      <td>Admin-0 country</td>\n      <td>NaN</td>\n      <td>Admin-0 country</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>POLYGON ((30.39609 -15.64307, 30.25068 -15.643...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Admin-0 country</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Yemen</td>\n      <td>YEM</td>\n      <td>0</td>\n      <td>2</td>\n      <td>Sovereign country</td>\n      <td>1</td>\n      <td>Yemen</td>\n      <td>YEM</td>\n      <td>0</td>\n      <td>Yemen</td>\n      <td>YEM</td>\n      <td>0</td>\n      <td>Yemen</td>\n      <td>YEM</td>\n      <td>0</td>\n      <td>Yemen</td>\n      <td>Yemen</td>\n      <td>YEM</td>\n      <td>Yemen</td>\n      <td>NaN</td>\n      <td>Yem.</td>\n      <td>YE</td>\n      <td>Republic of Yemen</td>\n      <td>NaN</td>\n      <td>Yemen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Yemen, Rep.</td>\n      <td>NaN</td>\n      <td>5</td>\n      <td>3</td>\n      <td>3</td>\n      <td>11</td>\n      <td>29161922.0</td>\n      <td>15</td>\n      <td>2019</td>\n      <td>22581</td>\n      <td>2019</td>\n      <td>7. Least developed region</td>\n      <td>4. Lower middle income</td>\n      <td>YM</td>\n      <td>YE</td>\n      <td>YE</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>887</td>\n      <td>887</td>\n      <td>887</td>\n      <td>RY</td>\n      <td>YEM</td>\n      <td>23425002</td>\n      <td>23425002</td>\n      <td>Exact WOE match as country</td>\n      <td>YEM</td>\n      <td>NaN</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>YEM</td>\n      <td>-99</td>\n      <td>-99</td>\n      <td>Asia</td>\n      <td>Asia</td>\n      <td>Western Asia</td>\n      <td>Middle East &amp; North Africa</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4</td>\n      <td>-99</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>8.0</td>\n      <td>45.874383</td>\n      <td>15.328226</td>\n      <td>1159321425</td>\n      <td>Q805</td>\n      <td>اليمن</td>\n      <td>ইয়েমেন</td>\n      <td>Jemen</td>\n      <td>Yemen</td>\n      <td>Yemen</td>\n      <td>یمن</td>\n      <td>Yémen</td>\n      <td>Υεμένη</td>\n      <td>תימן</td>\n      <td>यमन</td>\n      <td>Jemen</td>\n      <td>Yaman</td>\n      <td>Yemen</td>\n      <td>イエメン</td>\n      <td>예멘</td>\n      <td>Jemen</td>\n      <td>Jemen</td>\n      <td>Iémen</td>\n      <td>Йемен</td>\n      <td>Jemen</td>\n      <td>Yemen</td>\n      <td>Ємен</td>\n      <td>یمن</td>\n      <td>Yemen</td>\n      <td>也门</td>\n      <td>葉門</td>\n      <td>Admin-0 country</td>\n      <td>NaN</td>\n      <td>Admin-0 country</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>MULTIPOLYGON (((53.08564 16.64839, 52.58145 16...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Admin-0 country</td>\n      <td>3</td>\n      <td>2</td>\n      <td>Vietnam</td>\n      <td>VNM</td>\n      <td>0</td>\n      <td>2</td>\n      <td>Sovereign country</td>\n      <td>1</td>\n      <td>Vietnam</td>\n      <td>VNM</td>\n      <td>0</td>\n      <td>Vietnam</td>\n      <td>VNM</td>\n      <td>0</td>\n      <td>Vietnam</td>\n      <td>VNM</td>\n      <td>0</td>\n      <td>Vietnam</td>\n      <td>Vietnam</td>\n      <td>VNM</td>\n      <td>Vietnam</td>\n      <td>NaN</td>\n      <td>Viet.</td>\n      <td>VN</td>\n      <td>Socialist Republic of Vietnam</td>\n      <td>NaN</td>\n      <td>Vietnam</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Vietnam</td>\n      <td>NaN</td>\n      <td>5</td>\n      <td>6</td>\n      <td>5</td>\n      <td>4</td>\n      <td>96462106.0</td>\n      <td>16</td>\n      <td>2019</td>\n      <td>261921</td>\n      <td>2019</td>\n      <td>5. Emerging region: G20</td>\n      <td>4. Lower middle income</td>\n      <td>VM</td>\n      <td>VN</td>\n      <td>VN</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>704</td>\n      <td>704</td>\n      <td>704</td>\n      <td>VN</td>\n      <td>VNM</td>\n      <td>23424984</td>\n      <td>23424984</td>\n      <td>Exact WOE match as country</td>\n      <td>VNM</td>\n      <td>NaN</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>VNM</td>\n      <td>-99</td>\n      <td>-99</td>\n      <td>Asia</td>\n      <td>Asia</td>\n      <td>South-Eastern Asia</td>\n      <td>East Asia &amp; Pacific</td>\n      <td>7</td>\n      <td>7</td>\n      <td>5</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>7.0</td>\n      <td>105.387292</td>\n      <td>21.715416</td>\n      <td>1159321417</td>\n      <td>Q881</td>\n      <td>فيتنام</td>\n      <td>ভিয়েতনাম</td>\n      <td>Vietnam</td>\n      <td>Vietnam</td>\n      <td>Vietnam</td>\n      <td>ویتنام</td>\n      <td>Viêt Nam</td>\n      <td>Βιετνάμ</td>\n      <td>וייטנאם</td>\n      <td>वियतनाम</td>\n      <td>Vietnám</td>\n      <td>Vietnam</td>\n      <td>Vietnam</td>\n      <td>ベトナム</td>\n      <td>베트남</td>\n      <td>Vietnam</td>\n      <td>Wietnam</td>\n      <td>Vietname</td>\n      <td>Вьетнам</td>\n      <td>Vietnam</td>\n      <td>Vietnam</td>\n      <td>В'єтнам</td>\n      <td>ویتنام</td>\n      <td>Việt Nam</td>\n      <td>越南</td>\n      <td>越南</td>\n      <td>Admin-0 country</td>\n      <td>NaN</td>\n      <td>Admin-0 country</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>MULTIPOLYGON (((104.06396 10.39082, 104.08301 ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Admin-0 country</td>\n      <td>5</td>\n      <td>3</td>\n      <td>Venezuela</td>\n      <td>VEN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>Sovereign country</td>\n      <td>1</td>\n      <td>Venezuela</td>\n      <td>VEN</td>\n      <td>0</td>\n      <td>Venezuela</td>\n      <td>VEN</td>\n      <td>0</td>\n      <td>Venezuela</td>\n      <td>VEN</td>\n      <td>0</td>\n      <td>Venezuela</td>\n      <td>Venezuela</td>\n      <td>VEN</td>\n      <td>Venezuela</td>\n      <td>NaN</td>\n      <td>Ven.</td>\n      <td>VE</td>\n      <td>Bolivarian Republic of Venezuela</td>\n      <td>República Bolivariana de Venezuela</td>\n      <td>Venezuela</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Venezuela, RB</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>28515829.0</td>\n      <td>15</td>\n      <td>2019</td>\n      <td>482359</td>\n      <td>2014</td>\n      <td>5. Emerging region: G20</td>\n      <td>3. Upper middle income</td>\n      <td>VE</td>\n      <td>VE</td>\n      <td>VE</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>862</td>\n      <td>862</td>\n      <td>862</td>\n      <td>VE</td>\n      <td>VEN</td>\n      <td>23424982</td>\n      <td>23424982</td>\n      <td>Exact WOE match as country</td>\n      <td>VEN</td>\n      <td>NaN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>VEN</td>\n      <td>-99</td>\n      <td>-99</td>\n      <td>South America</td>\n      <td>Americas</td>\n      <td>South America</td>\n      <td>Latin America &amp; Caribbean</td>\n      <td>9</td>\n      <td>9</td>\n      <td>4</td>\n      <td>-99</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>2.5</td>\n      <td>7.5</td>\n      <td>-64.599381</td>\n      <td>7.182476</td>\n      <td>1159321411</td>\n      <td>Q717</td>\n      <td>فنزويلا</td>\n      <td>ভেনেজুয়েলা</td>\n      <td>Venezuela</td>\n      <td>Venezuela</td>\n      <td>Venezuela</td>\n      <td>ونزوئلا</td>\n      <td>Venezuela</td>\n      <td>Βενεζουέλα</td>\n      <td>ונצואלה</td>\n      <td>वेनेज़ुएला</td>\n      <td>Venezuela</td>\n      <td>Venezuela</td>\n      <td>Venezuela</td>\n      <td>ベネズエラ</td>\n      <td>베네수엘라</td>\n      <td>Venezuela</td>\n      <td>Wenezuela</td>\n      <td>Venezuela</td>\n      <td>Венесуэла</td>\n      <td>Venezuela</td>\n      <td>Venezuela</td>\n      <td>Венесуела</td>\n      <td>وینیزویلا</td>\n      <td>Venezuela</td>\n      <td>委内瑞拉</td>\n      <td>委內瑞拉</td>\n      <td>Admin-0 country</td>\n      <td>NaN</td>\n      <td>Admin-0 country</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>MULTIPOLYGON (((-60.82119 9.13838, -60.94141 9...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTaking a quick look at this dataset:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# quick view\ncountries.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-10-merge-data_files/figure-html/cell-7-output-2.png){width=577 height=293}\n:::\n:::\n\n\nNotice the column names are in all caps. \nIt is easier to work with column names in small caps because we don't need to be pressing shift or capslock. \nWe can do this update like this:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# re-assign the column names: .str.lower() makes them lower case\ncountries.columns = countries.columns.str.lower()\nprint(countries.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['featurecla', 'scalerank', 'labelrank', 'sovereignt', 'sov_a3',\n       'adm0_dif', 'level', 'type', 'tlc', 'admin',\n       ...\n       'fclass_tr', 'fclass_id', 'fclass_pl', 'fclass_gr', 'fclass_it',\n       'fclass_nl', 'fclass_se', 'fclass_bd', 'fclass_ua', 'geometry'],\n      dtype='object', length=169)\n```\n:::\n:::\n\n\nNext, we want to select only the data for Scandinavian countries (Aland Islands, Denmark, Finland, Faroe Islands, Iceland, Norway, and Sweden) and a few of the 169 columns in the dataset:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# names of Scandinavian countries\nscandi_names = ['Aland Islands',\n                'Denmark',\n                'Finland',\n                'Faroe Islands',\n                'Iceland',\n                'Norway',\n                'Sweden']\n\n# select Scandi countries and admin, type, and geometry columns\n# remeber: the geometry column has the polygons for each country\nscandi_countries = countries.loc[countries.admin.isin(scandi_names),['admin','type','geometry']]\nscandi_countries\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>admin</th>\n      <th>type</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>48</th>\n      <td>Sweden</td>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((19.07646 57.83594, 18.99375 57...</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>Norway</td>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((20.62217 69.03687, 20.49199 69...</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>Iceland</td>\n      <td>Sovereign country</td>\n      <td>POLYGON ((-15.54312 66.22852, -15.42847 66.224...</td>\n    </tr>\n    <tr>\n      <th>169</th>\n      <td>Finland</td>\n      <td>Country</td>\n      <td>MULTIPOLYGON (((24.15547 65.80527, 24.04902 65...</td>\n    </tr>\n    <tr>\n      <th>182</th>\n      <td>Faroe Islands</td>\n      <td>Dependency</td>\n      <td>MULTIPOLYGON (((-6.62319 61.80596, -6.64277 61...</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>Denmark</td>\n      <td>Country</td>\n      <td>MULTIPOLYGON (((12.56875 55.78506, 12.57119 55...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNotice the Aland Islands do not appear in the `scandi_countries` dataframe. \nLet's verify that the 'Aland Islands' value does not occur anywhere in the dataframe:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# check Aland Islands is nowhere in data frame\n'Aland Islands' in countries.values\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nFalse\n```\n:::\n:::\n\n\nThe `values` attribute of a dataframe returns all the values in the dataframe as an array:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# the underlying values of the dataframe\ncountries.values\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\narray([['Admin-0 country', 1, 3, ..., nan, nan,\n        <POLYGON ((31.288 -22.402, 31.197 -22.345, 31.073 -22.308, 30.916 -22.291, 3...>],\n       ['Admin-0 country', 1, 3, ..., nan, nan,\n        <POLYGON ((30.396 -15.643, 30.251 -15.643, 29.995 -15.644, 29.73 -15.645, 29...>],\n       ['Admin-0 country', 1, 3, ..., nan, nan,\n        <MULTIPOLYGON (((53.086 16.648, 52.581 16.47, 52.448 16.391, 52.328 16.294, ...>],\n       ...,\n       ['Admin-0 country', 3, 4, ..., nan, nan,\n        <MULTIPOLYGON (((-45.718 -60.521, -45.5 -60.546, -45.386 -60.583, -45.357 -6...>],\n       ['Admin-0 country', 3, 6, ..., nan, nan,\n        <POLYGON ((-63.123 18.069, -63.011 18.069, -63.012 18.045, -63.023 18.019, -...>],\n       ['Admin-0 country', 5, 6, ..., nan, nan,\n        <POLYGON ((179.214 -8.524, 179.201 -8.535, 179.196 -8.535, 179.201 -8.512, 1...>]],\n      dtype=object)\n```\n:::\n:::\n\n\n### Arctic communities\n\nIn the same way as we previously used `pandas.read_csv()`, we can read in the Arctic communities data directly from the data repository using `geopandas.read_file()`:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# read in Arctic communities data\ncommunities = gpd.read_file('https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Aed7718ae-fb0d-43dd-9270-fbfe80bfc7a4')\ncommunities.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>population</th>\n      <th>country</th>\n      <th>geoname-id</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Udomlya</td>\n      <td>32373</td>\n      <td>RU</td>\n      <td>452949</td>\n      <td>POINT (34.99250 57.87944)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Valmiera</td>\n      <td>26963</td>\n      <td>LV</td>\n      <td>453754</td>\n      <td>POINT (25.42751 57.54108)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Ventspils</td>\n      <td>42644</td>\n      <td>LV</td>\n      <td>454310</td>\n      <td>POINT (21.57288 57.38988)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Vec-Liepāja</td>\n      <td>85260</td>\n      <td>LV</td>\n      <td>454432</td>\n      <td>POINT (21.01667 56.53333)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Tukums</td>\n      <td>18348</td>\n      <td>LV</td>\n      <td>454768</td>\n      <td>POINT (23.15528 56.96694)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNotice that the `countries` and `communities` GeoDataFrames both have the same crs:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ncountries.crs == communities.crs\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\nTrue\n```\n:::\n:::\n\n\nThis makes it easy to take a quick look at our communities data by plotting it on top of the countries dataframe:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\ncountries.plot(ax=ax)\ncommunities.plot(ax=ax, color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-10-merge-data_files/figure-html/cell-14-output-1.png){width=403 height=411}\n:::\n:::\n\n\nNext, we want to calculate the number of arctic communities by country. \n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# calculate number of communities by country\n\n# extract number of communities by country as a pd.Series\nn_comms = communities.groupby('country').count().name\n\n# convert the pd.Series into a pd.DataFrame and update it\nn_comms = pd.DataFrame(n_comms).rename(columns={'name':'n_communities'}).reset_index()\n```\n:::\n\n\nLet's break this down a bit:\n\n- We start with our `communities` dataframe and use `groupby('country')` to group by country code, \n- then we use `count()` as an aggregator function to count how many rows belong to each country code.\n- The result of this operation is a dataframe (run `communities.groupby('country').count()` to check) and we select a single column with the counts by selecting the `name` column.\n- The result is a single `pd.Series` in the variable `n_comms`.\n- We then convert this `pd.Series` into a `pd.DataFrame` and clean it up a bit.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# number of communities per country\nn_comms\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>n_communities</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AX</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>BY</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CA</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>DK</td>\n      <td>72</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>EE</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>FI</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>FO</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>GB</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>GL</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>IS</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>LT</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>LV</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>NO</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>RU</td>\n      <td>774</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>SE</td>\n      <td>133</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>US</td>\n      <td>115</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n Since we only want data from Scandinavia, we can use the codes for these countries to locate these rows:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# select Scandinavia data\nscandi_codes = ['DK','NO','SE','FO','FI','IS','AX']\nscandi_n_comms = n_comms[n_comms.country.isin(scandi_codes)].copy()\nscandi_n_comms\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>n_communities</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AX</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>DK</td>\n      <td>72</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>FI</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>FO</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>IS</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>NO</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>SE</td>\n      <td>133</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Merge datasets \n\nTo merge two datasets they need to have at least one column in common. \nCurrently our datasets do not have any columns in common:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nscandi_countries.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>admin</th>\n      <th>type</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>48</th>\n      <td>Sweden</td>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((19.07646 57.83594, 18.99375 57...</td>\n    </tr>\n    <tr>\n      <th>88</th>\n      <td>Norway</td>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((20.62217 69.03687, 20.49199 69...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nscandi_n_comms.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>n_communities</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AX</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>DK</td>\n      <td>72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can easily fix this by adding an `admin` column to `scandi_n_comms`. \nConveniently, the `scandi_names` list is in the same order as the country codes in the `scandi_n_comms` dataframe, so we can readily add this list as a new column:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Add country names \nscandi_n_comms['admin'] = scandi_names\nscandi_n_comms\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>n_communities</th>\n      <th>admin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AX</td>\n      <td>1</td>\n      <td>Aland Islands</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>DK</td>\n      <td>72</td>\n      <td>Denmark</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>FI</td>\n      <td>98</td>\n      <td>Finland</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>FO</td>\n      <td>1</td>\n      <td>Faroe Islands</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>IS</td>\n      <td>5</td>\n      <td>Iceland</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>NO</td>\n      <td>48</td>\n      <td>Norway</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>SE</td>\n      <td>133</td>\n      <td>Sweden</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTo merge dataframes we can use the [`pandas.merge()` function](https://pandas.pydata.org/docs/reference/api/pandas.merge.html#pandas.merge). \nThe basic syntax for it is:\n\n```python\noutput_df = pd.merge(left_df,\n                     right_df, \n                     how = type_of_join, \n                     on = column_to_join)\n```\nwhere\n\n- `output_df` is the dataframe resulting from the merge,\n- `left_df` is the dataframe we have \"on the left side\",\n- `right_df` is the dataframe we have \"on the right side\",\n- `how` specifies the type of join between the left and right dataframes, ([check the options here](https://pandas.pydata.org/docs/reference/api/pandas.merge.html#pandas.merge)), the default is to do an inner join,\n- `on` specifies the column to join on, this column must be present in both our dataframes. \n\nIn our case we want to perform an inner join between our dataframes. This will merge the subset of rows that have matches in both the left table and the right table.\n\n![Image source: R for Data Science, Wickham & Grolemund](/images/merging_data/join-diagrams-inner.png)\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# merge dataframes \nscandi_countries = pd.merge(scandi_countries,\n                            scandi_n_comms,\n                            how='inner',\n                            on='admin')\n# update index\nscandi_countries = scandi_countries.set_index('admin')\nscandi_countries\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>type</th>\n      <th>geometry</th>\n      <th>country</th>\n      <th>n_communities</th>\n    </tr>\n    <tr>\n      <th>admin</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Sweden</th>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((19.07646 57.83594, 18.99375 57...</td>\n      <td>SE</td>\n      <td>133</td>\n    </tr>\n    <tr>\n      <th>Norway</th>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((20.62217 69.03687, 20.49199 69...</td>\n      <td>NO</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>Iceland</th>\n      <td>Sovereign country</td>\n      <td>POLYGON ((-15.54312 66.22852, -15.42847 66.224...</td>\n      <td>IS</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>Finland</th>\n      <td>Country</td>\n      <td>MULTIPOLYGON (((24.15547 65.80527, 24.04902 65...</td>\n      <td>FI</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>Faroe Islands</th>\n      <td>Dependency</td>\n      <td>MULTIPOLYGON (((-6.62319 61.80596, -6.64277 61...</td>\n      <td>FO</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Denmark</th>\n      <td>Country</td>\n      <td>MULTIPOLYGON (((12.56875 55.78506, 12.57119 55...</td>\n      <td>DK</td>\n      <td>72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNotice that the row for Aland Islands is not present in the merged dataframe. \nThis is expected because although 'Aland Islands' was a value in the admin column of the `scandi_n_comms`, it wasn't a value in the `scand_countries` admin column. \n\nThe Aland Islands is an autonomous region of Finland and there is one Arctic community registered in this region. \nWe will directly add one to Finland to not lose this value in the map:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nscandi_countries.at['Finland', 'n_communities'] += 1\n\nprint(scandi_countries.at['Finland', 'n_communities'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n99\n```\n:::\n:::\n\n\n## Choropleth map\n\nA [choropleth map](https://en.wikipedia.org/wiki/Choropleth_map) is an efficient way to visualize aggregate data per region. \n\nTo make a choropleth map from our polygons `GeoDataFrame` we need to specify the `column` parameter in `plot()` and make it equal to the column with the values we want to plot in each country. \n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nscandi_countries.plot(column='n_communities',\n                      legend=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-10-merge-data_files/figure-html/cell-23-output-2.png){width=442 height=411}\n:::\n:::\n\n\nTo finish, we can use `matplotlib` to customize our map:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize=(10, 10))\n\nscandi_countries.plot(ax=ax,\n                      column='n_communities',\n                       cmap='BuPu',\n                       legend=True,\n                       edgecolor='black',\n                       legend_kwds={'shrink':.8,\n                                    'label': 'Number of Arctic communities', \n                                    'orientation': 'horizontal'\n                                    }\n                       )\n\n\nax.set_title('Arctic communities in Scandinavia',  fontsize=20)\nax.set_xlabel('Longitude')\nax.set_ylabel('Latitude')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-10-merge-data_files/figure-html/cell-24-output-1.png){width=614 height=746}\n:::\n:::\n\n\n<!--\n# use ctx to add a basemap     \n# ctx.add_basemap(ax=ax, \n#                attribution=False,\n#                crs=scandi_countries.crs.to_string())\n-->\n\n<!--\nEXERCISES:\n\nAdd the scandinavian communities as dots on the choropleth map.\n\n-->\n\n<!--\n## Complete workflow\n\n```python\n# import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport geopandas as gpd\n\n# ======= IMPORT DATA ========\n# read in Arctic communities data\ncommunities = gpd.read_file('https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Aed7718ae-fb0d-43dd-9270-fbfe80bfc7a4')\n\n# import countries polygons\ncountries = gpd.read_file('ne_50m_admin_0_countries/ne_50m_admin_0_countries.shp')\ncountries.head()\n\n# ======= COMMUNITIES PREPARATION =======\n# extract number of communities by country as a pd.Series\nn_comms = communities.groupby('country').count().name\n\n# convert the pd.Series into a pd.DataFrame and update it\nn_comms = pd.DataFrame(n_comms).rename(columns={'name':'n_communities'}).reset_index()\n\n# select Scandinavia data\nscandi_codes = ['DK','NO','SE','FO','FI','IS','AX']\nscandi_n_comms = n_comms[n_comms.country.isin(scandi_codes)].copy()\n\n# ======= COUNTRIES PREPARATION =======\n# make column names lower case\ncountries.columns = countries.columns.str.lower()\n\n# names of Scandinavian countries\nscandi_names = ['Aland Islands',\n                'Denmark',\n                'Finland',\n                'Faroe Islands',\n                'Iceland',\n                'Norway',\n                'Sweden']\n\n# subset Scandinavian countries\nscandi_countries = countries.loc[countries.admin.isin(scandi_names),['admin','type','geometry']]\n\n# ======= MERGE DATASETS =======\nscandi_n_comms['admin'] = scandi_names\nscandi_countries = pd.merge(scandi_countries, scandi_n_comms)\n\n```\n-->\n\n<!--\n## Acknowledgments\n\nThe section about merging data is based on the [Data Modeling Essentials R lesson](https://learning.nceas.ucsb.edu/2023-06-delta/session_09.html#merging-data) from the NCEAS Learning Hub. \n\n-->\n\n## References\n\nHalina Do-Linh, Carmen Galaz García, Matthew B. Jones, Camila Vargas Poulsen. 2023. Open Science Synthesis training Week 1. NCEAS Learning Hub & Delta Stewardship Council.\n\nMike Brook. (2023). Approximate Arctic Communities and Populations, (latitude >= 55, 2022). Arctic Data Center. doi:10.18739/A28S4JQ80.\n\n",
    "supporting": [
      "lesson-10-merge-data_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}