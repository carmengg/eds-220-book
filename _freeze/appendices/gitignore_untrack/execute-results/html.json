{
  "hash": "124f32baf68aaa800ccda79986f2607b",
  "result": {
    "markdown": "---\nengine: knitr\nexecute:\n  eval: false\n---\n\n\n# Gitignore & Git Untracking\n\nThis is a review on how to never track and untrack files in Git using the terminal and the .gitignore file.\n\n## Gitignore\nThe easiest way to have Git never track a file or directory within your Git directory is to add it to the .gitignore file *before you ever start tracking it*. \n\nFrom the [Git documenatation](https://git-scm.com/docs/gitignore):\n\n>A gitignore file specifies intentionally untracked files that Git should ignore. Files already tracked by Git are not affected.\n\nThis means the files listed in the .gitignore will be ignored when making a commit. Git does not track changes on it and they do not appear in the index when we check the Git status. \n\n\n## Creating a .gitignore\n\n### When creating a GitHub repository\nThe easiest way to create a .gitignore is probably when creating a repository through GitHub. \nTo do this:\n\n1. Go to the \"Add .gitignore\" section and...\n\n![](/images/git-ignore/add-gitignore.png)\n\n2. ...select a template from the list. These templates are provided by GitHub to ignore unuseful files in different programming languages. For this course we select the Python .gitignore template. \n\n![](/images/git-ignore/select-gitignore-template.png)\n\n3. When you finish creating your new repository, the .gitignore file will be in it. \n\n### From the GitHub .gitignore templates\n\nIf you don't have a .gitignore yet and want to add the one from the GitHub template you can:\n\n1. Download the .gitignore GitHub template: [https://github.com/github/gitignore](https://github.com/github/gitignore).\n\n2. Move it to your directory.\n\n3. Update the name to `.gitignore`. \n\n### From the command line \nWhat if we we just want to create our own blank .gitignore? \nNo problem, we can create one from our terminal:\n\n1. Open the terminal.\n\n2. Verify you don't have a .gitignore by running:\n\n::: {.cell}\n\n```{.bash .cell-code}\nls -a\n```\n:::\n\n\n::: {.callout-tip}\n# `ls -a`\nAdding `-a` to the `ls` (list) command will show all the files, including the hidden files that start with a period `.`, such as the .gitignore. \n:::\n\n3. Create a new .gitignore file for the directory:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntouch .gitignore\n```\n:::\n\n\nIf there is no output, everything worked. \n\n4. Check your .gitgnore is there:\n\n::: {.cell}\n\n```{.bash .cell-code}\nls -a\n```\n:::\n\n\nYou should see the .gitignore now listed in the files. \n\n\n## Editing .gitignore\n\n### Add a file\nSuppose you have an **untracked file** called `example.txt` that you want to add to the .gitignore. \nRemember, untracked means Git hasn't began tracking changes on this file and. \nIf you run `git status`, `example.txt` would appear in the index under Untracked files. \n\nIf you are using JupyterLab, you can edit the .gitignore from the terminal. \nFollow these steps to add `example.txt` to it:\n\n1. Open the terminal.\n\n2. Open the .gitignore file in the nano command line-based text editor by running:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nnano .gitignore\n```\n:::\n\n\n3. Once in the editor, add a new line with the name of the file: `example.txt`. \n\n4. To exit nano: \n    a. `Ctrl+X`, \n    b. Press `Y` to save the changes\n    c. Press `Enter` \n\n5. When you run `git status` again, `example.txt` will not be listed under the untracked files. \n\n### Add a directory\nSuppose you want to add all the contents of a directory named data to your gitignore. \n*If none of the files in the data directory have been tracked by Git*, then:\n\n1. Open the terminal. \n\n2. Open the .gitignore file in the nano command line-based text editor by running:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nnano .gitignore\n```\n:::\n\n\n3. Once in the editor, add a new line with the name of the directory: `data/`. \n\n4. To exit nano: \n    a. `Ctrl+X`, \n    b. Press `Y` to save the changes\n    c. Press `Enter` \n\n5. When you run `git status` again, `data/` will not be listed in untracked files. \n\n## Untracking\nOnce a file has been added to a commit, Git starts tracking it. \n**If we add the file's name to the .gitignore after it has been commited, Git will keep tracking changes in it.** \nTo stop tracking a tracked file `example.txt`:\n\n1. Open the terminal.\n\n2. Run `git rm --cached example.txt`. \nThe `git rm --cached` command will remove the file from the Git tracking while leaving the file untouched on disk. \n\n3. If it's not already there, add `example.txt` to .gitignore so Git ignores it. \n\n\n\n## References\n[GitHub Blog - How to undo (almost) anything with Git](https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}