
## Plotting
Let's dip our toes into plotting to make things more interesting. 


To get us started, we will use again the simplified data (glacial_loss.csv) from the National Snow and Ice Data Center ([Original dataset](​http://dx.doi.org/10.7265/N52N506F)). The column descriptions are:

- **year**: ​calendar year
- **europe - antarctica**: ​change in glacial volume (km3​ ​) in each region that year
- **global_glacial_volume_change**: ​cumulative​ global glacial volume change (km3),
starting in 1961
- **annual_sea_level_rise**: ​annual rise in sea level (mm)
- **cumulative_sea_level_rise**:​ cumulative rise in sea level (mm) since 1961

<!-- 
Fixing the preview working directory
```{python}
import os
home = os.path.expanduser("~")
os.chdir(os.path.join(home,'eds-220-book'))
```
-->

```{python}
import pandas as pd

# read in file
df = pd.read_csv('data/lesson-1/glacial_loss.csv')

# see the first five rows
df.head()
```

## `plot()` method

A `pandas.DataFrame` has a [built-in method `plot()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html) for plotting. 
When we call it without specifying any other parameters `plot()` creates one line plot for each of the columns with numeric data. 

```{python}
# one line plot per column with numeric data - a mess
df.plot()
```

As we can see, this doesn't make any sense! In particular, look at the x-axis. The default for `plot` is to use the values of the index as the x-axis values. Let's see some examples about how to improve this situation.

## Line plots

We can make a line plot of one column against another by using the following syntax:

```python
df.plot(x='x_values_column', y='y_values_column')
```
For example, 
```{python}
# change in glacial volume per year in Europe
df.plot(x='year', y='europe')
```

We can do some basic customization specifying other arguments of the `plot` function. Some basic ones are:

- `title`: Title to use for the plot.
- `xlabel`: Name to use for the xlabel on x-axis
- `ylabel`: Name to use for the ylabel on y-axis
- `color`: change the color of our plot

In action:

```{python}
df.plot(x='year', 
        y='europe',
        title='Change in glacial volume per year in Europe',
        xlabel='Year',
        ylabel='​Change in glacial volume (km3​)',
        color='green'
        )
```

You can see all the [optional arguments for the `plot()` function in the documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html).

### Multiple line plots
Let's say we want to graph the change in glacial volume in the Arctic and Alaska. We can do it by updating these arguments:

- `y` : a list of column names that will be plotted against x
- `color`: specify the color of each column's line with a dictionary `{'col_1' : 'color_1', 'col_2':'color_2}`

```{python}
df.plot(x='year', 
        y=['arctic', 'alaska'],
        title = 'Change in glacial volume per year in Alaska and the Arctic',
        xlabel='Year',
        ylabel='​Change in glacial volume (km3​)',        
        color = {'arctic':'#F48FB1',
                 'alaska': '#AB47BC'
                 }
        )
```

Notice that for specifying the colors we used a **HEX code**, this gives us more control over the looks of our graph. 

We can also create separate plots for each column by setting the `subset` to `True`.

```{python}
df.plot(x='year', 
        y=['arctic', 'alaska'],
        title = 'Change in glacial volume per year in Alaska and the Arctic',
        xlabel='Year',
        ylabel='​Change in glacial volume (km3​)',        
        color = {'arctic':'#F48FB1',
                 'alaska': '#AB47BC'
                 },
        subplots=True
        )
```

### Check-in

(1)
Plot a graph of the annual sea level rise with respect to the years.

(2)
What information is the `columns` variable is retrieving from the data frame? Describe in a sentence what is being plotted.
```{python}
columns = df.loc[:,'europe':'antarctica'].columns
df.plot(x='year', 
        y=columns, 
        subplots=True)
```

We will move on to another dataset for the rest of the lecture. The great...

## Palmer penguins dataset

For the next plots we will use the  Palmer Penguins dataset (Horst et al., 2020). This contains size measurements for three penguin species in the Palmer Archipelago, Antarctica. 

<!--
[]()
The Palmer Archipelago penguins. Artwork by @allison_horst.
-->

The data is usually accessed through the `palmerpenguins` R data package. There is no similar access to the Palmer penguins data through Python (yet!), so we will read the raw csv directly into Python using the URL: [https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv](https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv)

The Palmer penguins dataset has the following columns:

- **species**:
- **island**:
- **bill_length_mm**:
- **bill_depth_mm**:
- **flipper_lenght_mm**:
- **body_mass_g**:
- **sex_year**:

Let's start by reading in the data.

```{python}
# read in data
penguins = pd.read_csv('https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv')

# look at dataframe's head
penguins.head()
```

```{python}
# check column data types and NA values
penguins.info()
```

```{python}
# simple statistics about numeric columns
penguins.describe()
```

We can also subset the dataframe to get information about particular columns or groups of columns.

```{python}
# get count unique values in categorical columns and year
penguins[['species', 'island', 'sex', 'year']].nunique()
```

```{python}
# get unique values in species column
print(penguins.species.unique())
```

```{python}
# species counts 
print(penguins.species.value_counts())
```

## `kind` argument in `plot()`

We talked about how the `plot()` function creates by default a line plot. The parameter that controls this behaviour is `plot()`'s `kind` parameter. By changing the value of `kind` we can create different kinds of plots. Let's look at the documentation to see what these values are:

[`pandas.DataFrame.plot` documentation extract - accessed Oct 10,2023]()

Notice the default value of `kind` is `'line'`. Let's use this parameter to create some different plots. 

## Scatter plots
Suppose we want to visualy compare the flipper length agains the body mass, we can do this with a scatterplot. 

Example:

```{python}
penguins.plot(kind='scatter',
        x='flipper_length_mm', 
        y='body_mass_g')
```


```{python}
penguins.plot(kind='scatter',
        x='flipper_length_mm', 
        y='body_mass_g',
        title='Flipper length and body mass for Palmer penguins',
        xlabel='Flipper length (mm)',
        ylabel='Body mass (g)',
        color='#ff3b01',
        alpha=0.4  # controls transparency
        )
```

## Histograms

We can create a histogram of our data setting `kind='hist'` in `plot()`. 

```{python}
# using plot without subsetting data - a mess again
penguins.plot(kind='hist')
```

To gain actual information, let's subset the data before plotting it. For example, suppose we want to look at the distribution of flipper length. We could do it in this way:

```{python}
# distribution of flipper length measurements
# first select data, then plot
penguins.flipper_length_mm.plot(kind='hist',
                                title='Penguin flipper lengths',
                                xlabel='Flipper length (mm)',
                                grid=True)
```


### Check-in
(1) Select data and find a value for the `kind` parameter that gives you a boxplot to make a basic boxplot for the penguin's bill length and depth on the same axis. 
<!--
```{python}
penguins[['bill_length_mm','bill_depth_mm']].plot(kind='box')
```
-->

(2) Create a histogram of the flipper length of female gentoo penguins. HINT: you need to select both rows and columns.

## Grouping

Our penguins data is naturally split into different groups: there are three different species, two sexes and three islands. Often, we want to calcualte a certain statistic for each group. For example, suppose we want to calculate the average flipper length per species.  How would we do this `by hand`?

0. We start with our data and notice there are multiple species in the `species` column.

1. We split our original table to group all observations from the same species together.

2. We calculate the average flipper length for each of the groups we form.

3. Then we combine the values for average flipper length per species into a single table.

<!-- ADD DIAGRAM HERE -->

This is known as the **Split-Apply-Combine strategy**. This strategy follows the three steps we explained above:

1. **Split**: Split the data into logical groups (e.g. species, sex, island, etc.)

2. **Apply**: Calculate some summary statistic on each group (e.g. average flipper length by species, number of individuals per island, body mass by sex, etc.)

3. **Combine**: Combine the statistic calculated on each group back together.

In Python we can use the `groupby()` method to split (i.e. group) the data into different categories. The general syntax for `groupby()` is

```python
df.groupby(columns_to_group_by)
```
where most often we will have
`columns_to_group_by` = a single column name (string) or a list of column names

Let's see an example:

```{python}
# average flipper length per species
avg_flipper = penguins.groupby("species").flipper_length_mm.mean()
```

There's a lot going on there, let's break it down (remember the `.` can be read as "and then...")

- start with the `penguins` data frame, and then...
- group the data frame by species values, and then...
- select the `'flipper_length_mm'` column, and then...
- calculate the `mean()`

IMPORTANT! Because we used `groupby()` the mean will be calculated on each group. If we ommit `groupby()` we obtain the average for the whole flipper length column:

```{python}
penguins.flipper_length_mm.mean()
```

We can sort the `avg_flipper` data and then graph it as a bar plot.

```{python}
# sort in descending order
# remember to reassign to actually update data
avg_flipper = avg_flipper.sort_values(ascending=False)

# plot as a bar plot
avg_flipper.plot(kind='bar',
                 title='Average flipper length by species',
                 ylabel='Flipper length (mm)',
                 rot=360  # rotation for ticks 
                 ) 
```


<!-- Example of groupby multiple levels (maybe selecting the minimum? -->

### Check-in

<!-- Something about group by and then plot -->

<!--
## Further plotting

MENTION SEABORN

```{python}
# make histograms of flipper length by species =
#   group penguins by species
#   then make a histogram of 
penguins.groupby('species').flipper_length_mm.plot(kind='hist')
```

`groupby()` keeps track of which data values correspond to which values in `columns_to_group_by`.

### Check-in

Create a scatter plot of the flipper length against body mass (x=flipper length, y=body mass) by sex. 
-->


<!--
## References
Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi:10.5281/zenodo.3960218.

## Acknowledgements
The `groupby()` section is based on an NCEAS Learning Hub I updated for the Delta Stewardship Council in June 2023. [https://learning.nceas.ucsb.edu/2023-06-delta/session_11.html#summary-statistics-using-group_by-and-summarize](https://learning.nceas.ucsb.edu/2023-06-delta/session_11.html#summary-statistics-using-group_by-and-summarize)

 Halina Do-Linh, Carmen Galaz García, Matthew B. Jones, Camila Vargas Poulsen. 2023. Open Science Synthesis training Week 1. NCEAS Learning Hub & Delta Stewardship Council.
-->