---
# do not execute cells
execute:
  eval: false
---

# STAC specification

So far in our course we have accessed data in two ways: by downloading it directly from the data provider or by loading a specific dataset via a URL. 
This can be a convenient way to access targeted datasets, often usign GUIs (graphical user interfaces) for data discovery and filtering.
However, relying on clicking and copy-pasting addresses and file names can make our workflows more error-prone and less reproducible. 
In particular, satellites around the world produce terabytes of new data daily and manually browsing through data repositories would it make hard to access this data. 
Moreover, we wouldn't want to learn a new way to access data from every single big data provider.
This is where STAC comes in.

![](/images/STAC-01.png)

The **SpatioTemporal Asset Catalog (STAC)** is an emerging open standard for geospatial data that aims to increase the interoperability of geospatial data, particularly satellite imagery. 
Major satellite imagery datasets like X, Y, and [many others](https://stacspec.org/en/about/datasets/), now follow the STAC specification.

In the next classes we'll be working with the [Microsoft's Planetary Computer (MPC)](https://planetarycomputer.microsoft.com) STAC API. 
The MPC is both a geospatial coding environment and a STAC data catalogue. 
In this lesson we will learn about the main components of a STAC catalog and how to search for data using the MPC's STAC API. 

## Item, Collection, and Catalog
The **STAC item** (or just item) is the building block of a STAC. 
An item is a GeoJSON feature with additional fields that make it easier to find the item as we look for data across catalogs. 

An item holds two types of information:

1. **Metadata:** The metadata for a STAC item includes core identifying information (such as id, geometry, bounding box, and date), and additional properties (for example, place of collection). 

2. **Assets:** Assets are the links to the actual data of the item (for example, links to the spectral bands of a satellite image.)

STAC items can be grouped into **STAC collections** (or just collections). 
For example, while a single satellite scene (at a single time and location) would constitue an item, scenes across time and location from the same satellite can be orgnanized in a collection. 
Finally, multiple collections can be organized into a single catalog. 

## API
To request data from a catalog following the STAC standard we use an **Application Programming Interface (API)**. 
We can think of an API as an intermediary tasked with sending our request for data to the data catalog and getting the response from the catalog back to us. 
The following is a nice real-life analogy:

![[Geeks for geeks - What is an API?](https://www.geeksforgeeks.org/what-is-an-api/)](/images/what-is-an-api.png)

The Python package to access APIs for STAC catalogs is [`pystac_client`](https://pystac-client.readthedocs.io/en/stable/). 
Our goal in this lesson is to retrieve [NAIP data](https://naip-usdaonline.hub.arcgis.com) from the [MPC's data catalog](https://planetarycomputer.microsoft.com/catalog) via its STAC API. 
We'll be doing this within the MPC's hub. 

## Catalog 
<!--https://github.com/NCEAS/msai4earth-esa/blob/main/examples/naip_example/access_naip.ipynb-->
First, load the necessary packages:

```{python}
import numpy as np
import geopandas as gpd
import rioxarray as rioxr
import matplotlib.pyplot as plt

from shapely.geometry import Polygon

# used to access STAC catalogs
from pystac_client import Client
# used to sign items from the MPC STAC catalog
import planetary_computer

# ----- other libraries for nice ouputs
from IPython.display import Image
```

### Access
We use the `Client` function from the `pystac_client` package to access the catalog:
```{python}
# access catalog
catalog = Client.open(
    "https://planetarycomputer.microsoft.com/api/stac/v1",
    modifier=planetary_computer.sign_inplace,
)
```

### Exploration
Let's check out some of the catalog's metadata:
```{python}
# metadata from the catalog
#print('ID:', catalog.id)
print('Title:', catalog.title)
print('Description:', catalog.description)
```

We can access its collections by using the `get_collections()` method:

```{python}
catalog.get_collections()
```

Notice the output of `get_collections()` is a **generator**. 
This is a special kind of *lazy* object in Python over which you can loop over like a list. 
Unlike a list, the items in a generator do not exist in memory until you explicitely iterate over them or convert them to a list. 
Let's try getting the collections from the catalog again:

```{python}
# get collections and print their names
collections = list(catalog.get_collections())

print('Number of collections:', len(collections))
print("Collections IDs:")
for collection in collections:
    print('-', collection.id)
```

## Collection

We can select a single collection for exploration using the `get_child()` method for the catalog and the collection id as the parameter:
```{python}
naip_collection = catalog.get_child('naip')
naip_collection
```

<!--
https://pystac.readthedocs.io/en/latest/api/pystac.html#pystac.Collection

https://pystac.readthedocs.io/en/stable/api/item_collection.html#pystac-item-collection
-->

## Catalog search
We can narrow the search withing the `catalog` by specifying a time range, an area of interest, and the collection name. 
The simplest ways to define the area of interest to look for data in the catalog are:

- a GeoJSON-type dictionary with the coordinates of the bounding box,
- as a list `[xmin, ymin, xmax, ymax]` with the coordinate values defining the four corners of the bounding box.

In this lesson we will look for the NAIP scenes over Santa Barbara from 2018 to 2023. We'll use the GeoJSON method to define the area of interest:

```{python}
# Temporal range of interest
time_range = "2018-01-01/2023-01-01"

# NCEAS bounding box (as a GeoJSON)
bbox = {
    "type": "Polygon",
    "coordinates":[
        [
            [-119.70608227128903, 34.426300194372274],
            [-119.70608227128903, 34.42041139020533],
            [-119.6967885126002, 34.42041139020533],
            [-119.6967885126002, 34.426300194372274],
            [-119.70608227128903, 34.426300194372274]
        ]
    ],
}

# catalog search
search = catalog.search(
    collections=['naip'],
    intersects=bbox,
    datetime=time_range)
search
```

To get the items found in the search (or check if there were any matches in the search) we use the `item_collection()` method:

```{python}
items = search.item_collection()
len(items)
```

This output tells us there were two items in the catalog that matched our search!

```{python}
items
```

## Item exploration
https://pystac.readthedocs.io/en/stable/api/pystac.html#pystac.Item


## Exercise
NAIP example:

https://github.com/NCEAS/msai4earth-esa/blob/main/examples/naip_example/prepare_naip_data.ipynb

## References
STAC Documentation:

- [The STAC Specification](https://stacspec.org/en/tutorials/intro-to-stac/)
- [Read a STAC Catalog Using PySTAC](https://stacspec.org/en/tutorials/1-read-stac-python/)

[Microsoft Planetary Computer Documentation - Reading Data from the STAC API](https://planetarycomputer.microsoft.com/docs/quickstarts/reading-stac/)

<!-- https://planetarycomputer.microsoft.com/docs/tutorials/hurricane-florence-animation/ -->

Idea for homework:

https://planetarycomputer.microsoft.com/dataset/io-biodiversity#Example-Notebook