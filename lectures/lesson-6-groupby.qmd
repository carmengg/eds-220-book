# `groupby()`

In this section we will go over the `groupby()` function and the split-apply-combine strategy.

<!--
Make a short intro about summarizing values in a whole column.
-->

```{python}
import pandas as pd 
import seaborn as sns

# read in data
penguins = pd.read_csv("https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv")

penguins.head()
```

## Grouping

Our penguins data is naturally split into different groups: there are three different species, two sexes and three islands. Often, we want to calculate a certain statistic for each group. For example, suppose we want to calculate the average flipper length per species.  How would we do this "by hand"?

0. We start with our data and notice there are multiple species in the `species` column.

1. We split our original table to group all observations from the same species together.

2. We calculate the average flipper length for each of the groups we formed.

3. Then we combine the values for average flipper length per species into a single table.

This is known as the **Split-Apply-Combine strategy**. This strategy follows the three steps we explained above:

1. **Split**: Split the data into logical groups (e.g. species, sex, island, etc.)

2. **Apply**: Calculate some summary statistic on each group (e.g. average flipper length by species, number of individuals per island, body mass by sex, etc.)

3. **Combine**: Combine the statistic calculated on each group back together.

![Split-apply-combine to calculate mean flipper length](/images/lesson-3-plot/split-apply-combine-penguins-diagram.png)

In Python we can use the `groupby()` method to split (i.e. group) the data into different categories. The general syntax for `groupby()` is

```python
df.groupby(columns_to_group_by)
```
where most often we will have
`columns_to_group_by` = a single column name (string) or a list of column names, the unique values of the column (or columns) will be used as the groups of the data frame

Let's see an example.

First, if we don't use the `groupby()` method, we obtain the average for the whole flipper length column:

```{python}
penguins.flipper_length_mm.mean()
```

To get the mean flipper length by species we first group our dataset by the species column's data:

```{python}
# average flipper length per species
penguins.groupby("species").flipper_length_mm.mean()
```

There's a lot going on there, let's break it down (remember the `.` can be read as "and then...")

- start with the `penguins` data frame, and then...
- use `groupby()` to group the data frame by `species` values, and then...
- select the `'flipper_length_mm'` column, and then...
- calculate the `mean()`


We can store our new data frame as `avg_flipper` and then graph it as a bar plot:

```{python}

# average flipper length per species
avg_flipper = penguins.groupby("species").flipper_length_mm.mean()

# sort in descending order
# remember to reassign to actually update data
avg_flipper = avg_flipper.sort_values(ascending=False)

# plot as a bar plot
avg_flipper.plot(kind='bar',
                 title='Average flipper length by species',
                 ylabel='Flipper length (mm)',
                 rot=360  # rotation for ticks 
                 ) 
```

We can also group by combinations of columns. For example, suppose we want to know what was the number of penguins in every island on different years. We can use the `count()` method to count the number of non-NA values in each column like this:

```{python}
penguins.count()
```

When we group by island and year we get the count of non-NA values for each column divided for each combination of island and year:

```{python}
penguins.groupby(['island','year']).count()
```

Let's say we want to plot the surveyed population per year and island. We could then use a "one liner" to do it in this way:

```{python}
penguins.groupby(['island','year']).count().species.sort_values().plot(kind='bar')
```
<!--
Talk about what is `groupby()` : lazy method
-->

### Check-in

(1) Use `groupby` and the `max()` method for data frames to calculate the maximum value of penguin's body mass by year and species.

<!--

```{python}
penguins.groupby(['year','species']).body_mass_g.max()
```
-->

(2) Use (1) to display the highest body masses per year and species as a bar plot in descending order.

<!--
penguins.groupby(['year','species']).body_mass_g.max().sort_values(ascending=False).plot(kind='bar')
-->


## Acknowledgmenets
This section is based on this [NCEAS Learning Hub R lesson.](https://learning.nceas.ucsb.edu/2023-06-delta/session_11.html#summary-statistics-using-group_by-and-summarize)

 Halina Do-Linh, Carmen Galaz Garc√≠a, Matthew B. Jones, Camila Vargas Poulsen. 2023. Open Science Synthesis training Week 1. NCEAS Learning Hub & Delta Stewardship Council.
