## Plotting
Let's learn the basics of plotting with `pandas` to make things more interesting. 


To get us started, we will use again the simplified data (glacial_loss.csv) from the National Snow and Ice Data Center ([Original dataset](​http://dx.doi.org/10.7265/N52N506F)). The column descriptions are:

- **year**: ​calendar year
- **europe - antarctica**: ​change in glacial volume (km3​ ​) in each region that year
- **global_glacial_volume_change**: ​cumulative​ global glacial volume change (km3),
starting in 1961
- **annual_sea_level_rise**: ​annual rise in sea level (mm)
- **cumulative_sea_level_rise**:​ cumulative rise in sea level (mm) since 1961

<!-- 
Fixing the preview working directory
```{python}
import os
home = os.path.expanduser("~")
os.chdir(os.path.join(home,'eds-220-book'))
```
-->

```{python}
import pandas as pd

# read in file
df = pd.read_csv('data/lesson-1/glacial_loss.csv')

# see the first five rows
df.head()
```

## `plot()` method

A `pandas.DataFrame` has a [built-in method `plot()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html) for plotting. 
When we call it without specifying any other parameters `plot()` creates one line plot for each of the columns with numeric data. 

```{python}
# one line plot per column with numeric data - a mess
df.plot()
```

As we can see, this doesn't make any sense! In particular, look at the x-axis. The default for `plot` is to use the values of the index as the x-axis values. Let's see some examples about how to improve this situation.

## Line plots

We can make a line plot of one column against another by using the following syntax:

```python
df.plot(x='x_values_column', y='y_values_column')
```
For example, 
```{python}
# change in glacial volume per year in Europe
df.plot(x='year', y='europe')
```

We can do some basic customization specifying other arguments of the `plot` function. Some basic ones are:

- `title`: Title to use for the plot.
- `xlabel`: Name to use for the xlabel on x-axis
- `ylabel`: Name to use for the ylabel on y-axis
- `color`: change the color of our plot

In action:

```{python}
df.plot(x='year', 
        y='europe',
        title='Change in glacial volume per year in Europe',
        xlabel='Year',
        ylabel='​Change in glacial volume (km3​)',
        color='green'
        )
```

You can see all the [optional arguments for the `plot()` function in the documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html).

### Multiple line plots
Let's say we want to graph the change in glacial volume in the Arctic and Alaska. We can do it by updating these arguments:

- `y` : a list of column names that will be plotted against x
- `color`: specify the color of each column's line with a dictionary `{'col_1' : 'color_1', 'col_2':'color_2}`

```{python}
df.plot(x='year', 
        y=['arctic', 'alaska'],
        title = 'Change in glacial volume per year in Alaska and the Arctic',
        xlabel='Year',
        ylabel='​Change in glacial volume (km3​)',        
        color = {'arctic':'#F48FB1',
                 'alaska': '#AB47BC'
                 }
        )
```

Notice that for specifying the colors we used a **HEX code**, this gives us more control over how our graph looks.


We can also create separate plots for each column by setting the `subset` to `True`.

```{python}
df.plot(x='year', 
        y=['arctic', 'alaska'],
        title = 'Change in glacial volume per year in Alaska and the Arctic',
        xlabel='Year',
        ylabel='​Change in glacial volume (km3​)',        
        color = {'arctic':'#F48FB1',
                 'alaska': '#AB47BC'
                 },
        subplots=True
        )
```

### Check-in

(1)
Plot a graph of the annual sea level rise with respect to the years.

(2)
What information is the `columns` variable retrieving from the data frame? Describe in a sentence what is being plotted.
```python
columns = df.loc[:,'europe':'antarctica'].columns
df.plot(x='year', 
        y=columns, 
        subplots=True)
```

We will move on to another dataset for the rest of the lecture. The great...

## Palmer penguins dataset

For the next plots we will use the  Palmer Penguins dataset (Horst et al., 2020). This contains size measurements for three penguin species in the Palmer Archipelago, Antarctica. 

![The Palmer Archipelago penguins. Artwork by @allison_horst.](/images/lesson-3-plot/lter_penguins.png)

The data is usually accessed through the `palmerpenguins` R data package. Today we will access the csv directly into Python using the URL: [https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv](https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv)

The Palmer penguins dataset has the following columns:

- **species**
- **island**
- **bill_length_mm**
- **bill_depth_mm**
- **flipper_lenght_mm**
- **body_mass_g**
- **sex**
- **year**

Let's start by reading in the data.

```{python}
# read in data
penguins = pd.read_csv('https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv')

# look at dataframe's head
penguins.head()
```

```{python}
# check column data types and NA values
penguins.info()
```

```{python}
# simple statistics about numeric columns
penguins.describe()
```

We can also subset the dataframe to get information about a particular column or groups of columns.

```{python}
# get count unique values in categorical columns and year
penguins[['species', 'island', 'sex', 'year']].nunique()
```

```{python}
# get unique values in species column
print(penguins.species.unique())
```

```{python}
# species unique value counts 
print(penguins.species.value_counts())
```

## `kind` argument in `plot()`

We talked about how the `plot()` function creates by default a line plot. The parameter that controls this behaviour is `plot()`'s `kind` parameter. By changing the value of `kind` we can create different kinds of plots. Let's look at the documentation to see what these values are:

![`pandas.DataFrame.plot` documentation extract - accessed Oct 10,2023](/images/lesson-3-plot/df-plot-doc.png)

Notice the default value of `kind` is `'line'`. 

Let's change the `kind` parameter to create some different plots. 

## Scatter plots
Suppose we want to visualy compare the flipper length against the body mass, we can do this with a scatterplot. 

Example:

```{python}
penguins.plot(kind='scatter',
        x='flipper_length_mm', 
        y='body_mass_g')
```

We can update some other arguments to customize the graph:

```{python}
penguins.plot(kind='scatter',
        x='flipper_length_mm', 
        y='body_mass_g',
        title='Flipper length and body mass for Palmer penguins',
        xlabel='Flipper length (mm)',
        ylabel='Body mass (g)',
        color='#ff3b01',
        alpha=0.4  # controls transparency
        )
```

## Bar plots

We can create bar plots of our data setting `kind='bar'` in the `plot()` method.

For example, let's say we want to get data about the 10 penguins with lowest body mass. We can first select this data using the `nsmallest()` method for series:

```{python}
smallest = penguins.body_mass_g.nsmallest(10).sort_values()
smallest
```

We can then plot this data as a bar plot

```{python}
smallest.plot(kind='bar')
```

If we wanted to look at other data for these smallest penguins we can use the index of the `smallest` `pandas.Series` to select those rows in the original `penguins` data frame using `loc`:

```{python}
penguins.loc[smallest.index]
```

## Histograms

We can create a histogram of our data setting `kind='hist'` in `plot()`. 

```{python}
# using plot without subsetting data - a mess again
penguins.plot(kind='hist')
```

To gain actual information, let's subset the data before plotting it. For example, suppose we want to look at the distribution of flipper length. We could do it in this way:

```{python}
# distribution of flipper length measurements
# first select data, then plot
penguins.flipper_length_mm.plot(kind='hist',
                                title='Penguin flipper lengths',
                                xlabel='Flipper length (mm)',
                                grid=True)
```


### Check-in
(1) Select the `bill_length_mm` and `bill_depth_mm` columns in the `penguins` dataframe and then update the kind parameter to `box` to make boxplots of the bill length and bill depth.
<!--
```{python}
penguins[['bill_length_mm','bill_depth_mm']].plot(kind='box')
```
-->

(2) Select both rows and columns to create a histogram of the flipper length of gentoo penguins. 

<!--
```{python}
penguins.loc[penguins.species == 'Gentoo', 'flipper_length_mm'].plot(kind='hist')
```
-->

<!--
(3) Create a histogram of the flipper length of *female* gentoo penguins.

```{python}
penguins.loc[(penguins.species == 'gentoo') & (penguins.sex == 'female'), 'flipper_length_mm'].plot(kind='hist')
```
-->


<!--
## Further plotting

MENTION SEABORN

```{python}
# make histograms of flipper length by species =
#   group penguins by species
#   then make a histogram of 
penguins.groupby('species').flipper_length_mm.plot(kind='hist')
```

`groupby()` keeps track of which data values correspond to which values in `columns_to_group_by`.


### Check-in

Create a scatter plot of the flipper length against body mass (x=flipper length, y=body mass) by sex. 
-->

## References
Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi:10.5281/zenodo.3960218.