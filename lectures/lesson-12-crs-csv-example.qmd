# Updating CRS

In this lesson we will learn how to change the CRS of a `geopandas.GeoDataFrame` and how to make a CSV into a `geopandas.GeoDataFrame`, setting its CRS manually. 

## Data
We will use two datasets in this lesson. 
The first one is a dataset from the U.S. Energy Information Administration (EIA) with [information about operable electric generating plants in the United States by energy source, as of May 2023](https://atlas.eia.gov/datasets/eia::power-plants/about). 
Follow these steps to download the datset for this lesson:

1. Click on the "Download" button.
2. On the side panel click on "Download" for the csv format of the file.

You can [access the metadata for this dataset here](https://eia.maps.arcgis.com/sharing/rest/content/items/bf5c5110b1b944d299bb683cdbd02d2a/info/metadata/metadata.xml?format=default&output=html). 

The second dataset is a [TIGER shapefile from the United States Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341). 
TIGER stands for [Topologically Integrated Geographic Encoding and Referencing](https://en.wikipedia.org/wiki/Topologically_Integrated_Geographic_Encoding_and_Referencing). This used to be the data format the US Census distributed geospatial data, but since 2008 TIGER files are converted to shapefiles. 
We will use the shapefiles for the US states. 
Follow these steps to download shapefile with the United States' states:

1. At the bottom of the [2022 page](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341), under Download, click on "Web Interface"
2. For year, select 2022, and for layer type select "States (and equivalent)". Click submit. 
3. Click on "Download national file".

You can check the [metadata for all the TIGER shapefiles here](https://www.census.gov/programs-surveys/geography/technical-documentation/complete-technical-documentation/tiger-geo-line.html). 
The columns for this shapefile are:

![Source: TIGER/Line Shapefiles Technical Documentation](/images/tiger_shp_columns.png)

**Move both datasets to your working directory.**

## `DataFrame` to `GeoDataFrame`

Let's start by importing the necessary libraries:

```{python}
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
```

And update pandas display options:

```{python}
# display all column when looking at dataframes
pd.set_option("display.max.columns", None)
```

Our first step is to import the power plants dataset. 
Notice this is a csv, geopandas doesn't have a way to extract a geometry column from a csv, so we will need to create this geometry manually. 
We start by reading in the data using `pandas`.

```{python}
# import power plants data
power_plants = pd.read_csv('Power_Plants.csv')
power_plants.head()
```

```{python}
# update column names to small caps
power_plants.columns = power_plants.columns.str.lower()
```

From the csv documentation we know the longitude and latitude columns have the location of the power plants in lon/lat coordinates using the CRS WGS 84 (EPSG:4326). 
We use this information to create a new `gpd.GeoDataFrame` from the `pd.DataFrame` using the GeoPandas function `points_from_xy()` like this:

```{python}

power_plants = gpd.GeoDataFrame(power_plants, # data
                                    # specify geometry column
                                    geometry=gpd.points_from_xy(power_plants.longitude, 
                                             power_plants.latitude),
                                    # specify CRS
                                    crs='EPSG:4326'
                    )
```

Check we now have a geometry column:

```{python}
power_plants.head(3)
```

Let's see some information about the CRS of our power plants dataset:

```{python}
# print information about the 
print('is geographic?: ', power_plants.crs.is_geographic)
print('is projected?: ', power_plants.crs.is_projected)
print('datum: ', power_plants.crs.datum)
print('ellipsoid: ', power_plants.crs.ellipsoid)

states.crs
```

Now that we have a geometry column and a CRS, we can plot our dataset:

```{python}
power_plants.plot()
```

## TIGER shapefile

Next, we import the TIGER shapefile:

```{python}
# read-in data
states = gpd.read_file('tl_2022_us_state/tl_2022_us_state.shp')
# update column names to small caps
states.columns = states.columns.str.lower()

states.head()
```

Let's see some information about the CRS of our states geodataframe:

```{python}
# print information about the CRS
states.crs
```

And plot it:

```{python}
states.plot()
```

 Notice the map covers a big extension, this is because, according to the TIGER shapefiles metadata:
 > In addition to the fifty states, the Census Bureau treats the District of Columbia, Puerto Rico, and the Island areas (American Samoa, the Commonwealth of the Northern Mariana Islands, Guam, and the U.S. Virgin Islands) as statistical equivalents of states for the purpose of data presentation. 

 In [this US Census Bureau file](https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf) we can see the what each code for the region, division, and state corresponds to. 
 These should be numeric codes, so we can start by updating these columns:

 ```{python}
 # notice region, division, and statefp are strings (object) types
 states.dtypes
 ```

 ```{python}
 # update dtypes of code columns
states.region = states.region.astype('int')
states.division = states.division.astype('int')
states.statefp = states.statefp.astype('int')
 ```

 States corresponds to regions 1 through 4. 
 However, there's also a code 9 for the region. 
 These rows correspond to non-state regions:

 ```{python}
 print(states.region.unique())
 states[states.region==9]
 ``` 

 Also, we can use the Alaska's statfep code 2 to see that this is the state causing the long map:

 ```{python}
 states[(states.statefp!=2) & (states.region!=9)].plot()
 ```

## Data Preparation

For the pupose of our map (and lesson), we want to keep only the states but remove western islands of Alaska. 
Before we do that *we need to check* there is no power plant data over these islands. 
We can do this by plotting the power plants dataset over the states. 

### Selection

A simple first step is to rewrite the states geodataframe to only include polygons for the US states:

```{python}
states = states[states.region!=9]
```

### Reproject (change CRS)
Remember these two datasets have different CRSs:

```{python}
# check if CRSs match
# we SHOULD NOT combine data with different CRSs
states.crs == power_plants.crs
```

Changing CRS in GeoPandas is very simple using the `to_crs()` method for `gpd.GeoDataFrame`s. 
The general syntax is:
```python
updated_geodf = geodf.to_crs(new_crs)
```
where:
- `updated_geodf` is the output of the method,
- `geodf` is the `gpd.GeoDataFrame` we want to transform, 
- `new_crs` an object of type CRS, the CRS we want to convert to. 

In our case, we will convert the states `gpd.GeoDataFrame` to match the CRS of the power_plants `gpd.GeoDataFrame`:

```{python}
# reproject states to power_plants.crs
states = states.to_crs(power_plants.crs)
print(states.crs == power_plants.crs)
```

Now we can visually confirm there are no power statoins in the western islands of Alaska:

```{python}
# plot both datasets
fig, ax = plt.subplots()
states.plot(ax=ax)
power_plants.plot(ax=ax, color='red', alpha=0.2)
plt.show()
```

### Clipping
<!--
https://medium.com/@alex_44314/use-python-geopandas-to-make-a-us-map-with-alaska-and-hawaii-39a9f5c222c6
-->

To clip to our interste area we will first create a GeoJSON file with a bounding box by going to [http://geojson.io](http://geojson.io). 
After drawing the bounding box, copy paste it into a new file with extension .json. 

::: {.callout-note}
## Creating bounding boxes
This is one way to create a bounding box as a separate file. We will learn other ways of creating polygons using `shapely` later on. 
:::

We can now read in our bounding box. Remember all GeoJSOn files have a CRS WGS84/EPSG:4326:

```{python}
# import bounding box
bbox = gpd.read_file('bounding_box.json')

# look at CRS
print(bbox.crs)

# check bbox CRS matches states
print(bbox.crs == states.crs)

# check data frame
bbox
```

Since these are in the same CRS, we can go ahead and plot them:

```{python}
fig, ax = plt.subplots()
states.plot(ax=ax)
bb.plot(ax=ax, color='none', edgecolor='red')
plt.show()
```

Clipping a `gpd.GeoDataFrame` using a bounding box is easy using the [`clip()` method](https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.clip.html). 
The general syntax is:
```python
updated_geodf = geodf.clip(mask)
```
where:
- `updated_geodf` is the output of the method,
- `geodf` is the `gpd.GeoDataFrame` we want to clip, 
- `mask` is a `gpd.GeoDataFrame` with the polygon(s) we want to use for clipping. This `mask` must be in the same CRS as `geodf`!

In our case:

```{python}
bb_states = states.clip(bbox)
bb_states.plot()
```

## Plotting


```{python}
fig, ax = plt.subplots(figsize=(18, 14))
# remove the axis box around the vis
ax.axis('off')
# annotate the data source, date of access, and hyperlink
ax.annotate("Data: U.S. Energy Information Administration (EIA), accessed Oct 30, 2023 \nhttps://atlas.eia.gov/datasets/eia::power-plants/about", 
            xy=(0.25, .06), 
            xycoords='figure fraction', 
            fontsize=14, 
            color='#555555')

ax.set_title('Operable electric generating plants in the United States by energy source',
fontsize=24)

bb_states.plot(ax=ax,
               color='none',
               edgecolor = '#362312')
power_plants.plot(ax=ax, 
                  column='primsource',
                  legend=True,
                  markersize = 4,
                  cmap='tab20',
                  alpha=0.5,
                  # adjust legend location
                  legend_kwds={"loc": "upper right", 
                               # "bbox_to_anchor": (1, 0.5),
                                "title":'Primary energy source'})
```
<!--

https://www.flexprojector.com

https://www.earthdatascience.org/courses/scientists-guide-to-plotting-data-in-python/plot-spatial-data/customize-vector-plots/python-customize-map-legends-geopandas/
-->