# Updating CRS

In this lesson we will learn how to change the CRS of a `geopandas.GeoDataFrame` and how to make a CSV into a `geopandas.GeoDataFrame`, setting its CRS manually. 

## Data
We will use two datasets in this lesson. 
The first one is a dataset from the U.S. Energy Information Administration (EIA) with [information about operable electric generating plants in the United States by energy source, as of May 2023](https://atlas.eia.gov/datasets/eia::power-plants/about). 
Follow these steps to download the datset for this lesson:

1. Click on the "Download" button.
2. On the side panel click on "Download" for the csv format of the file.

You can [access the metadata for this dataset here](https://eia.maps.arcgis.com/sharing/rest/content/items/bf5c5110b1b944d299bb683cdbd02d2a/info/metadata/metadata.xml?format=default&output=html). 

The second dataset is a [TIGER shapefile from the United States Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341). 
TIGER stands for [Topologically Integrated Geographic Encoding and Referencing](https://en.wikipedia.org/wiki/Topologically_Integrated_Geographic_Encoding_and_Referencing). This used to be the data format the US Census distributed geospatial data, but since 2008 TIGER files are converted to shapefiles. 
We will use the shapefiles for the US states. 
Follow these steps to download shapefile with the United States' states:

1. At the bottom of the [2022 page](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341), under Download, click on "Web Interface"
2. For year, select 2022, and for layer type select "States (and equivalent)". Click submit. 
3. Click on "Download national file".

**Move both datasets to your working directory, inside a directory named "data".**

## `DataFrame` to `GeoDataFrame`

Let's start by importing the necessary libraries:

```{python}
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
```


Our first step is to import the power plants dataset. 
Notice this is a csv, geopandas doesn't have a way to extract a geometry column from a csv, so we will need to create this geometry manually. 
We start by reading in the data using `pandas`.


```{python}
# import power plants data
power_plants = pd.read_csv('Power_Plants.csv')
power_plants.head()
```

```{python}
# update column names to small caps
power_plants.columns = power_plants.columns.str.lower()
```

From the csv documentation we know the longitude and latitude columns have the location of the power plants in lon/lat coordinates using the CRS WGS 84 (EPSG:4326). 
We use this information to create a new `gpd.GeoDataFrame` from the `pd.DataFrame` using the GeoPandas function `points_from_xy()` like this:

```{python}

power_plants = gpd.GeoDataFrame(power_plants, # data
                                    # specify geometry column
                                    geometry=gpd.points_from_xy(power_plants.longitude, 
                                             power_plants.latitude),
                                    # specify CRS
                                    crs='EPSG:4326'
                    )
```

Check we now have a geometry column:

```{python}
power_plants.head(3)
```

Let's see some information about the CRS of our power plants dataset:

```{python}
# print infomration about the 
print('datum: ', power_plants.crs.datum)
print('is geographic?: ', power_plants.crs.is_geographic)
print('is projected?: ', power_plants.crs.is_projected)
print('ellipsoid: ', power_plants.crs.ellipsoid)

states.crs
```