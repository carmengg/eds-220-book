---
jupyter: mpc-env-kernel
---

# Raster manipulation II

In this lesson we will learn how to select pixels in a raster by creating a mask from a polygon. 
The goal will be to calculate total number of meters of vessel tracks within the fishing districts of the Kodiak fishing registration area in Alaska.

## Data

We will use three datsets about Alaska in this lesson.

**Dataset 1**

This is a raster dataset at 1km/pixel resolution showing shipping intensity in the Pacific Arctic region during August 2017. 
The value at each raster cell represents the total length, in meters, of all vessel tracks within each cell. 
The dataset is part of time series of shipping intensity monthly and the complete datset can be accessed at: [https://arcticdata.io/catalog/view/doi:10.18739/A2SQ8QJ9S](https://arcticdata.io/catalog/view/doi:10.18739/A2SQ8QJ9S).


**Dataset 2**

Vector data showing statistical areas dividing waters of the State of Alaska and the adjacent Exclusive Economic Zone (EEZ) into small units for the purpose of reporting and analyzing fishery harvest. The dataset is archived at KNB and can be accessed at the following link:
[https://knb.ecoinformatics.org/view/doi:10.5063/F1QR4VJK](https://knb.ecoinformatics.org/view/doi:10.5063/F1QR4VJK).

**Dataset 3**

A polygon showing Alaska's boundary extracted from the 2022 US Census TIGER shapefiles and with updated CRS. 

## Import data
Let's start by importing the necessary libraries and functions:

```{python}
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches # for creating legends

import xarray as xr
import rioxarray as rioxr
import geopandas as gpd

from rasterio.features import rasterize # for rasterizing polygons

# -----------
# update pandas column display
pd.set_option('display.max_columns', None)
```

```{python}
# open raster
raw_dist = rioxr.open_rasterio('https://arcticdata.io/metacat/d1/mn/v2/object/urn%3Auuid%3A0d223f34-77fc-4ebe-8a58-459b7e575668')
raw_dist
```

```{python}
# open fishing areas polygons
fishing_areas = gpd.read_file(os.path.join(os.getcwd(), 'data', 'Alaska_Commercial_Salmon_Boundaries.gpkg'))
fishing_areas.head()
```

```{python}
# open Alaska boundary
ak = gpd.read_file(os.path.join(os.getcwd(), 'data', 'alaska_perimeter','alaska_perimeter.shp'))
ak
```


## Fishing areas preparation 
We need to do some processing of each dataset before combining them for analysis. 
Let's start with the fishing areas.

### Update column names and CRS

```{python}
# make column names small caps
fishing_areas.columns = fishing_areas.columns.str.lower()
print(fishing_areas.columns, "\n")

# -----------------------
# check CRS
print(f"raw_dist: {raw_dist.rio.crs} \nak: {ak.crs} \nfishing_areas: {fishing_areas.crs}\n")
#print(raw_dist.rio.crs == ak.crs)

# transform fishing_areas CRS to epsg:3338 (AK CRS)
fishing_areas = fishing_areas.to_crs(ak.crs)
print('CRS match:', raw_dist.rio.crs == fishing_areas.crs)
```

### Data selection

This data includes fine scale subdivisions of the fishing areas. 
We'll be working with data from the Kodiak registration area only, so let's select that.

```{python}
# Registration areas:
print(fishing_areas.registration_area_name.unique())

# select Kodiak area
kodiak = fishing_areas[fishing_areas.registration_area_name == 'Kodiak Area' ]
print('# geometries in Kodiak area:', len(kodiak) )
```

### Plot of Kodiak fisihing area

One way to add a custom legend is to create an `Patch` object for each geometry in our plot. 

We can create a `Patch` with a custom color and legend via the `mpatches.Patch()` function:
```python
great_patch =  mpatches.Patch( color = 'great_color',
                               label = 'great_label')
```

To add this patch to the legend we should first create an axis, for example by calling `fig, ax = plt.subplots()` at the beginning of our plot. 
Then we add `great_patch` to the legend:

```python
ax.legend(handles = [great_patch])
```

**Example:**

```{python}
# create AK plot with color patches in legend

fig, ax = plt.subplots()
# --------------------------------------------
ak.plot(ax=ax, color = 'pink')
ak_patch = mpatches.Patch(color='pink',
                          label='Alaska, US')

# --------------------------------------------
#kodiak.dissolve().plot(ax=ax, color = 'blue')
kodiak.plot(ax=ax, color = 'blue')
kodiak_patch = mpatches.Patch(color='blue',
                              label='Kodiak fishing area')

# ------------------------------------------
# create elegend
ax.legend(handles = [ak_patch, kodiak_patch], frameon=False, loc='upper right')

plt.show()
```

### Dissolve & explode polygons

The Kodiak data is too granular for our purposes: we want to get statistics on distance travelled on each fishing district.

```{python}
# check number of districts and rows
print(f"number of geometries: {len(kodiak)}")
print(f"number of districts: {len(kodiak.district_name.unique())}")
```

We can aggregate the geometries based on the values of a column using the `dissolve()` method. 
In our case we will dissolve by district name:

```{python}
# dissolve by district
# as_index=False indicates we want to keep the "groupby" column as a column (not index)
districts = kodiak[['geometry','district_name']].dissolve(by='district_name', as_index=False)
districts 
```

Let's take a look at the districts:

:::{.callout-note}
# Legend location

We can control the legend location adding `loc` and `bbox_to_anchor` to the `legend_kwds`. 

It can be useful to combine both of these to place the legend outside the graph:

- `loc` indicates the corner of the legend box we want to locate, and
- `bbox_to_anchor` is a tuple with coordinates indicating where to place the corner specified in `loc`. Values between 0 and 1 are within the axes (the plot). 
:::

```{python}
districts.plot(column='district_name', 
               legend=True, 
               legend_kwds={'loc': "upper left", 'bbox_to_anchor': (1, 1)})
```

Notice the geometries of some our districts are multipolygons. 
To simplify our analysis for the purpose of this lesson we will separate each multipolygon into individual polygons. 
We can do this using the `explode()` method for `gpd.GeoDataFrames`:

```{python}
# explode polygons
# ignore_index=True resests the index so we don't get a multi-index
districts = districts.explode(ignore_index=True)
districts
```

## Distance raster preparation

Now let's move on to our raster. 

### Squeeze
First, we have an extra unnecessary dimension. Let's get rid of it:

```{python}
# get rid of band dimension
print(f"Before squeeze:\ndimensions {raw_dist.dims} \ncoords: {raw_dist.coords} \n")

raw_dist = raw_dist.squeeze().drop('band')
print(f"After squeeze:\ndimensions {raw_dist.dims}\ncoords: {raw_dist.coords}")
```

### Updating no-data value
Take a look at the data:

```{python}

raw_dist.plot()
```

The previous plot should make us think there are outliers or no-data values affecting the plot range. 
Let's investigate this:

```{python}
# check min and max
print(f"min: {raw_dist.min().item():,}, max: {raw_dist.max().item():,}")

# get no-data value
nodata = raw_dist.rio.nodata
print('no-data value', nodata)
```

We can select all pixels where there is raster data using the [`where()` method](https://docs.xarray.dev/en/stable/generated/xarray.DataArray.where.html).
By default, `where()` will place `np.nan` (NAs) at every cell that does not satisty the condition. 

```{python}
# select pixels with data using where()
raw_dist.where(raw_dist != nodata)

# transform no data values into nan (float)
dist = raw_dist.where(raw_dist != nodata)

# check updates
print(f" min: {dist.min().item()}, max: {dist.max().item():,}")
dist.plot()
```

### Clipping

Since we are only focusing on the Kodiak district, let's clip the raster to this region:

```{python}
# clip raster to Kodiak bounding box
kodiak_dist = dist.rio.clip_box(*districts.total_bounds)

# robust = True plots data within the 2th and 98th percentiles.
kodiak_dist.plot(robust=True)
```

Remember our goal is to calculate the total distance travelled in each district. 
We can take a look at the districts over the distance raster:

```{python}
# raster + districts plot
fig, ax = plt.subplots()
kodiak_dist.plot(ax=ax, robust=True)
districts.plot(ax=ax, edgecolor='red', color='none')
plt.show()
```

## Distance in a single district

A mask is a dataset that indicates which locations in the raster we will keep and which will be converted to NAs or, in our case, zeros. 
It is common to transform a polygon into a raster mask that selects all pixels that touch the polygon.

![](/images/mask/mask.png)

To transform a geometry into a mask we can use the 
`rasterize()` function from [`rasterio.features`](https://rasterio.readthedocs.io/en/stable/api/rasterio.features.html):

`rasterio` is another popular Python library to work with rasters. 
Although many of its functions have been streamlined in `rioxarray`, there are still some that have not been replaced.

In the next cell we use the polygon for the Alitak district `districts.loc[1,'geometry']` to create a mask for the raster. 

```{python}
# create raster mask based on Alitak polygon
alitak_mask = rasterize(shapes = [districts.loc[1,'geometry']],  # a list of geometries
                        out_shape = kodiak_dist.shape,           # shape of outout np array (shape of raster)
                        transform = kodiak_dist.rio.transform(), # transformation of raster
                        all_touched = True)  # all pixels touched by geometries will be burned in 
print(type(alitak_mask))

# print some info about mask
print('mask shape: ', alitak_mask.shape)
print('same shape as raster? ', alitak_mask.shape == kodiak_dist.shape)
print('unique values in mask', np.unique(alitak_mask))
plt.imshow(alitak_mask)
```

To select pixels from the raster using the mask we can simply multiply both rasters together. 

![](/images/mask/mask_raster.png)

```{python}
# apply mask to kodiak distances raster
dist_alitak = kodiak_dist * alitak_mask
dist_alitak.plot(robust=True)
```

Finally, we can add up all the pixel values to obtain the total distance travelled by shipping vessels in Alitak:

```{python}
print(f"total distance in Alitak: {dist_alitak.sum().item():,}")
```

Doing the previous process in a single cell:

```{python}
# mask raster and calculate sum of pixels
alitak_mask = rasterize([districts.loc[1,'geometry']],
                                    out_shape = kodiak_dist.shape,
                                    transform = kodiak_dist.rio.transform(),
                                    all_touched = True)
dist_in_alitak = (kodiak_dist * alitak_mask).sum().item()
dist_in_alitak
```

## Distance in all districts

Once we have achieved a good workflow for a single district, it is easy to repeat it using a `for` loop:

```{python}
# calculate distance per district polygon
distances = []
for i in districts.index:
    mask = rasterize([districts.loc[i,'geometry']],
                              out_shape=kodiak_dist.shape,
                              transform=kodiak_dist.rio.transform(),
                              all_touched=True)
    dist_in_district = (kodiak_dist * mask).sum().item()
    distances.append(dist_in_district)
distances
```

Then we can add the distances as a column in our `GeoDataFrame`:

```{python}
# add column with distance per district polygon
districts['total_distance'] = distances
districts
```

## Acknowledgments
This lesson was adapted from the [Spatial and Image Data Using GeoPandas](https://learning.nceas.ucsb.edu/2022-09-arctic/sections/10-geopandas.html) lesson from the NCEAS Scalable and Computationally Reproducible Approaches to Arctic Research workshop.