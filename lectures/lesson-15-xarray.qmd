---
# https://quarto.org/docs/computations/python.html#kernel-selection
# to check all the available jupyter kernels run from the terminal 
# jupyter kernelspec list
jupyter: base
---

## `xarray`

`xarray` is an open source project and Python package that augments NumPy arrays by adding labeled dimensions, coordinates and attributes. 
`xarray` is based on the netCDF data model, making it the appropriate tool to open, process, and create datasets in netCDF format.

![ [`xarray`'s development portal](https://xarray.dev)](/images/xarray/xarray_logo.png)

### `xarray.DataArray`

The `xarray.DataArray` is the primary data structure of the `xarray` package. 
It is an n-dimensional array with **labeled dimensions**. 
We can think of it as representing a single variable in the NetCDF data format: it holds the variable's values, dimensions, and attributes. 

Apart from variables, dimensions, and attributes, `xarray` introduces one more piece of information to keep track of a dataset's content: 
in `xarray` each dimension has at least one set of **coordinates**.
A dimension's coordinates indicate the dimension's values. 
We can think of the coordinate's values as the tick labels along a dimension. 
For example, in our previous exercise about temperature measured in weather stations, latitude is a dimension, and the latitude's coordinates are 30, 40, 50, 60, and 70 because those are the latitude values at which we are collecting temperature data. 
In that same exercise, time is a dimension, and its coordinates are 2022-09-1, 2022-09-02, and 2022-09-03.

Here you can read more about the [`xarray` terminology](https://docs.xarray.dev/en/stable/user-guide/terminology.html).

#### Create an `xarray.DataArray`
Let's suppose we want to make an `xarray.DataArray` that includes the information from our previous exercise about measuring temperature across three days. 
First, we import all the necessary libraries.

```{python}
import os              
import urllib 
import pandas as pd
import numpy as np

import xarray as xr   # This is the package we'll explore
```

**Variable Values**

The underlying data in the `xarray.DataArray` is a `numpy.ndarray` that holds the variable values. So we can start by making a `numpy.ndarray` with our mock temperature data:

```{python}
# values of a single variable at each point of the coords 
temp_data = np.array([np.zeros((5,5)), 
                      np.ones((5,5)), 
                      np.ones((5,5))*2]).astype(int)
temp_data
```

We could think this is "all" we need to represent our data.
But if we stopped at this point, we would need to 

1. remember that the numbers in this array represent the temperature in degrees Celsius (doesn't seem too bad), 

2. remember that the first dimension of the array represents time, the second latitude and the third longitude (maybe ok), and 

3. keep track of the range of values that time, latitude, and longitude take (not so good).

Keeping track of all this information separately could quickly get messy and could make it challenging to share our data and analyses with others. 
This is what the netCDF data model and `xarray` aim to simplify. 
We can get data and its descriptors together in an `xarray.DataArray` by adding the dimensions over which the variable is being measured and including attributes that appropriately describe dimensions and variables.

**Dimensions and Coordinates**

To specify the dimensions of our upcoming `xarray.DataArray`, we must examine how we've constructed the `numpy.ndarray` holding the temperature data. 
The diagram below shows how the dimensions of `temp_data` are ordered: the first dimension is time, the second is latitude, and the third is longitude. 

![](/images/xarray/netcdf_xarray_indexing.png)

Remember that indexing in 2-dimensional `numpy.ndarrays` starts at the top-left corner of the array, and it is done by rows first and columns second (like matrices). 
This is why latitude is the second dimension and longitude the third. 
From the diagram, we can also see that the coordinates (values of each dimension) are as follow:

- date coordinates are 2022-09-01, 2022-09-02, 2022-09-03
- latitude coordinates are 70, 60, 50, 40, 30 (notice decreasing order)
- longitude coordinates are 60, 70, 80, 90, 100 (notice increasing order)

We add the dimensions as a tuple of strings and coordinates as a dictionary:
```{python}
# names of the dimensions in the required order
dims = ('time', 'lat', 'lon')

# create coordinates to use for indexing along each dimension 
coords = {'time' : pd.date_range("2022-09-01", "2022-09-03"),
          'lat' : np.arange(70, 20, -10),
          'lon' : np.arange(60, 110, 10)}  
```


**Attributes**

Next, we add the attributes (metadata) for our temperature data as a dictionary:

```{python}
# attributes (metadata) of the data array 
attrs = { 'title' : 'temperature across weather stations',
          'standard_name' : 'air_temperature',
          'units' : 'degree_c'}
```


**Putting It All Together**

Finally, we put all these pieces together (data, dimensions, coordinates, and attributes) to create an `xarray.DataArray`:

```{python}
# initialize xarray.DataArray
temp = xr.DataArray(data = temp_data, 
                    dims = dims,
                    coords = coords,
                    attrs = attrs)
temp
```

We can also update the variable’s attributes after creating the object. 
Notice that each of the coordinates is also an `xarray.DataArray`, so we can add attributes to them.

```{python}
# update attributes
temp.attrs['description'] = 'simple example of an xarray.DataArray'

# add attributes to coordinates 
temp.time.attrs = {'description':'date of measurement'}

temp.lat.attrs['standard_name']= 'grid_latitude'
temp.lat.attrs['units'] = 'degree_N'

temp.lon.attrs['standard_name']= 'grid_longitude'
temp.lon.attrs['units'] = 'degree_E'
temp
```

At this point, since we have a single variable, the dataset attributes and the variable attributes are the same. 

#### Indexing
An `xarray.DataArray` allows both positional indexing (like `numpy`) and label-based indexing (like `pandas`). 
Positional indexing is the most basic, and it's done using Python's `[]` syntax, as in `array[i,j]` with i and j both integers. 
**Label-based indexing** takes advantage of dimensions in the array having names and coordinate values that we can use to access data instead of remembering the positional order of each dimension.

As an example, suppose we want to know what was the temperature recorded by the weather station located at 40°0′N 80°0′E on September 1st, 2022. 
By recalling all the information about how the array is setup with respect to the dimensions and coordinates, we can access this data positionally:

```{python}
temp[0,1,2]
```

Or, we can use the dimensions names and their coordinates to access the same value:

```{python}
temp.sel(time='2022-09-01', lat=40, lon=80)
```

Notice that the result of this indexing is a 1x1 `xarray.DataArray`. 
This is because operations on an `xarray.DataArray` (resp. `xarray.DataSet`) always return another `xarray.DataArray` (resp. `xarray.DataSet`). 
In particular, operations returning scalar values will also produce `xarray` objects, so we need to cast them as numbers manually. 
See [xarray.DataArray.item](https://docs.xarray.dev/en/stable/generated/xarray.DataArray.item.html).

More about [`xarray` indexing](https://docs.xarray.dev/en/stable/user-guide/indexing.html).

#### Reduction
`xarray` has implemented several methods to reduce an `xarray.DataArray` along any number of dimensions. 
One of the advantages of `xarray.DataArray` is that, if we choose to, it can carry over attributes when doing calculations.
For example, we can calculate the average temperature at each weather station over time and obtain a new `xarray.DataArray`. 


```{python}
avg_temp = temp.mean(dim = 'time') 
# to keep attributes add keep_attrs = True

avg_temp.attrs = {'title':'average temperature over three days'}
avg_temp
```

More about [`xarray` computations](https://docs.xarray.dev/en/stable/user-guide/computation.html).

### `xarray.DataSet`
An `xarray.DataSet` resembles an in-memory representation of a NetCDF file and consists of *multiple* variables (each being an `xarray.DataArray`), with dimensions, coordinates, and attributes, forming a self-describing dataset. 
Attributes can be specific to each variable, each dimension, or they can describe the whole dataset. 
The variables in an `xarray.DataSet` can have the same dimensions, share some dimensions, or have no dimensions in common. 
Let's see an example of this.


#### Create an `xarray.DataSet`
Following our previous example, we can create an `xarray.DataSet` by combining the temperature data with the average temperature data. 
We also add some attributes that now describe the whole dataset, not only each variable. 

```{python}
# make dictionaries with variables and attributes
data_vars = {'avg_temp': avg_temp,
            'temp': temp}

attrs = {'title':'temperature data at weather stations: daily and and average',
        'description':'simple example of an xarray.Dataset'}

# create xarray.Dataset
temp_dataset = xr.Dataset( data_vars = data_vars,
                        attrs = attrs)
```

Take some time to click through the data viewer and read through the variables and metadata in the dataset. 
Notice the following: 

+ `temp_dataset` is a dataset with three dimensions (time, latitude, and longitude), 

+ `temp` is a variable that uses all three dimensions in the dataset, and

+ `aveg_temp` is a variable that only uses two dimensions (latitude and longitude).

```{python}
temp_dataset
```

#### Save and Reopen
Finally, we want to save our dataset as a NetCDF file. 
To do this, specify the file path and use the *.nc* extension for the file name. 
Then save the dataset using the `to_netcdf` method with your file path.
Opening NetCDF is similarly straightforward using `xarray.open_dataset()`.

```{python}
# specify file path - don't forget the .nc extension!
fp = os.path.join(os.getcwd(),'temp_dataset.nc') 
# save file
temp_dataset.to_netcdf(fp)

# open to check:
check = xr.open_dataset(fp)
check
```

## Acknowledgements

This lesson is adapted from the NetCDF and xarray lesson I prepared for the Arctic Data Center's course on scalable computing:

S. Jeanette Clark, Matthew B. Jones, Samantha Csik, Carmen Galaz García, Bryce Mecum, Natasha Haycock-Chavez, Daphne Virlar-Knight, Juliet Cohen, Anna Liljedahl. 2023. Scalable and Computationally Reproducible Approaches to Arctic Research. Arctic Data Center. [doi:10.18739/A2QF8JM2V](https://learning.nceas.ucsb.edu/2023-03-arctic/)