# Subsetting

In this lesson we will learn different methods to select data from a `pandas.DataFrame`.

## Subsetting a `pandas.DataFrame`

Like it's often the case when working with `pandas`, there are *many* ways in which we can subset a data frame. We will review the core methods to do this. 
<!--
There are two ways to subset data in a Data Frame: by position and by label. 

* **Subsetting by label** means we want to select data from our data frame using the *names* of the columns or the index.

* **Subsetting by position** means we want to select data from our data frame based on the data's *order* in the data frame.
-->

For all examples we will use simplified data (glacial_loss.csv) from the National Snow and Ice Data Center ([Original dataset](​http://dx.doi.org/10.7265/N52N506F)). The column descriptions are:

- **year**: ​calendar year
- **europe - antarctica**: ​change in glacial volume (km3​ ​) in each region that year
- **global_glacial_volume_change**: ​cumulative​ global glacial volume change (km3),
starting in 1961
- **annual_sea_level_rise**: ​annual rise in sea level (mm)
- **cumulative_sea_level_rise**:​ cumulative rise in sea level (mm) since 1961

First, we read-in the file and get some baisc information about this data frame:
```{python}
# import pandas
import pandas as pd

# read in file
df = pd.read_csv('data/lesson-1/glacial_loss.csv')

# see the first five rows
df.head()
```

```{python}
# get column names
df.columns
```

```{python}
# check the data types of each column
df.dtypes
```

```{python}
# data frame's shape: output is a tuple (# rows, # columns)
df.shape
```

### Selecting a single column...

#### ...by column name
This is the simplest case for selecting data. Suppose we are interested in the annual sea level rise. Then we can access that single column in this way:
```{python}
# seelect a single column by using square brackets []
annual_rise = df['annual_sea_level_rise']

# check the type of the ouput
print(type(annual_rise))

annual_rise.head()
```

Since we only selected a single column the output is a `pandas.Series`. 

:::{.callout-note}
## `pd.DataFrame` = dictionary of columns
Remember we can think of a `pandas.DataFrame` as a dictionary of its columns? Then we can access a single column using the column name as the key, just like we would do in a dictionary. That is the  we just used: `df['column_name']`.
:::

This is an example of **selecting by label**, which means we want to select data from our data frame using the *names* of the columns, *not their position*.


#### ... with attribute syntax

We can also access a single column by using attribute syntax:

```{python}
annual_rise_2 = df.annual_sea_level_rise
annual_rise_2.head()
```


### Selecting multiple columns...

#### ... using a list of column names
This is another example of selecting by labels. We just need to pass a list with the column names to the square brackets `[]`. For example, say we want to look at the change in glacial volume in Europe and Asia, then we can select those columns like this:

```{python}
# select columns with names "europe" and "asia"
europe_asia = df[['europe','asia']]
```

Notice there are double square brackets. This is because we are passing the list of names `['europe','asia']` to the selection brakcets `[]`. 

```{python}
# check the type of the resulting selection
print(type(europe_asia))

# check the shape of the selection
print((europe_asia.shape))
```

#### ... using a slice
Yet another example of selecting by label! In this case we will use the `loc` selection. The general syntax is 

```python
df.loc[ row-selection , column-selection]
```
where `row-selection` and `column-selection` are the rows and columns we want to subset from the data frame. 

Let's start by a simple example, where we want to select a slice of columns, say the change in glacial volume per year in all regions. This corresponds to all columns between `europe` and `antarctica`.

```{python}
# select all columns between 'arctic' and 'antarctica'
all_regions = df.loc[:,'europe':'antarctica']
all_regions.head()
```

Notice two things:

- we used the colon `:` as the `row-selection` parameter, which means "select all the rows"
- the slice of the data frame we got includes both endpoints of the slice `'arctic':'antarctica'`. In other words we get the `europe` column *and* the `antarctica` column. This is different from how slicing works in base Python and NumPy, where the endpoint is not included.

### Selecting rows...
Now that we are familiar with some methods for selecting columns, let's move on to selecting rows. 

#### ... using a condition
Selecting which rows satisfy a particular condition is, in my experience, the most usual kind of row subsetting. The general syntax for this type of selection is `df[condition_on_rows]`. For example, suppose we are intersted in all data after 1996. We can select those rows in this way:

```{python}
# select all rows with year > 1996
after_96 = df[df['year']>1996]
after_96
```

Let's break down what is happening here. In this case the condition for our rows is `df['year']>1996`, this checks which rows have a value greater than 1996 in the year column. Let's see this explicitely:

```{python}
# check the type of df['year']>1996
print(type(df['year']>1996))

df['year']>1996
```

The output is a `pandas.Series` with boolean values (`True` or `False`) indicating which rows satisfy the condition year>1996. When we pass such a series of boolean values to the selection brackets `[]` we keep only those rows with a `True` value. 

Here's another example of using a condition. Suppose we want to look at data from years 1970 to 1979. One way of doing this is to use the `in` operator in our condition:

```{python}
seventies = df[df['year'].isin(range(1970,1980))]
seventies
```

Let's break it down: 

- `df['year']` is the column with the year values, a `pandas.Series`,

- in `df['year'].isin()`, we have that [`isin` is a method for the `pandas.Series`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.isin.html) and we are calling it using the dot `.`. 

- `range(1970,1980)` constructs consecutive integers from 1970 to 1979 - remember the right endopoint (1980) is not included!

- `df['year'].isin(range(1970,1980))` is then a `pandas.Series` of boolean values indicating which rows have year equal to 1970, ..., 1979. 

- when we put `df['year'].isin(range(1970,1980))` inside the selection brackets `[]` we obtain the rows of the data frame with year equal to 1970, ..., 1979.

:::{.callout-note}
## `loc` for row selection
It is equivalent to write

```python
# select rows with year<1965
df[df['year'] < 1965]
```
and
```python
# select rows with year<1965 using love
df.loc[ df['year'] <1965 , :]
```
In the second one:

- we are using the `df.loc[ row-selection , column-selection]` syntax

- the `row-selection` parameter is the condition `df['year']<1965`

- the `column-selection` parameter is a colon `:`, which indicates we want all columns for the rows we are selecting.

We prefer the first syntax when we are selecting rows and not columns since it is simpler.
:::

#### ... using multiple conditions
We can combine multipe conditions by surrounding each one in parenthesis `()` and using the or operator `|` and the and operator `&`.

***or* example**:

```{python}
# select rows with 
# annual_sea_level_rise<0.5 mm OR annual_sea_level_rise>0.8 mm

df[ (df['annual_sea_level_rise']<0.5) | (df['annual_sea_level_rise']>0.8)]
df.head()
```

***and* example**

```{python}
# select rows with cumulative_sea_level_rise>10 AND  global_glacial_volume_change<-300
df[ (df['cumulative_sea_level_rise']>10) & (df['global_glacial_volume_change']<-300)]
```


#### ... by position

All the selections we have done so far have been using labels or using a condition. Sometimes we might want to select certain rows depending on their *actual position* in the data frame. In this case we use `iloc` selection with the syntax `df.iloc[row-indices]`. `iloc` stands for integer-location based indexing. Let's see some examples:

```{python}
# select the fifht row = index 4
df.iloc[4]
```

```{python}
# select rows 23 through 30, inclduing 30
df.iloc[23:31]
```

Notice since we are back to indexing by position the right endpoint of the slice (6) is not included in the ouput. 

### Selecting rows and columns simultaneously...

Selecting rows and columns simultaneously can be done using `loc` (labels or conditions) or `iloc` (integer position).

#### ...by labels or conditions
When we want to select rows and columns simultaneously by labels or conditions we can use `loc` selection with the syntax 

```python
df.loc[ row-selection , column-selection]
```

specifying both paratmers: `row-selection` and `column-selection`. These parameters can be a condition (which generates a boolean array) or a subset of labels from the index or the column names. Let's see an examples:

```{python}
# select change in glacial volume in Europe per year after 2000
df.loc[df['year']>2000,['year','europe']]
```
Let's break it down:

- we are using the `df.loc[ row-selection , column-selection]` syntax

- the `row-selection` parameter is the condition `df['year']>1990`, which is a boolean array saying which years are greater than 1990

- the `column-selection` parameter is `['year','europe']` which is a list with the names of the two columns we are intersted in. 

#### ... by position

When we want to select rows and columns simultaneously by position we use `iloc` selection with the syntax:
```python
df.iloc[ row-indices , column-indices]
```

For example, 

```{python}
# select rows 3-7 (including 7) and columns 3 and 4
df.iloc[ 3:8, [3,4] ]
```

Let's break it down:

- we are using the `df.iloc[ row-indices , column-indices]` syntax

- the `row-indices` parameter is the slice *of integer indices* 3:8. Remember the right endpoint (8) won't be included.

- the `column-indices` parameter is the list of integer indices 3 and 4. This means we are selecting the fourth and fifth column.


### Notes about `loc` and `iloc`

::: {.callout-caution}
## `iloc` vs. `loc`
At the beginning, the difference between `iloc` and `loc` can be confusing. Remember the `i` in `iloc` stands for *integer-location*, this reminds us `iloc` only uses integer indexing to retrieve information from the data frames in the same way as indexing for Python lists.

If you want to dive deeper, this is a great discussion about the difference between `iloc` and `loc`: [Stackoverflow - How are iloc and loc different?](https://stackoverflow.com/questions/31593201/how-are-iloc-and-loc-different/31593712#31593712)

And, as always, the documentation will provide you with more information:
[`pandas.DataFrame.loc`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html) and [`pandas.DataFrame.iloc`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iloc.html).
:::


:::{.callout-warning}
## `iloc` for column selection? Avoid it!
We can also access columns by position using `iloc` - but it is best not to if possible.

Suppose we want to access the 10th column in the data frame - then we want to select a column *by position*. In this case the 10th column is the annual sea level rise data and the 10th position corresponds to the index 9. We can select this column by position using the `iloc` selection:

```{python}
# select column by position using iloc
# the syntax is iloc[row-indices, column-indices]
# [:,9] means "select all rows from the 10th column"
annual_rise_3 = df.iloc[:,9]
annual_rise_3.head()
```

Unless you are *really* looking for information about *the 10th column*, do not access a column by position. This is bound to break in many ways:

- it relies on a person correctly counting the position of a column. Even with a small dataset this can be prone to error.

- it is not explicit: if we want information about sea level rise `df.annual_sea_level_rise` or `df['annual_sea_level_rise']` are explicitely telling us we are accessing that information. `df.iloc[:,9]` is obscure and uninformative.

- datastets can get updated. Maybe a new column was added before `annual_sea_level_rise`, this would change the position of the column, which would make any code depending on `df.iloc[:,9]` invalid. Accessing by label helps reproducibility!

:::

## Summary

![`pandas.DataFrame` selection flow chart](/images/selection-flow-chart.jpg)

## Resources

What is presented in this section is a comprehensive, but not an exhaustive list of methods to select data in `pandas.DataFrames`. There are *so many* ways to subset data to get the same result. Some of the content from this lesson is adapted from the following resources and I encourage you to read them to learn more! 

📖 [Pandas getting started tutorials - How to I select a subset of a
DataFrame](https://pandas.pydata.org/docs/getting_started/intro_tutorials/03_subset_data.html) 

📖 [Pandas documentation - User Guide - Indexing and Selecting Data](https://pandas.pydata.org/docs/user_guide/indexing.html#indexing-slicing-with-labels)

📖 [Python for Data Analysis, 3E - Getting started with pandas](https://wesmckinney.com/book/pandas-basics)

## Acknowledgements

The simplified glacial_loss.csv dataset was created by [Dr. Allison Horst](https://allisonhorst.github.io) as part of her course materials on environmental data science. 