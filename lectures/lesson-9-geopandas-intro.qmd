# `geopandas`

GeoPandas is a Python library that extends the `pandas` library by adding support for geospatial data. In this lesson we will introduce the `geopandas` library to work with vector data. We will also make our first map. 

To begin with, let's import `geopandas` with its standard abbreviation `gpd`:

```{python}
# this is the library we will explore
import geopandas as gpd

# we will start using matplotlib for making maps
import matplotlib.pyplot as plt
```

## Data

In this lesson we will use simplified point data about wild pigs (*Sus scrofa*) sightings in California county from the [Global Biodiversity Information Facility](https://www.gbif.org). 

We can read in a shapefile with `geopandas` by using the `gpd.read_file()` function. 

```{python}
pigs = gpd.read_file('gbif_sus_scroga_california/gbif_sus_scroga_california.shp')
pigs.head()
```

::: {.callout-caution}
Although the parameter is only the `.shp` file, remember that we need to have at least the `.shx` and `.dbf` files in the same directory as the `.shp` to read in the data. 
:::

## `GeoSeries` and `GeoDataFrame`

The core data structure in GeoPandas is the `geopandas.GeoDataFrame`. 
We can think of it as a `pandas.DataFrame` with a dedicated geometry column that can perform spatial operations. 

The **geometry column** in a `gpd.GeoDataFrame` holds the geometry (point, polygon, etc) of each spatial feature. Columns in the `gpd.GeoDataFrame` with attributes about the features are `pandas.Series` like in a regular `pd.DataFrame`. 

![Image source: GeoPandas documentation](/images/lesson-8-geopandas/dataframe.svg)

**Example**

First of all, notice that the leftmost column of `pigs` is a column named `geometry` whose values indicate points. 

```{python}
pigs.head(3)
```

As usual, we can check the type of our objects using the `type` Python function:

```{python}
# type of the pigs dataframe 
print(type(pigs))

# type of the geometry column
print(type(pigs.geometry))

# type of the gbifID column
print(type(pigs.gbifID))
```

We can also check the type of each element in the geometry column using the `geom_type` attribute of a `gpd.GeoDataFrame`:

```{python}
pigs.geom_type
```

<!--

This is a `shapely` point. `shapely` is another Python library that to construct and modify points, lines, and polygons. We will talk more about it in the next lessons.
-->

## Geometric information

Two other important attributes of a `gpd.GeoDataFrame` are its coordinate reference system (CRS) and its extent. 

We can think of the **coordinate reference system (CRS)** as the instructions to locate each feature in our dataframe on the surface of the Earth. We access the CRS of a `gpd.GeoDataFrame` using the `crs` attribute:

```{python}
# access the crs of the GeoDataFrame
pigs.crs
```

The **extent** is the bounding box covering *all* the features in our spatial dataset. This is formed finding the points that are furthest west, east, south and north.

![Spatial extent of different vector data. Image Source: National Ecological Observatory Network (NEON)](/images/lesson-8-geopandas/spatial-extent.png)

We access the extent of a `gpd.GeoDataFrame` using the `total_bounds` attribute:

```{python}
pigs.total_bounds
```

## Data wrangling

GeoPandas is conveniently built on top of `pandas`, so we may use all everything we have learned about data selection, wrangling, and modification for `pd.DataFrame`.

**Example**
Suppose we want to only use recent data for wild pig observations. A quick check shows that this dataframe has data since 1818:

```{python}
# use sort_index() method to order the index
pigs.year.value_counts().sort_index()
```

We can use our usual data selection to get data from 2020 onwards:

```{python}
# selet data from 2020 onwards
pigs_recent = pigs[pigs.year>=2020]

# print length of original dataframe
print(len(pigs))

# check length of new dataframe
len(pigs_recent)
```

## Plotting

### `plot()`

Similarly to a `pd.DataFrame`, a `gpd.GeoDataFrame` has a `plot()` method that we can call directly to create a quick view of our data. 
The geospatial information of the `gpd.GeoDataFrame` will be used to create the axes of the plot.

**Example**

This is a quick look at our recent pigs data:

```{python}
pigs_recent.plot()
```

### `matplotlib`'s `fig` and `ax`

## Simple map


## References

[Geopandas Documentation - Introduction to GeoPandas](https://geopandas.org/en/stable/getting_started/introduction.html)

GBIG data: GBIF.org (23 October 2023) GBIF Occurrence Download https://doi.org/10.15468/dl.qavhwp
