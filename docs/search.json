[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EDS 220 - Working with Environmental Datasets",
    "section": "",
    "text": "Welcome!"
  },
  {
    "objectID": "sections/lesson-1-python-review.html#about",
    "href": "sections/lesson-1-python-review.html#about",
    "title": "1  Python Review",
    "section": "1.1 About",
    "text": "1.1 About\nThis is a short reveiw about some core concepts in Python exemplified by objects i the numpy library."
  },
  {
    "objectID": "sections/lesson-1-python-review.html#numpy",
    "href": "sections/lesson-1-python-review.html#numpy",
    "title": "1  Python Review",
    "section": "1.2 numpy",
    "text": "1.2 numpy\nNumPy is one of the core packages for numerical computing in Python. Many of the packages we will use in this course use NumPy’s arrays as their building blocks. Additionally, numpy objects have been optimized for processing, so computations on them are really fast and use less memory than doing the equivalent using base Python.\nIn this lesson we will use numpy to review some core concepts in Python you’re already familiar with.\nFirst, let’s start by importing the library:\n\nimport numpy as np"
  },
  {
    "objectID": "sections/lesson-1-python-review.html#variables",
    "href": "sections/lesson-1-python-review.html#variables",
    "title": "1  Python Review",
    "section": "1.3 Variables",
    "text": "1.3 Variables\nWe can think of a variable as a name we assign to a particular object in Python. For example:\n\n# assign the integer number 1 to variable a\na = 1  \n\nWhen we run the cell, we store the variables and their value. We can view a variable’s value in two ways:\n\nrunning a cell with the variable name\nusing the print function to print the value\n\n\n# show the value\na\n\n1\n\n\n\n# print the value \nprint(a)\n\n1\n\n\n\n\n\n\n\n\nR and Python\n\n\n\nIn Python we use the equal sign = to assign values to variables in the same way the left-arrow &lt;- is used in R.\n\n\n\n1.3.1 Naming Variables\nLowercase and uppercase letters are not the same in a variable’s name. The underscore character _ also alters a variable’s name. For example, each of the following defines a different variable:\n\nmilesRun = 1\nMilesRun = 2\nmiles_run = 3\nmilesrun = 4\nMILESrun = 5\n_miles_run_ = 6\nMiLeSrUn = 7\nmilesrun__ = 8\n\n# notice I can print multiple variables by separating them with a comma\nprint(milesRun, MilesRun, miles_run, milesrun, MILESrun, _miles_run_, MiLeSrUn, milesrun__)\n\n1 2 3 4 5 6 7 8\n\n\nThere are many ways of constructing multi-word variable names as we can see in the previous example. Some are easier to read than others. The first three are commonly used and widely accepted ways of writing variable names (the last three are just chaos).\nIn this course we will name variables using snake_case, where words are all in small caps and separated by underscores (ex: miles_run). This is the naming convention suggested by the Style Guide for Python Code.\n\n\n1.3.2 Variables and Objects\nYou will often encounter the word object in Python documentation and tutorials. Informally speaking, an object is a bundle of properties and actions about something specific. For example, an object could represent a data frame with properties such as number of rows, names of columns, and date created, and actions suchs as selecting a specific row or adding a new column.\nA variable is the name we give a specific object, and the same object can be referenced by different variables. An analogy for this is the following: the Sun (object) is called “sol” in Spanish and “soleil” in French, so two different names (variables) represent the same object. You can read more technical details about the difference between objects and variables in Python here.\nIn practice, we can often use the word variable and object interchangeably. I want to bring up what objects are so you’re not caught off-guard with vocabulary you’ll often encounter in the documentation, StackExchange, etc. We’ll often use the word object too (for example, in the next subsection!)."
  },
  {
    "objectID": "sections/lesson-1-python-review.html#types",
    "href": "sections/lesson-1-python-review.html#types",
    "title": "1  Python Review",
    "section": "1.4 Types",
    "text": "1.4 Types\nEvery object in Python has a type, the type tells us what kind of object it is. We can also call the type of an object, the class of an object (so class and type both mean what kind of object we have).\nWe can see the type/class of a variable/object by using the type function:\n\nprint(type(a))\n\n&lt;class 'int'&gt;\n\n\n\n1.4.1 int\nint is one of the basic data types in Python, it represents an integer number (remember a=1).\n\n\n1.4.2 str\nAnother basic Python data type is the string, represent by str in code. Strings are sequences of characters(text). We create a string by writing text between single or double quotes:\n\n'this is a string!'\n\n'this is a string!'\n\n\n\n\"this also is a string!\"\n\n'this also is a string!'\n\n\nWe can, of course, assign strings to variables and check their type:\n\nb = 'my first string variable'\nprint('the class of my variable is', type(b))\n\nthe class of my variable is &lt;class 'str'&gt;\n\n\n\n\n1.4.3 bool\nThe final data type we will see today is the boolean type. It only has two values: True and False. These two words can never be used as variable names because they represent built-in data types in Python. We generally encounter booleans as results from comparisons, when they indicate if a statement is true or false. For example:\n\nprint(8 &gt; 9)\nprint(8 == 9)  # the double equal == means we are comparing if the values are the same\nprint(8 != 8)  # the != means we are comparing if the values are different\n\nFalse\nFalse\nFalse\n\n\nIntegers, strings, and booleans are three of the core classes in Python. Since “everything in Python is an object” and every object has a class, we will interact with SO MANY classes in this course. Often, knowing the type of an object is the first step to finding information to code what you want!"
  },
  {
    "objectID": "sections/lesson-1-python-review.html#functions",
    "href": "sections/lesson-1-python-review.html#functions",
    "title": "1  Python Review",
    "section": "1.5 Functions",
    "text": "1.5 Functions\nprint was our first example of a Python function. Functions take in a set of arguments, separated by commas, and use those arguments to create some output. There are several built-in funcions in python, most of them are for interacting with the basic Python data types. You can see a list of them here.\nNOTE: we can interchangeably say arguments or parameters. You will see argument more often in the documentation.\nWe can ask for information about a function by executing ? followed by the function name:\n\n?print\n\n\nThe first line is always the function showing all of its arguments in parenthesis. Then there is a short description of what the function does. And finally a list of the arguments and a brief explanation about each of them.\nYou can see there are different types of arguments inside the parenthesis. Roughly speaking, a function has two types of arguments:\n\nnon-default arguments: arguments you need to specify for the function to do something, and\ndefault arguments: arguments that are pre-filled in by the function, but you can override them. Default arguments appear inside the parenthesis () in the form default_argument = default_value.\n\nExample:\nend is an argument in print with the default value a new line. We can change this argument so that finishes the line with ^_^ instead:\n\n# notice we had always used print withough specifying any value for the `end` argument\nprint('I am changing the default end argument of the print function', end=' ^_^')\n\nI am changing the default end argument of the print function ^_^"
  },
  {
    "objectID": "sections/lesson-1-python-review.html#exercise",
    "href": "sections/lesson-1-python-review.html#exercise",
    "title": "1  Python Review",
    "section": "1.6 Exercise",
    "text": "1.6 Exercise\n\n\n\n\n\n\nExercise\n\n\n\n\nRead the print function help. What is the type of the argument sep? Is this a default or non-default argument? Why?\nCreate two new variables, one with the integer value 77 and another one with the string 99.\nUse your variables to print 77%99%77 by changing the value of one of the default arguments in print."
  },
  {
    "objectID": "sections/lesson-1-python-review.html#attributes-methods",
    "href": "sections/lesson-1-python-review.html#attributes-methods",
    "title": "1  Python Review",
    "section": "1.7 Attributes & Methods",
    "text": "1.7 Attributes & Methods\nAn object in Python has attributes and methods. An attribute is a property of the object, some piece of information about it. A method is is a procedure associated with an object, so it is an action where the main ingredient is the object.\nFor example, these could be some attributes and methods a class cat:\n\nMore formally, a method is a function that acts on the object it is part of.\nTo get along with Python it is very important to understand methods and attributes as parts of an object. This is a major difference between R and Python.\nWe can access a variable’s attributes and methods by adding a period . at the end of the variable’s name. So we would write variable.variable_method() or variable.variable_attribute. Let’s see a concrete example:\n\n# define a string \nvar = 'Hello, world!'\n\n# strings have many methods associated to them\n# one of them is the upper method, which returns the same string in all caps\nvar.upper()\n\n'HELLO, WORLD!'\n\n\nThe string HELLO, WORLD! is the output of the function var.upper. We can store it in another variable if we want to. Notice that the upper method did not change the variable var, it has the same ‘Hello, world!’ in it\n\noutput = var.upper()\nprint(output)\nprint(var)\n\nHELLO, WORLD!\nHello, world!\n\n\nAnd, as we discussed var.upper is a method of the variable var, so it is a function. We can check this!\n\ntype(var.upper)\n\nbuiltin_function_or_method\n\n\nThe basic data types we have seen so far don’t have any attributes. But we’ll soon enough encounter other classes that do.\n\n\n\n\n\n\nR and Python\n\n\n\nIn R we don’t use methods within an object. Rather, functions are extrinsic (outside) the objects they are acting on. In R, there would be two separate items: the variable var and a separate function upper that gets var as a parameter:\n# this is R code\nvar &lt;- 'Hello, world!' \nupper(var)\nUsing the R pipe operator % is closer to the dot . in Python:\n# this is R code\nvar &lt;- 'Hello, world!' \nvar % upper()\nWhat happens here is that the pipe % is passing var to the upper() function as its first argument. This is essentially what happens in Python when a function is a method of a class:\n# this is Python code\nvar = 'Hello, world!' \nvar.upper()\nHowever, remember that methods are functions that are part of an object and a method uses the object it is part of to produce some information."
  },
  {
    "objectID": "sections/lesson-1-python-review.html#exercise-2",
    "href": "sections/lesson-1-python-review.html#exercise-2",
    "title": "1  Python Review",
    "section": "1.8 Exercise",
    "text": "1.8 Exercise\n\n\n\n\n\n\nExercise\n\n\n\n\nSuppose we have a class tree, make a diagram similar to the cat class diagram showing 3 attributes for the class and 3 methods.\nCreate a a string variable with the year you were born. Use the string method isnumeric to check if your variable is a number. What type of output did you get?\nIn the following code, explain what are my_variable, count, '2', and x.\n\n\n\n\nmy_variable = 'EDS 220'\nx = my_variable.count('2')\nx\n\n2"
  }
]